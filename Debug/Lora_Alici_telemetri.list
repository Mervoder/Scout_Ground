
Lora_Alici_telemetri.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be40  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  0800bfe0  0800bfe0  0000cfe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3c8  0800c3c8  0000e2c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3c8  0800c3c8  0000d3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3d0  0800c3d0  0000e2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3d0  0800c3d0  0000d3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3d4  0800c3d4  0000d3d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  0800c3d8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fb4  200002c4  0800c69c  0000e2c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002278  0800c69c  0000f278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e2c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012925  00000000  00000000  0000e2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003374  00000000  00000000  00020c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00023f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b1f  00000000  00000000  00024e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019209  00000000  00000000  0002596f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001436e  00000000  00000000  0003eb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b64f  00000000  00000000  00052ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de535  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cf4  00000000  00000000  000de578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000e326c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c4 	.word	0x200002c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bfc8 	.word	0x0800bfc8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c8 	.word	0x200002c8
 80001dc:	0800bfc8 	.word	0x0800bfc8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Interrupt ile gelen verinin alınması */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

	if(huart == &huart2)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a14      	ldr	r2, [pc, #80]	@ (8000f04 <HAL_UART_RxCpltCallback+0x5c>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d121      	bne.n	8000efc <HAL_UART_RxCpltCallback+0x54>
		{

		 if ((Rx != '\n') && (Rx_counter < 30))
 8000eb8:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <HAL_UART_RxCpltCallback+0x60>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b0a      	cmp	r3, #10
 8000ebe:	d00f      	beq.n	8000ee0 <HAL_UART_RxCpltCallback+0x38>
 8000ec0:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <HAL_UART_RxCpltCallback+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b1d      	cmp	r3, #29
 8000ec6:	dc0b      	bgt.n	8000ee0 <HAL_UART_RxCpltCallback+0x38>
		 	 	 {
		            Rx_Buff[Rx_counter] = Rx;
 8000ec8:	4b10      	ldr	r3, [pc, #64]	@ (8000f0c <HAL_UART_RxCpltCallback+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	@ (8000f08 <HAL_UART_RxCpltCallback+0x60>)
 8000ece:	7811      	ldrb	r1, [r2, #0]
 8000ed0:	4a0f      	ldr	r2, [pc, #60]	@ (8000f10 <HAL_UART_RxCpltCallback+0x68>)
 8000ed2:	54d1      	strb	r1, [r2, r3]
		            Rx_counter++; }
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <HAL_UART_RxCpltCallback+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	4a0c      	ldr	r2, [pc, #48]	@ (8000f0c <HAL_UART_RxCpltCallback+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	e008      	b.n	8000ef2 <HAL_UART_RxCpltCallback+0x4a>

		 else {
		            Rx=0;
 8000ee0:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <HAL_UART_RxCpltCallback+0x60>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
		            Rx_counter = 0;
 8000ee6:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <HAL_UART_RxCpltCallback+0x64>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
		            new_data_flag = 1;
 8000eec:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <HAL_UART_RxCpltCallback+0x6c>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	701a      	strb	r2, [r3, #0]
		        }
	HAL_UART_Receive_IT(&huart2, &Rx, 1);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	4904      	ldr	r1, [pc, #16]	@ (8000f08 <HAL_UART_RxCpltCallback+0x60>)
 8000ef6:	4803      	ldr	r0, [pc, #12]	@ (8000f04 <HAL_UART_RxCpltCallback+0x5c>)
 8000ef8:	f003 f94f 	bl	800419a <HAL_UART_Receive_IT>
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	}

}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	200004d4 	.word	0x200004d4
 8000f08:	20000302 	.word	0x20000302
 8000f0c:	20000350 	.word	0x20000350
 8000f10:	200002e4 	.word	0x200002e4
 8000f14:	200003b8 	.word	0x200003b8

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1e:	f000 fdb1 	bl	8001a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f22:	f000 f921 	bl	8001168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f26:	f000 f9b3 	bl	8001290 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f2a:	f000 f987 	bl	800123c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000f2e:	f007 fce1 	bl	80088f4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, &Rx, 1);
 8000f32:	2201      	movs	r2, #1
 8000f34:	4978      	ldr	r1, [pc, #480]	@ (8001118 <main+0x200>)
 8000f36:	4879      	ldr	r0, [pc, #484]	@ (800111c <main+0x204>)
 8000f38:	f003 f92f 	bl	800419a <HAL_UART_Receive_IT>

//  HAL_UART_Receive_IT(&huart2, Rx_Buff, 1);
//  HAL_UART_Receive_IT(&huart1, (uint8_t *)&Rx_data, 1);


  PID_CONFIG_SEND();
 8000f3c:	f000 f9fa 	bl	8001334 <PID_CONFIG_SEND>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  	  converter.b[0]= Rx_Buff[0];
 8000f40:	4b77      	ldr	r3, [pc, #476]	@ (8001120 <main+0x208>)
 8000f42:	781a      	ldrb	r2, [r3, #0]
 8000f44:	4b77      	ldr	r3, [pc, #476]	@ (8001124 <main+0x20c>)
 8000f46:	701a      	strb	r2, [r3, #0]
 	  converter.b[1]= Rx_Buff[1];
 8000f48:	4b75      	ldr	r3, [pc, #468]	@ (8001120 <main+0x208>)
 8000f4a:	785a      	ldrb	r2, [r3, #1]
 8000f4c:	4b75      	ldr	r3, [pc, #468]	@ (8001124 <main+0x20c>)
 8000f4e:	705a      	strb	r2, [r3, #1]
 	  converter.b[2]= Rx_Buff[2];
 8000f50:	4b73      	ldr	r3, [pc, #460]	@ (8001120 <main+0x208>)
 8000f52:	789a      	ldrb	r2, [r3, #2]
 8000f54:	4b73      	ldr	r3, [pc, #460]	@ (8001124 <main+0x20c>)
 8000f56:	709a      	strb	r2, [r3, #2]
 	  converter.b[3]= Rx_Buff[3];
 8000f58:	4b71      	ldr	r3, [pc, #452]	@ (8001120 <main+0x208>)
 8000f5a:	78da      	ldrb	r2, [r3, #3]
 8000f5c:	4b71      	ldr	r3, [pc, #452]	@ (8001124 <main+0x20c>)
 8000f5e:	70da      	strb	r2, [r3, #3]

 	 Yaw_Data = converter.f;
 8000f60:	4b70      	ldr	r3, [pc, #448]	@ (8001124 <main+0x20c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a70      	ldr	r2, [pc, #448]	@ (8001128 <main+0x210>)
 8000f66:	6013      	str	r3, [r2, #0]

 	  converter.b[0]= Rx_Buff[4];
 8000f68:	4b6d      	ldr	r3, [pc, #436]	@ (8001120 <main+0x208>)
 8000f6a:	791a      	ldrb	r2, [r3, #4]
 8000f6c:	4b6d      	ldr	r3, [pc, #436]	@ (8001124 <main+0x20c>)
 8000f6e:	701a      	strb	r2, [r3, #0]
 	  converter.b[1]= Rx_Buff[5];
 8000f70:	4b6b      	ldr	r3, [pc, #428]	@ (8001120 <main+0x208>)
 8000f72:	795a      	ldrb	r2, [r3, #5]
 8000f74:	4b6b      	ldr	r3, [pc, #428]	@ (8001124 <main+0x20c>)
 8000f76:	705a      	strb	r2, [r3, #1]
 	  converter.b[2]= Rx_Buff[6];
 8000f78:	4b69      	ldr	r3, [pc, #420]	@ (8001120 <main+0x208>)
 8000f7a:	799a      	ldrb	r2, [r3, #6]
 8000f7c:	4b69      	ldr	r3, [pc, #420]	@ (8001124 <main+0x20c>)
 8000f7e:	709a      	strb	r2, [r3, #2]
 	  converter.b[3]= Rx_Buff[7];
 8000f80:	4b67      	ldr	r3, [pc, #412]	@ (8001120 <main+0x208>)
 8000f82:	79da      	ldrb	r2, [r3, #7]
 8000f84:	4b67      	ldr	r3, [pc, #412]	@ (8001124 <main+0x20c>)
 8000f86:	70da      	strb	r2, [r3, #3]

 	 Roll_Data = converter.f;
 8000f88:	4b66      	ldr	r3, [pc, #408]	@ (8001124 <main+0x20c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a67      	ldr	r2, [pc, #412]	@ (800112c <main+0x214>)
 8000f8e:	6013      	str	r3, [r2, #0]

 	  converter.b[0]= Rx_Buff[8];
 8000f90:	4b63      	ldr	r3, [pc, #396]	@ (8001120 <main+0x208>)
 8000f92:	7a1a      	ldrb	r2, [r3, #8]
 8000f94:	4b63      	ldr	r3, [pc, #396]	@ (8001124 <main+0x20c>)
 8000f96:	701a      	strb	r2, [r3, #0]
 	  converter.b[1]= Rx_Buff[9];
 8000f98:	4b61      	ldr	r3, [pc, #388]	@ (8001120 <main+0x208>)
 8000f9a:	7a5a      	ldrb	r2, [r3, #9]
 8000f9c:	4b61      	ldr	r3, [pc, #388]	@ (8001124 <main+0x20c>)
 8000f9e:	705a      	strb	r2, [r3, #1]
 	  converter.b[2]= Rx_Buff[10];
 8000fa0:	4b5f      	ldr	r3, [pc, #380]	@ (8001120 <main+0x208>)
 8000fa2:	7a9a      	ldrb	r2, [r3, #10]
 8000fa4:	4b5f      	ldr	r3, [pc, #380]	@ (8001124 <main+0x20c>)
 8000fa6:	709a      	strb	r2, [r3, #2]
 	  converter.b[3]= Rx_Buff[11];
 8000fa8:	4b5d      	ldr	r3, [pc, #372]	@ (8001120 <main+0x208>)
 8000faa:	7ada      	ldrb	r2, [r3, #11]
 8000fac:	4b5d      	ldr	r3, [pc, #372]	@ (8001124 <main+0x20c>)
 8000fae:	70da      	strb	r2, [r3, #3]

 	 pitch_Data= converter.f;
 8000fb0:	4b5c      	ldr	r3, [pc, #368]	@ (8001124 <main+0x20c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a5e      	ldr	r2, [pc, #376]	@ (8001130 <main+0x218>)
 8000fb6:	6013      	str	r3, [r2, #0]

 	  converter.b[0]= Rx_Buff[12];
 8000fb8:	4b59      	ldr	r3, [pc, #356]	@ (8001120 <main+0x208>)
 8000fba:	7b1a      	ldrb	r2, [r3, #12]
 8000fbc:	4b59      	ldr	r3, [pc, #356]	@ (8001124 <main+0x20c>)
 8000fbe:	701a      	strb	r2, [r3, #0]
 	  converter.b[1]= Rx_Buff[13];
 8000fc0:	4b57      	ldr	r3, [pc, #348]	@ (8001120 <main+0x208>)
 8000fc2:	7b5a      	ldrb	r2, [r3, #13]
 8000fc4:	4b57      	ldr	r3, [pc, #348]	@ (8001124 <main+0x20c>)
 8000fc6:	705a      	strb	r2, [r3, #1]
 	  converter.b[2]= Rx_Buff[14];
 8000fc8:	4b55      	ldr	r3, [pc, #340]	@ (8001120 <main+0x208>)
 8000fca:	7b9a      	ldrb	r2, [r3, #14]
 8000fcc:	4b55      	ldr	r3, [pc, #340]	@ (8001124 <main+0x20c>)
 8000fce:	709a      	strb	r2, [r3, #2]
 	  converter.b[3]= Rx_Buff[15];
 8000fd0:	4b53      	ldr	r3, [pc, #332]	@ (8001120 <main+0x208>)
 8000fd2:	7bda      	ldrb	r2, [r3, #15]
 8000fd4:	4b53      	ldr	r3, [pc, #332]	@ (8001124 <main+0x20c>)
 8000fd6:	70da      	strb	r2, [r3, #3]

 	  GPS_Enlem= converter.f;
 8000fd8:	4b52      	ldr	r3, [pc, #328]	@ (8001124 <main+0x20c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a55      	ldr	r2, [pc, #340]	@ (8001134 <main+0x21c>)
 8000fde:	6013      	str	r3, [r2, #0]

 	  converter.b[0]= Rx_Buff[16];
 8000fe0:	4b4f      	ldr	r3, [pc, #316]	@ (8001120 <main+0x208>)
 8000fe2:	7c1a      	ldrb	r2, [r3, #16]
 8000fe4:	4b4f      	ldr	r3, [pc, #316]	@ (8001124 <main+0x20c>)
 8000fe6:	701a      	strb	r2, [r3, #0]
 	  converter.b[1]= Rx_Buff[17];
 8000fe8:	4b4d      	ldr	r3, [pc, #308]	@ (8001120 <main+0x208>)
 8000fea:	7c5a      	ldrb	r2, [r3, #17]
 8000fec:	4b4d      	ldr	r3, [pc, #308]	@ (8001124 <main+0x20c>)
 8000fee:	705a      	strb	r2, [r3, #1]
 	  converter.b[2]= Rx_Buff[18];
 8000ff0:	4b4b      	ldr	r3, [pc, #300]	@ (8001120 <main+0x208>)
 8000ff2:	7c9a      	ldrb	r2, [r3, #18]
 8000ff4:	4b4b      	ldr	r3, [pc, #300]	@ (8001124 <main+0x20c>)
 8000ff6:	709a      	strb	r2, [r3, #2]
 	  converter.b[3]= Rx_Buff[19];
 8000ff8:	4b49      	ldr	r3, [pc, #292]	@ (8001120 <main+0x208>)
 8000ffa:	7cda      	ldrb	r2, [r3, #19]
 8000ffc:	4b49      	ldr	r3, [pc, #292]	@ (8001124 <main+0x20c>)
 8000ffe:	70da      	strb	r2, [r3, #3]

 	  GPS_Boylam = converter.f;
 8001000:	4b48      	ldr	r3, [pc, #288]	@ (8001124 <main+0x20c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a4c      	ldr	r2, [pc, #304]	@ (8001138 <main+0x220>)
 8001006:	6013      	str	r3, [r2, #0]

 	  converter.b[0]= Rx_Buff[20];
 8001008:	4b45      	ldr	r3, [pc, #276]	@ (8001120 <main+0x208>)
 800100a:	7d1a      	ldrb	r2, [r3, #20]
 800100c:	4b45      	ldr	r3, [pc, #276]	@ (8001124 <main+0x20c>)
 800100e:	701a      	strb	r2, [r3, #0]
 	  converter.b[1]= Rx_Buff[21];
 8001010:	4b43      	ldr	r3, [pc, #268]	@ (8001120 <main+0x208>)
 8001012:	7d5a      	ldrb	r2, [r3, #21]
 8001014:	4b43      	ldr	r3, [pc, #268]	@ (8001124 <main+0x20c>)
 8001016:	705a      	strb	r2, [r3, #1]
 	  converter.b[2]= Rx_Buff[22];
 8001018:	4b41      	ldr	r3, [pc, #260]	@ (8001120 <main+0x208>)
 800101a:	7d9a      	ldrb	r2, [r3, #22]
 800101c:	4b41      	ldr	r3, [pc, #260]	@ (8001124 <main+0x20c>)
 800101e:	709a      	strb	r2, [r3, #2]
 	  converter.b[3]= Rx_Buff[23];
 8001020:	4b3f      	ldr	r3, [pc, #252]	@ (8001120 <main+0x208>)
 8001022:	7dda      	ldrb	r2, [r3, #23]
 8001024:	4b3f      	ldr	r3, [pc, #252]	@ (8001124 <main+0x20c>)
 8001026:	70da      	strb	r2, [r3, #3]

 	  GPS_yukseklik = converter.f+110;
 8001028:	4b3e      	ldr	r3, [pc, #248]	@ (8001124 <main+0x20c>)
 800102a:	edd3 7a00 	vldr	s15, [r3]
 800102e:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 800113c <main+0x224>
 8001032:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001036:	4b42      	ldr	r3, [pc, #264]	@ (8001140 <main+0x228>)
 8001038:	edc3 7a00 	vstr	s15, [r3]



     snprintf(Yaw_Data1, sizeof(Yaw_Data1), "%f", Yaw_Data);
 800103c:	4b3a      	ldr	r3, [pc, #232]	@ (8001128 <main+0x210>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fa89 	bl	8000558 <__aeabi_f2d>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	e9cd 2300 	strd	r2, r3, [sp]
 800104e:	4a3d      	ldr	r2, [pc, #244]	@ (8001144 <main+0x22c>)
 8001050:	2121      	movs	r1, #33	@ 0x21
 8001052:	483d      	ldr	r0, [pc, #244]	@ (8001148 <main+0x230>)
 8001054:	f008 fe78 	bl	8009d48 <sniprintf>
     snprintf(Roll_Data1, sizeof(Roll_Data1), "%f", Roll_Data);
 8001058:	4b34      	ldr	r3, [pc, #208]	@ (800112c <main+0x214>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fa7b 	bl	8000558 <__aeabi_f2d>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	e9cd 2300 	strd	r2, r3, [sp]
 800106a:	4a36      	ldr	r2, [pc, #216]	@ (8001144 <main+0x22c>)
 800106c:	2121      	movs	r1, #33	@ 0x21
 800106e:	4837      	ldr	r0, [pc, #220]	@ (800114c <main+0x234>)
 8001070:	f008 fe6a 	bl	8009d48 <sniprintf>
     snprintf(pitch_Data1, sizeof(pitch_Data1), "%f", pitch_Data);
 8001074:	4b2e      	ldr	r3, [pc, #184]	@ (8001130 <main+0x218>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fa6d 	bl	8000558 <__aeabi_f2d>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	e9cd 2300 	strd	r2, r3, [sp]
 8001086:	4a2f      	ldr	r2, [pc, #188]	@ (8001144 <main+0x22c>)
 8001088:	2121      	movs	r1, #33	@ 0x21
 800108a:	4831      	ldr	r0, [pc, #196]	@ (8001150 <main+0x238>)
 800108c:	f008 fe5c 	bl	8009d48 <sniprintf>
     snprintf(GPS_Enlem1, sizeof(GPS_Boylam1), "%f", GPS_Enlem);
 8001090:	4b28      	ldr	r3, [pc, #160]	@ (8001134 <main+0x21c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fa5f 	bl	8000558 <__aeabi_f2d>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	e9cd 2300 	strd	r2, r3, [sp]
 80010a2:	4a28      	ldr	r2, [pc, #160]	@ (8001144 <main+0x22c>)
 80010a4:	2121      	movs	r1, #33	@ 0x21
 80010a6:	482b      	ldr	r0, [pc, #172]	@ (8001154 <main+0x23c>)
 80010a8:	f008 fe4e 	bl	8009d48 <sniprintf>
     snprintf(GPS_Boylam1, sizeof(GPS_Boylam1), "%f", GPS_Boylam);
 80010ac:	4b22      	ldr	r3, [pc, #136]	@ (8001138 <main+0x220>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fa51 	bl	8000558 <__aeabi_f2d>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	e9cd 2300 	strd	r2, r3, [sp]
 80010be:	4a21      	ldr	r2, [pc, #132]	@ (8001144 <main+0x22c>)
 80010c0:	2121      	movs	r1, #33	@ 0x21
 80010c2:	4825      	ldr	r0, [pc, #148]	@ (8001158 <main+0x240>)
 80010c4:	f008 fe40 	bl	8009d48 <sniprintf>
     snprintf(GPS_yukseklik1, sizeof(GPS_yukseklik1), "%f", GPS_yukseklik);
 80010c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001140 <main+0x228>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fa43 	bl	8000558 <__aeabi_f2d>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	e9cd 2300 	strd	r2, r3, [sp]
 80010da:	4a1a      	ldr	r2, [pc, #104]	@ (8001144 <main+0x22c>)
 80010dc:	2121      	movs	r1, #33	@ 0x21
 80010de:	481f      	ldr	r0, [pc, #124]	@ (800115c <main+0x244>)
 80010e0:	f008 fe32 	bl	8009d48 <sniprintf>
     GPS_Boylam1[33]='|';
     Yaw_Data1[33]='|';
     Roll_Data1[33]='|';
     pitch_Data1[33]='|';*/

     snprintf(combinedBuffer, sizeof(combinedBuffer), "%s,%s,%s,%s,%s,%s",
 80010e4:	4b1d      	ldr	r3, [pc, #116]	@ (800115c <main+0x244>)
 80010e6:	9304      	str	r3, [sp, #16]
 80010e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001158 <main+0x240>)
 80010ea:	9303      	str	r3, [sp, #12]
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <main+0x23c>)
 80010ee:	9302      	str	r3, [sp, #8]
 80010f0:	4b17      	ldr	r3, [pc, #92]	@ (8001150 <main+0x238>)
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	4b15      	ldr	r3, [pc, #84]	@ (800114c <main+0x234>)
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <main+0x230>)
 80010fa:	4a19      	ldr	r2, [pc, #100]	@ (8001160 <main+0x248>)
 80010fc:	213d      	movs	r1, #61	@ 0x3d
 80010fe:	4819      	ldr	r0, [pc, #100]	@ (8001164 <main+0x24c>)
 8001100:	f008 fe22 	bl	8009d48 <sniprintf>
    		 Yaw_Data1,Roll_Data1, pitch_Data1, GPS_Enlem1, GPS_Boylam1,  GPS_yukseklik1);
     combinedBuffer[60]='\n';
 8001104:	4b17      	ldr	r3, [pc, #92]	@ (8001164 <main+0x24c>)
 8001106:	220a      	movs	r2, #10
 8001108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
     CDC_Transmit_FS(combinedBuffer,sizeof(combinedBuffer));
 800110c:	213d      	movs	r1, #61	@ 0x3d
 800110e:	4815      	ldr	r0, [pc, #84]	@ (8001164 <main+0x24c>)
 8001110:	f007 fcae 	bl	8008a70 <CDC_Transmit_FS>
  	  converter.b[0]= Rx_Buff[0];
 8001114:	bf00      	nop
 8001116:	e713      	b.n	8000f40 <main+0x28>
 8001118:	20000302 	.word	0x20000302
 800111c:	200004d4 	.word	0x200004d4
 8001120:	200002e4 	.word	0x200002e4
 8001124:	200002e0 	.word	0x200002e0
 8001128:	20000360 	.word	0x20000360
 800112c:	20000368 	.word	0x20000368
 8001130:	20000364 	.word	0x20000364
 8001134:	20000354 	.word	0x20000354
 8001138:	20000358 	.word	0x20000358
 800113c:	42dc0000 	.word	0x42dc0000
 8001140:	2000035c 	.word	0x2000035c
 8001144:	0800bfe0 	.word	0x0800bfe0
 8001148:	20000404 	.word	0x20000404
 800114c:	20000428 	.word	0x20000428
 8001150:	2000044c 	.word	0x2000044c
 8001154:	200003bc 	.word	0x200003bc
 8001158:	200003e0 	.word	0x200003e0
 800115c:	20000470 	.word	0x20000470
 8001160:	0800bfe4 	.word	0x0800bfe4
 8001164:	20000494 	.word	0x20000494

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b094      	sub	sp, #80	@ 0x50
 800116c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116e:	f107 0320 	add.w	r3, r7, #32
 8001172:	2230      	movs	r2, #48	@ 0x30
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f008 fe5d 	bl	8009e36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	4b28      	ldr	r3, [pc, #160]	@ (8001234 <SystemClock_Config+0xcc>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001194:	4a27      	ldr	r2, [pc, #156]	@ (8001234 <SystemClock_Config+0xcc>)
 8001196:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800119a:	6413      	str	r3, [r2, #64]	@ 0x40
 800119c:	4b25      	ldr	r3, [pc, #148]	@ (8001234 <SystemClock_Config+0xcc>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	4b22      	ldr	r3, [pc, #136]	@ (8001238 <SystemClock_Config+0xd0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a21      	ldr	r2, [pc, #132]	@ (8001238 <SystemClock_Config+0xd0>)
 80011b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001238 <SystemClock_Config+0xd0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c4:	2301      	movs	r3, #1
 80011c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ce:	2302      	movs	r3, #2
 80011d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80011d8:	2319      	movs	r3, #25
 80011da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011dc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011e2:	2304      	movs	r3, #4
 80011e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011e6:	2307      	movs	r3, #7
 80011e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ea:	f107 0320 	add.w	r3, r7, #32
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 fa9c 	bl	800372c <HAL_RCC_OscConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011fa:	f000 fa7f 	bl	80016fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fe:	230f      	movs	r3, #15
 8001200:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001202:	2302      	movs	r3, #2
 8001204:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800120a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	2102      	movs	r1, #2
 800121a:	4618      	mov	r0, r3
 800121c:	f002 fcfe 	bl	8003c1c <HAL_RCC_ClockConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001226:	f000 fa69 	bl	80016fc <Error_Handler>
  }
}
 800122a:	bf00      	nop
 800122c:	3750      	adds	r7, #80	@ 0x50
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40007000 	.word	0x40007000

0800123c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001240:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <MX_USART2_UART_Init+0x4c>)
 8001242:	4a12      	ldr	r2, [pc, #72]	@ (800128c <MX_USART2_UART_Init+0x50>)
 8001244:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001246:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <MX_USART2_UART_Init+0x4c>)
 8001248:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800124c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <MX_USART2_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <MX_USART2_UART_Init+0x4c>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800125a:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <MX_USART2_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001260:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <MX_USART2_UART_Init+0x4c>)
 8001262:	220c      	movs	r2, #12
 8001264:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <MX_USART2_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <MX_USART2_UART_Init+0x4c>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001272:	4805      	ldr	r0, [pc, #20]	@ (8001288 <MX_USART2_UART_Init+0x4c>)
 8001274:	f002 feb2 	bl	8003fdc <HAL_UART_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800127e:	f000 fa3d 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200004d4 	.word	0x200004d4
 800128c:	40004400 	.word	0x40004400

08001290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	4b20      	ldr	r3, [pc, #128]	@ (800132c <MX_GPIO_Init+0x9c>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a1f      	ldr	r2, [pc, #124]	@ (800132c <MX_GPIO_Init+0x9c>)
 80012b0:	f043 0304 	orr.w	r3, r3, #4
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b1d      	ldr	r3, [pc, #116]	@ (800132c <MX_GPIO_Init+0x9c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b19      	ldr	r3, [pc, #100]	@ (800132c <MX_GPIO_Init+0x9c>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a18      	ldr	r2, [pc, #96]	@ (800132c <MX_GPIO_Init+0x9c>)
 80012cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b16      	ldr	r3, [pc, #88]	@ (800132c <MX_GPIO_Init+0x9c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	4b12      	ldr	r3, [pc, #72]	@ (800132c <MX_GPIO_Init+0x9c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a11      	ldr	r2, [pc, #68]	@ (800132c <MX_GPIO_Init+0x9c>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b0f      	ldr	r3, [pc, #60]	@ (800132c <MX_GPIO_Init+0x9c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001300:	480b      	ldr	r0, [pc, #44]	@ (8001330 <MX_GPIO_Init+0xa0>)
 8001302:	f000 ff7d 	bl	8002200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001306:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800130a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	4619      	mov	r1, r3
 800131e:	4804      	ldr	r0, [pc, #16]	@ (8001330 <MX_GPIO_Init+0xa0>)
 8001320:	f000 fdea 	bl	8001ef8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001324:	bf00      	nop
 8001326:	3720      	adds	r7, #32
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40023800 	.word	0x40023800
 8001330:	40020800 	.word	0x40020800

08001334 <PID_CONFIG_SEND>:

/* USER CODE BEGIN 4 */
void PID_CONFIG_SEND(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	 Tx_Buff[0] = ADL;
 8001338:	4b92      	ldr	r3, [pc, #584]	@ (8001584 <PID_CONFIG_SEND+0x250>)
 800133a:	781a      	ldrb	r2, [r3, #0]
 800133c:	4b92      	ldr	r3, [pc, #584]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 800133e:	701a      	strb	r2, [r3, #0]
	 Tx_Buff[1] = ADH;
 8001340:	4b92      	ldr	r3, [pc, #584]	@ (800158c <PID_CONFIG_SEND+0x258>)
 8001342:	781a      	ldrb	r2, [r3, #0]
 8001344:	4b90      	ldr	r3, [pc, #576]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 8001346:	705a      	strb	r2, [r3, #1]
	 Tx_Buff[2] = CHN;
 8001348:	4b91      	ldr	r3, [pc, #580]	@ (8001590 <PID_CONFIG_SEND+0x25c>)
 800134a:	781a      	ldrb	r2, [r3, #0]
 800134c:	4b8e      	ldr	r3, [pc, #568]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 800134e:	709a      	strb	r2, [r3, #2]

	 converter.f =roll_in_kd ;
 8001350:	4b90      	ldr	r3, [pc, #576]	@ (8001594 <PID_CONFIG_SEND+0x260>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a90      	ldr	r2, [pc, #576]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 8001356:	6013      	str	r3, [r2, #0]
	 Tx_Buff[3]=converter.b[0];
 8001358:	4b8f      	ldr	r3, [pc, #572]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 800135a:	781a      	ldrb	r2, [r3, #0]
 800135c:	4b8a      	ldr	r3, [pc, #552]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 800135e:	70da      	strb	r2, [r3, #3]
	 Tx_Buff[4]=converter.b[1];
 8001360:	4b8d      	ldr	r3, [pc, #564]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 8001362:	785a      	ldrb	r2, [r3, #1]
 8001364:	4b88      	ldr	r3, [pc, #544]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 8001366:	711a      	strb	r2, [r3, #4]
	 Tx_Buff[5]=converter.b[2];
 8001368:	4b8b      	ldr	r3, [pc, #556]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 800136a:	789a      	ldrb	r2, [r3, #2]
 800136c:	4b86      	ldr	r3, [pc, #536]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 800136e:	715a      	strb	r2, [r3, #5]
	 Tx_Buff[6]=converter.b[3];
 8001370:	4b89      	ldr	r3, [pc, #548]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 8001372:	78da      	ldrb	r2, [r3, #3]
 8001374:	4b84      	ldr	r3, [pc, #528]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 8001376:	719a      	strb	r2, [r3, #6]

	 converter.f =roll_in_ki ;
 8001378:	4b88      	ldr	r3, [pc, #544]	@ (800159c <PID_CONFIG_SEND+0x268>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a86      	ldr	r2, [pc, #536]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 800137e:	6013      	str	r3, [r2, #0]
	 Tx_Buff[7]=converter.b[0];
 8001380:	4b85      	ldr	r3, [pc, #532]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 8001382:	781a      	ldrb	r2, [r3, #0]
 8001384:	4b80      	ldr	r3, [pc, #512]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 8001386:	71da      	strb	r2, [r3, #7]
	 Tx_Buff[8]=converter.b[1];
 8001388:	4b83      	ldr	r3, [pc, #524]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 800138a:	785a      	ldrb	r2, [r3, #1]
 800138c:	4b7e      	ldr	r3, [pc, #504]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 800138e:	721a      	strb	r2, [r3, #8]
	 Tx_Buff[9]=converter.b[2];
 8001390:	4b81      	ldr	r3, [pc, #516]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 8001392:	789a      	ldrb	r2, [r3, #2]
 8001394:	4b7c      	ldr	r3, [pc, #496]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 8001396:	725a      	strb	r2, [r3, #9]
	 Tx_Buff[10]=converter.b[3];
 8001398:	4b7f      	ldr	r3, [pc, #508]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 800139a:	78da      	ldrb	r2, [r3, #3]
 800139c:	4b7a      	ldr	r3, [pc, #488]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 800139e:	729a      	strb	r2, [r3, #10]

	 converter.f =roll_in_kp ;
 80013a0:	4b7f      	ldr	r3, [pc, #508]	@ (80015a0 <PID_CONFIG_SEND+0x26c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a7c      	ldr	r2, [pc, #496]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 80013a6:	6013      	str	r3, [r2, #0]
	 Tx_Buff[11]=converter.b[0];
 80013a8:	4b7b      	ldr	r3, [pc, #492]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 80013aa:	781a      	ldrb	r2, [r3, #0]
 80013ac:	4b76      	ldr	r3, [pc, #472]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 80013ae:	72da      	strb	r2, [r3, #11]
	 Tx_Buff[12]=converter.b[1];
 80013b0:	4b79      	ldr	r3, [pc, #484]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 80013b2:	785a      	ldrb	r2, [r3, #1]
 80013b4:	4b74      	ldr	r3, [pc, #464]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 80013b6:	731a      	strb	r2, [r3, #12]
	 Tx_Buff[13]=converter.b[2];
 80013b8:	4b77      	ldr	r3, [pc, #476]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 80013ba:	789a      	ldrb	r2, [r3, #2]
 80013bc:	4b72      	ldr	r3, [pc, #456]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 80013be:	735a      	strb	r2, [r3, #13]
	 Tx_Buff[14]=converter.b[3];
 80013c0:	4b75      	ldr	r3, [pc, #468]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 80013c2:	78da      	ldrb	r2, [r3, #3]
 80013c4:	4b70      	ldr	r3, [pc, #448]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 80013c6:	739a      	strb	r2, [r3, #14]

	 converter.f =roll_out_kd ;
 80013c8:	4b76      	ldr	r3, [pc, #472]	@ (80015a4 <PID_CONFIG_SEND+0x270>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a72      	ldr	r2, [pc, #456]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 80013ce:	6013      	str	r3, [r2, #0]
	 Tx_Buff[15]=converter.b[0];
 80013d0:	4b71      	ldr	r3, [pc, #452]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 80013d2:	781a      	ldrb	r2, [r3, #0]
 80013d4:	4b6c      	ldr	r3, [pc, #432]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 80013d6:	73da      	strb	r2, [r3, #15]
	 Tx_Buff[16]=converter.b[1];
 80013d8:	4b6f      	ldr	r3, [pc, #444]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 80013da:	785a      	ldrb	r2, [r3, #1]
 80013dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 80013de:	741a      	strb	r2, [r3, #16]
	 Tx_Buff[17]=converter.b[2];
 80013e0:	4b6d      	ldr	r3, [pc, #436]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 80013e2:	789a      	ldrb	r2, [r3, #2]
 80013e4:	4b68      	ldr	r3, [pc, #416]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 80013e6:	745a      	strb	r2, [r3, #17]
	 Tx_Buff[18]=converter.b[3];
 80013e8:	4b6b      	ldr	r3, [pc, #428]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 80013ea:	78da      	ldrb	r2, [r3, #3]
 80013ec:	4b66      	ldr	r3, [pc, #408]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 80013ee:	749a      	strb	r2, [r3, #18]

	 converter.f = roll_out_ki;
 80013f0:	4b6d      	ldr	r3, [pc, #436]	@ (80015a8 <PID_CONFIG_SEND+0x274>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a68      	ldr	r2, [pc, #416]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 80013f6:	6013      	str	r3, [r2, #0]
	 Tx_Buff[19]=converter.b[0];
 80013f8:	4b67      	ldr	r3, [pc, #412]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 80013fa:	781a      	ldrb	r2, [r3, #0]
 80013fc:	4b62      	ldr	r3, [pc, #392]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 80013fe:	74da      	strb	r2, [r3, #19]
	 Tx_Buff[20]=converter.b[1];
 8001400:	4b65      	ldr	r3, [pc, #404]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 8001402:	785a      	ldrb	r2, [r3, #1]
 8001404:	4b60      	ldr	r3, [pc, #384]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 8001406:	751a      	strb	r2, [r3, #20]
	 Tx_Buff[21]=converter.b[2];
 8001408:	4b63      	ldr	r3, [pc, #396]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 800140a:	789a      	ldrb	r2, [r3, #2]
 800140c:	4b5e      	ldr	r3, [pc, #376]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 800140e:	755a      	strb	r2, [r3, #21]
	 Tx_Buff[22]=converter.b[3];
 8001410:	4b61      	ldr	r3, [pc, #388]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 8001412:	78da      	ldrb	r2, [r3, #3]
 8001414:	4b5c      	ldr	r3, [pc, #368]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 8001416:	759a      	strb	r2, [r3, #22]

	 converter.f = roll_out_kp;
 8001418:	4b64      	ldr	r3, [pc, #400]	@ (80015ac <PID_CONFIG_SEND+0x278>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a5e      	ldr	r2, [pc, #376]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 800141e:	6013      	str	r3, [r2, #0]
	 Tx_Buff[23]=converter.b[0];
 8001420:	4b5d      	ldr	r3, [pc, #372]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 8001422:	781a      	ldrb	r2, [r3, #0]
 8001424:	4b58      	ldr	r3, [pc, #352]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 8001426:	75da      	strb	r2, [r3, #23]
	 Tx_Buff[24]=converter.b[1];
 8001428:	4b5b      	ldr	r3, [pc, #364]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 800142a:	785a      	ldrb	r2, [r3, #1]
 800142c:	4b56      	ldr	r3, [pc, #344]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 800142e:	761a      	strb	r2, [r3, #24]
	 Tx_Buff[25]=converter.b[2];
 8001430:	4b59      	ldr	r3, [pc, #356]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 8001432:	789a      	ldrb	r2, [r3, #2]
 8001434:	4b54      	ldr	r3, [pc, #336]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 8001436:	765a      	strb	r2, [r3, #25]
	 Tx_Buff[26]=converter.b[3];
 8001438:	4b57      	ldr	r3, [pc, #348]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 800143a:	78da      	ldrb	r2, [r3, #3]
 800143c:	4b52      	ldr	r3, [pc, #328]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 800143e:	769a      	strb	r2, [r3, #26]

	 converter.f = pitch_in_kd;
 8001440:	4b5b      	ldr	r3, [pc, #364]	@ (80015b0 <PID_CONFIG_SEND+0x27c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a54      	ldr	r2, [pc, #336]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 8001446:	6013      	str	r3, [r2, #0]
	 Tx_Buff[27]=converter.b[0];
 8001448:	4b53      	ldr	r3, [pc, #332]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 800144a:	781a      	ldrb	r2, [r3, #0]
 800144c:	4b4e      	ldr	r3, [pc, #312]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 800144e:	76da      	strb	r2, [r3, #27]
	 Tx_Buff[28]=converter.b[1];
 8001450:	4b51      	ldr	r3, [pc, #324]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 8001452:	785a      	ldrb	r2, [r3, #1]
 8001454:	4b4c      	ldr	r3, [pc, #304]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 8001456:	771a      	strb	r2, [r3, #28]
	 Tx_Buff[29]=converter.b[2];
 8001458:	4b4f      	ldr	r3, [pc, #316]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 800145a:	789a      	ldrb	r2, [r3, #2]
 800145c:	4b4a      	ldr	r3, [pc, #296]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 800145e:	775a      	strb	r2, [r3, #29]
	 Tx_Buff[30]=converter.b[3];
 8001460:	4b4d      	ldr	r3, [pc, #308]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 8001462:	78da      	ldrb	r2, [r3, #3]
 8001464:	4b48      	ldr	r3, [pc, #288]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 8001466:	779a      	strb	r2, [r3, #30]

	 converter.f = pitch_in_ki;
 8001468:	4b52      	ldr	r3, [pc, #328]	@ (80015b4 <PID_CONFIG_SEND+0x280>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a4a      	ldr	r2, [pc, #296]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 800146e:	6013      	str	r3, [r2, #0]
	 Tx_Buff[31]=converter.b[0];
 8001470:	4b49      	ldr	r3, [pc, #292]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 8001472:	781a      	ldrb	r2, [r3, #0]
 8001474:	4b44      	ldr	r3, [pc, #272]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 8001476:	77da      	strb	r2, [r3, #31]
	 Tx_Buff[32]=converter.b[1];
 8001478:	4b47      	ldr	r3, [pc, #284]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 800147a:	785a      	ldrb	r2, [r3, #1]
 800147c:	4b42      	ldr	r3, [pc, #264]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 800147e:	f883 2020 	strb.w	r2, [r3, #32]
	 Tx_Buff[33]=converter.b[2];
 8001482:	4b45      	ldr	r3, [pc, #276]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 8001484:	789a      	ldrb	r2, [r3, #2]
 8001486:	4b40      	ldr	r3, [pc, #256]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 8001488:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	 Tx_Buff[34]=converter.b[3];
 800148c:	4b42      	ldr	r3, [pc, #264]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 800148e:	78da      	ldrb	r2, [r3, #3]
 8001490:	4b3d      	ldr	r3, [pc, #244]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 8001492:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	 converter.f = pitch_in_kp;
 8001496:	4b48      	ldr	r3, [pc, #288]	@ (80015b8 <PID_CONFIG_SEND+0x284>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a3f      	ldr	r2, [pc, #252]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 800149c:	6013      	str	r3, [r2, #0]
	 Tx_Buff[35]=converter.b[0];
 800149e:	4b3e      	ldr	r3, [pc, #248]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 80014a0:	781a      	ldrb	r2, [r3, #0]
 80014a2:	4b39      	ldr	r3, [pc, #228]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 80014a4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	 Tx_Buff[36]=converter.b[1];
 80014a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 80014aa:	785a      	ldrb	r2, [r3, #1]
 80014ac:	4b36      	ldr	r3, [pc, #216]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 80014ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	 Tx_Buff[37]=converter.b[2];
 80014b2:	4b39      	ldr	r3, [pc, #228]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 80014b4:	789a      	ldrb	r2, [r3, #2]
 80014b6:	4b34      	ldr	r3, [pc, #208]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 80014b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	 Tx_Buff[38]=converter.b[3];
 80014bc:	4b36      	ldr	r3, [pc, #216]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 80014be:	78da      	ldrb	r2, [r3, #3]
 80014c0:	4b31      	ldr	r3, [pc, #196]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 80014c2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

	 converter.f = pitch_out_kd;
 80014c6:	4b3d      	ldr	r3, [pc, #244]	@ (80015bc <PID_CONFIG_SEND+0x288>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a33      	ldr	r2, [pc, #204]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 80014cc:	6013      	str	r3, [r2, #0]
	 Tx_Buff[39]=converter.b[0];
 80014ce:	4b32      	ldr	r3, [pc, #200]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 80014d0:	781a      	ldrb	r2, [r3, #0]
 80014d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 80014d4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	 Tx_Buff[40]=converter.b[1];
 80014d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 80014da:	785a      	ldrb	r2, [r3, #1]
 80014dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 80014de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	 Tx_Buff[41]=converter.b[2];
 80014e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 80014e4:	789a      	ldrb	r2, [r3, #2]
 80014e6:	4b28      	ldr	r3, [pc, #160]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 80014e8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	 Tx_Buff[42]=converter.b[3];
 80014ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 80014ee:	78da      	ldrb	r2, [r3, #3]
 80014f0:	4b25      	ldr	r3, [pc, #148]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 80014f2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

	 converter.f = pitch_out_ki;
 80014f6:	4b32      	ldr	r3, [pc, #200]	@ (80015c0 <PID_CONFIG_SEND+0x28c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a27      	ldr	r2, [pc, #156]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 80014fc:	6013      	str	r3, [r2, #0]
	 Tx_Buff[43]=converter.b[0];
 80014fe:	4b26      	ldr	r3, [pc, #152]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	4b21      	ldr	r3, [pc, #132]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 8001504:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	 Tx_Buff[44]=converter.b[1];
 8001508:	4b23      	ldr	r3, [pc, #140]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 800150a:	785a      	ldrb	r2, [r3, #1]
 800150c:	4b1e      	ldr	r3, [pc, #120]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 800150e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	 Tx_Buff[45]=converter.b[2];
 8001512:	4b21      	ldr	r3, [pc, #132]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 8001514:	789a      	ldrb	r2, [r3, #2]
 8001516:	4b1c      	ldr	r3, [pc, #112]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 8001518:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	 Tx_Buff[46]=converter.b[3];
 800151c:	4b1e      	ldr	r3, [pc, #120]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 800151e:	78da      	ldrb	r2, [r3, #3]
 8001520:	4b19      	ldr	r3, [pc, #100]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 8001522:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

	 converter.f = pitch_out_kp;
 8001526:	4b27      	ldr	r3, [pc, #156]	@ (80015c4 <PID_CONFIG_SEND+0x290>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a1b      	ldr	r2, [pc, #108]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 800152c:	6013      	str	r3, [r2, #0]
	 Tx_Buff[47]=converter.b[0];
 800152e:	4b1a      	ldr	r3, [pc, #104]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 8001530:	781a      	ldrb	r2, [r3, #0]
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 8001534:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	 Tx_Buff[48]=converter.b[1];
 8001538:	4b17      	ldr	r3, [pc, #92]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 800153a:	785a      	ldrb	r2, [r3, #1]
 800153c:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 800153e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	 Tx_Buff[49]=converter.b[2];
 8001542:	4b15      	ldr	r3, [pc, #84]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 8001544:	789a      	ldrb	r2, [r3, #2]
 8001546:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 8001548:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	 Tx_Buff[50]=converter.b[3];
 800154c:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 800154e:	78da      	ldrb	r2, [r3, #3]
 8001550:	4b0d      	ldr	r3, [pc, #52]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 8001552:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

	 converter.f = yaw_heading_kd;
 8001556:	4b1c      	ldr	r3, [pc, #112]	@ (80015c8 <PID_CONFIG_SEND+0x294>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a0f      	ldr	r2, [pc, #60]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 800155c:	6013      	str	r3, [r2, #0]
	 Tx_Buff[51]=converter.b[0];
 800155e:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 8001560:	781a      	ldrb	r2, [r3, #0]
 8001562:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 8001564:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	 Tx_Buff[52]=converter.b[1];
 8001568:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 800156a:	785a      	ldrb	r2, [r3, #1]
 800156c:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 800156e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	 Tx_Buff[53]=converter.b[2];
 8001572:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 8001574:	789a      	ldrb	r2, [r3, #2]
 8001576:	4b04      	ldr	r3, [pc, #16]	@ (8001588 <PID_CONFIG_SEND+0x254>)
 8001578:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	 Tx_Buff[54]=converter.b[3];
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <PID_CONFIG_SEND+0x264>)
 800157e:	78da      	ldrb	r2, [r3, #3]
 8001580:	e024      	b.n	80015cc <PID_CONFIG_SEND+0x298>
 8001582:	bf00      	nop
 8001584:	2000036d 	.word	0x2000036d
 8001588:	20000304 	.word	0x20000304
 800158c:	2000036c 	.word	0x2000036c
 8001590:	2000036e 	.word	0x2000036e
 8001594:	20000370 	.word	0x20000370
 8001598:	200002e0 	.word	0x200002e0
 800159c:	20000378 	.word	0x20000378
 80015a0:	20000374 	.word	0x20000374
 80015a4:	2000037c 	.word	0x2000037c
 80015a8:	20000384 	.word	0x20000384
 80015ac:	20000380 	.word	0x20000380
 80015b0:	20000388 	.word	0x20000388
 80015b4:	20000390 	.word	0x20000390
 80015b8:	2000038c 	.word	0x2000038c
 80015bc:	20000394 	.word	0x20000394
 80015c0:	2000039c 	.word	0x2000039c
 80015c4:	20000398 	.word	0x20000398
 80015c8:	200003a0 	.word	0x200003a0
 80015cc:	4b43      	ldr	r3, [pc, #268]	@ (80016dc <PID_CONFIG_SEND+0x3a8>)
 80015ce:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

	 converter.f = yaw_heading_ki;
 80015d2:	4b43      	ldr	r3, [pc, #268]	@ (80016e0 <PID_CONFIG_SEND+0x3ac>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a43      	ldr	r2, [pc, #268]	@ (80016e4 <PID_CONFIG_SEND+0x3b0>)
 80015d8:	6013      	str	r3, [r2, #0]
	 Tx_Buff[55]=converter.b[0];
 80015da:	4b42      	ldr	r3, [pc, #264]	@ (80016e4 <PID_CONFIG_SEND+0x3b0>)
 80015dc:	781a      	ldrb	r2, [r3, #0]
 80015de:	4b3f      	ldr	r3, [pc, #252]	@ (80016dc <PID_CONFIG_SEND+0x3a8>)
 80015e0:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
	 Tx_Buff[56]=converter.b[1];
 80015e4:	4b3f      	ldr	r3, [pc, #252]	@ (80016e4 <PID_CONFIG_SEND+0x3b0>)
 80015e6:	785a      	ldrb	r2, [r3, #1]
 80015e8:	4b3c      	ldr	r3, [pc, #240]	@ (80016dc <PID_CONFIG_SEND+0x3a8>)
 80015ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	 Tx_Buff[57]=converter.b[2];
 80015ee:	4b3d      	ldr	r3, [pc, #244]	@ (80016e4 <PID_CONFIG_SEND+0x3b0>)
 80015f0:	789a      	ldrb	r2, [r3, #2]
 80015f2:	4b3a      	ldr	r3, [pc, #232]	@ (80016dc <PID_CONFIG_SEND+0x3a8>)
 80015f4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
	 Tx_Buff[58]=converter.b[3];
 80015f8:	4b3a      	ldr	r3, [pc, #232]	@ (80016e4 <PID_CONFIG_SEND+0x3b0>)
 80015fa:	78da      	ldrb	r2, [r3, #3]
 80015fc:	4b37      	ldr	r3, [pc, #220]	@ (80016dc <PID_CONFIG_SEND+0x3a8>)
 80015fe:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

	 converter.f = yaw_heading_kp;
 8001602:	4b39      	ldr	r3, [pc, #228]	@ (80016e8 <PID_CONFIG_SEND+0x3b4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a37      	ldr	r2, [pc, #220]	@ (80016e4 <PID_CONFIG_SEND+0x3b0>)
 8001608:	6013      	str	r3, [r2, #0]
	 Tx_Buff[59]=converter.b[0];
 800160a:	4b36      	ldr	r3, [pc, #216]	@ (80016e4 <PID_CONFIG_SEND+0x3b0>)
 800160c:	781a      	ldrb	r2, [r3, #0]
 800160e:	4b33      	ldr	r3, [pc, #204]	@ (80016dc <PID_CONFIG_SEND+0x3a8>)
 8001610:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
	 Tx_Buff[60]=converter.b[1];
 8001614:	4b33      	ldr	r3, [pc, #204]	@ (80016e4 <PID_CONFIG_SEND+0x3b0>)
 8001616:	785a      	ldrb	r2, [r3, #1]
 8001618:	4b30      	ldr	r3, [pc, #192]	@ (80016dc <PID_CONFIG_SEND+0x3a8>)
 800161a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	 Tx_Buff[61]=converter.b[2];
 800161e:	4b31      	ldr	r3, [pc, #196]	@ (80016e4 <PID_CONFIG_SEND+0x3b0>)
 8001620:	789a      	ldrb	r2, [r3, #2]
 8001622:	4b2e      	ldr	r3, [pc, #184]	@ (80016dc <PID_CONFIG_SEND+0x3a8>)
 8001624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	 Tx_Buff[62]=converter.b[3];
 8001628:	4b2e      	ldr	r3, [pc, #184]	@ (80016e4 <PID_CONFIG_SEND+0x3b0>)
 800162a:	78da      	ldrb	r2, [r3, #3]
 800162c:	4b2b      	ldr	r3, [pc, #172]	@ (80016dc <PID_CONFIG_SEND+0x3a8>)
 800162e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

	 converter.f = yaw_rate_kd;
 8001632:	4b2e      	ldr	r3, [pc, #184]	@ (80016ec <PID_CONFIG_SEND+0x3b8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a2b      	ldr	r2, [pc, #172]	@ (80016e4 <PID_CONFIG_SEND+0x3b0>)
 8001638:	6013      	str	r3, [r2, #0]
	 Tx_Buff[63]=converter.b[0];
 800163a:	4b2a      	ldr	r3, [pc, #168]	@ (80016e4 <PID_CONFIG_SEND+0x3b0>)
 800163c:	781a      	ldrb	r2, [r3, #0]
 800163e:	4b27      	ldr	r3, [pc, #156]	@ (80016dc <PID_CONFIG_SEND+0x3a8>)
 8001640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
	 Tx_Buff[64]=converter.b[1];
 8001644:	4b27      	ldr	r3, [pc, #156]	@ (80016e4 <PID_CONFIG_SEND+0x3b0>)
 8001646:	785a      	ldrb	r2, [r3, #1]
 8001648:	4b24      	ldr	r3, [pc, #144]	@ (80016dc <PID_CONFIG_SEND+0x3a8>)
 800164a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	 Tx_Buff[65]=converter.b[2];
 800164e:	4b25      	ldr	r3, [pc, #148]	@ (80016e4 <PID_CONFIG_SEND+0x3b0>)
 8001650:	789a      	ldrb	r2, [r3, #2]
 8001652:	4b22      	ldr	r3, [pc, #136]	@ (80016dc <PID_CONFIG_SEND+0x3a8>)
 8001654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	 Tx_Buff[66]=converter.b[3];
 8001658:	4b22      	ldr	r3, [pc, #136]	@ (80016e4 <PID_CONFIG_SEND+0x3b0>)
 800165a:	78da      	ldrb	r2, [r3, #3]
 800165c:	4b1f      	ldr	r3, [pc, #124]	@ (80016dc <PID_CONFIG_SEND+0x3a8>)
 800165e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

	 converter.f = yaw_rate_ki;
 8001662:	4b23      	ldr	r3, [pc, #140]	@ (80016f0 <PID_CONFIG_SEND+0x3bc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a1f      	ldr	r2, [pc, #124]	@ (80016e4 <PID_CONFIG_SEND+0x3b0>)
 8001668:	6013      	str	r3, [r2, #0]
	 Tx_Buff[67]=converter.b[0];
 800166a:	4b1e      	ldr	r3, [pc, #120]	@ (80016e4 <PID_CONFIG_SEND+0x3b0>)
 800166c:	781a      	ldrb	r2, [r3, #0]
 800166e:	4b1b      	ldr	r3, [pc, #108]	@ (80016dc <PID_CONFIG_SEND+0x3a8>)
 8001670:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	 Tx_Buff[68]=converter.b[1];
 8001674:	4b1b      	ldr	r3, [pc, #108]	@ (80016e4 <PID_CONFIG_SEND+0x3b0>)
 8001676:	785a      	ldrb	r2, [r3, #1]
 8001678:	4b18      	ldr	r3, [pc, #96]	@ (80016dc <PID_CONFIG_SEND+0x3a8>)
 800167a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	 Tx_Buff[69]=converter.b[2];
 800167e:	4b19      	ldr	r3, [pc, #100]	@ (80016e4 <PID_CONFIG_SEND+0x3b0>)
 8001680:	789a      	ldrb	r2, [r3, #2]
 8001682:	4b16      	ldr	r3, [pc, #88]	@ (80016dc <PID_CONFIG_SEND+0x3a8>)
 8001684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	 Tx_Buff[70]=converter.b[3];
 8001688:	4b16      	ldr	r3, [pc, #88]	@ (80016e4 <PID_CONFIG_SEND+0x3b0>)
 800168a:	78da      	ldrb	r2, [r3, #3]
 800168c:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <PID_CONFIG_SEND+0x3a8>)
 800168e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

	 converter.f = yaw_rate_kp;
 8001692:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <PID_CONFIG_SEND+0x3c0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a13      	ldr	r2, [pc, #76]	@ (80016e4 <PID_CONFIG_SEND+0x3b0>)
 8001698:	6013      	str	r3, [r2, #0]
	 Tx_Buff[71]=converter.b[0];
 800169a:	4b12      	ldr	r3, [pc, #72]	@ (80016e4 <PID_CONFIG_SEND+0x3b0>)
 800169c:	781a      	ldrb	r2, [r3, #0]
 800169e:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <PID_CONFIG_SEND+0x3a8>)
 80016a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
	 Tx_Buff[72]=converter.b[1];
 80016a4:	4b0f      	ldr	r3, [pc, #60]	@ (80016e4 <PID_CONFIG_SEND+0x3b0>)
 80016a6:	785a      	ldrb	r2, [r3, #1]
 80016a8:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <PID_CONFIG_SEND+0x3a8>)
 80016aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	 Tx_Buff[73]=converter.b[2];
 80016ae:	4b0d      	ldr	r3, [pc, #52]	@ (80016e4 <PID_CONFIG_SEND+0x3b0>)
 80016b0:	789a      	ldrb	r2, [r3, #2]
 80016b2:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <PID_CONFIG_SEND+0x3a8>)
 80016b4:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
	 Tx_Buff[74]=converter.b[3];
 80016b8:	4b0a      	ldr	r3, [pc, #40]	@ (80016e4 <PID_CONFIG_SEND+0x3b0>)
 80016ba:	78da      	ldrb	r2, [r3, #3]
 80016bc:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <PID_CONFIG_SEND+0x3a8>)
 80016be:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

	 Tx_Buff[75]='\n';
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <PID_CONFIG_SEND+0x3a8>)
 80016c4:	220a      	movs	r2, #10
 80016c6:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	 HAL_UART_Transmit(&huart2, Tx_Buff, 76, 1000);
 80016ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ce:	224c      	movs	r2, #76	@ 0x4c
 80016d0:	4902      	ldr	r1, [pc, #8]	@ (80016dc <PID_CONFIG_SEND+0x3a8>)
 80016d2:	4809      	ldr	r0, [pc, #36]	@ (80016f8 <PID_CONFIG_SEND+0x3c4>)
 80016d4:	f002 fccf 	bl	8004076 <HAL_UART_Transmit>
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000304 	.word	0x20000304
 80016e0:	200003a8 	.word	0x200003a8
 80016e4:	200002e0 	.word	0x200002e0
 80016e8:	200003a4 	.word	0x200003a4
 80016ec:	200003ac 	.word	0x200003ac
 80016f0:	200003b4 	.word	0x200003b4
 80016f4:	200003b0 	.word	0x200003b0
 80016f8:	200004d4 	.word	0x200004d4

080016fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001700:	b672      	cpsid	i
}
 8001702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <Error_Handler+0x8>

08001708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <HAL_MspInit+0x4c>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001716:	4a0f      	ldr	r2, [pc, #60]	@ (8001754 <HAL_MspInit+0x4c>)
 8001718:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800171c:	6453      	str	r3, [r2, #68]	@ 0x44
 800171e:	4b0d      	ldr	r3, [pc, #52]	@ (8001754 <HAL_MspInit+0x4c>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001722:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	603b      	str	r3, [r7, #0]
 800172e:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <HAL_MspInit+0x4c>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	4a08      	ldr	r2, [pc, #32]	@ (8001754 <HAL_MspInit+0x4c>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001738:	6413      	str	r3, [r2, #64]	@ 0x40
 800173a:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_MspInit+0x4c>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800

08001758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	@ 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a1d      	ldr	r2, [pc, #116]	@ (80017ec <HAL_UART_MspInit+0x94>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d133      	bne.n	80017e2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b1c      	ldr	r3, [pc, #112]	@ (80017f0 <HAL_UART_MspInit+0x98>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	4a1b      	ldr	r2, [pc, #108]	@ (80017f0 <HAL_UART_MspInit+0x98>)
 8001784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001788:	6413      	str	r3, [r2, #64]	@ 0x40
 800178a:	4b19      	ldr	r3, [pc, #100]	@ (80017f0 <HAL_UART_MspInit+0x98>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b15      	ldr	r3, [pc, #84]	@ (80017f0 <HAL_UART_MspInit+0x98>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a14      	ldr	r2, [pc, #80]	@ (80017f0 <HAL_UART_MspInit+0x98>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <HAL_UART_MspInit+0x98>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017b2:	230c      	movs	r3, #12
 80017b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017be:	2303      	movs	r3, #3
 80017c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017c2:	2307      	movs	r3, #7
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	4809      	ldr	r0, [pc, #36]	@ (80017f4 <HAL_UART_MspInit+0x9c>)
 80017ce:	f000 fb93 	bl	8001ef8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	2026      	movs	r0, #38	@ 0x26
 80017d8:	f000 fac5 	bl	8001d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017dc:	2026      	movs	r0, #38	@ 0x26
 80017de:	f000 fade 	bl	8001d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017e2:	bf00      	nop
 80017e4:	3728      	adds	r7, #40	@ 0x28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40004400 	.word	0x40004400
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020000 	.word	0x40020000

080017f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <NMI_Handler+0x4>

08001800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <HardFault_Handler+0x4>

08001808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <MemManage_Handler+0x4>

08001810 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <BusFault_Handler+0x4>

08001818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <UsageFault_Handler+0x4>

08001820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800184e:	f000 f96b 	bl	8001b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800185c:	4802      	ldr	r0, [pc, #8]	@ (8001868 <USART2_IRQHandler+0x10>)
 800185e:	f002 fccd 	bl	80041fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200004d4 	.word	0x200004d4

0800186c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001870:	4802      	ldr	r0, [pc, #8]	@ (800187c <OTG_FS_IRQHandler+0x10>)
 8001872:	f000 fe2e 	bl	80024d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20001a00 	.word	0x20001a00

08001880 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return 1;
 8001884:	2301      	movs	r3, #1
}
 8001886:	4618      	mov	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <_kill>:

int _kill(int pid, int sig)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800189a:	f008 fb1f 	bl	8009edc <__errno>
 800189e:	4603      	mov	r3, r0
 80018a0:	2216      	movs	r2, #22
 80018a2:	601a      	str	r2, [r3, #0]
  return -1;
 80018a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <_exit>:

void _exit (int status)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018b8:	f04f 31ff 	mov.w	r1, #4294967295
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff ffe7 	bl	8001890 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018c2:	bf00      	nop
 80018c4:	e7fd      	b.n	80018c2 <_exit+0x12>

080018c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b086      	sub	sp, #24
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	60f8      	str	r0, [r7, #12]
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	e00a      	b.n	80018ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018d8:	f3af 8000 	nop.w
 80018dc:	4601      	mov	r1, r0
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	60ba      	str	r2, [r7, #8]
 80018e4:	b2ca      	uxtb	r2, r1
 80018e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	3301      	adds	r3, #1
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	dbf0      	blt.n	80018d8 <_read+0x12>
  }

  return len;
 80018f6:	687b      	ldr	r3, [r7, #4]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	e009      	b.n	8001926 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1c5a      	adds	r2, r3, #1
 8001916:	60ba      	str	r2, [r7, #8]
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	3301      	adds	r3, #1
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	429a      	cmp	r2, r3
 800192c:	dbf1      	blt.n	8001912 <_write+0x12>
  }
  return len;
 800192e:	687b      	ldr	r3, [r7, #4]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <_close>:

int _close(int file)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001940:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001960:	605a      	str	r2, [r3, #4]
  return 0;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <_isatty>:

int _isatty(int file)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001978:	2301      	movs	r3, #1
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001986:	b480      	push	{r7}
 8001988:	b085      	sub	sp, #20
 800198a:	af00      	add	r7, sp, #0
 800198c:	60f8      	str	r0, [r7, #12]
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a8:	4a14      	ldr	r2, [pc, #80]	@ (80019fc <_sbrk+0x5c>)
 80019aa:	4b15      	ldr	r3, [pc, #84]	@ (8001a00 <_sbrk+0x60>)
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b4:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <_sbrk+0x64>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d102      	bne.n	80019c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019bc:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <_sbrk+0x64>)
 80019be:	4a12      	ldr	r2, [pc, #72]	@ (8001a08 <_sbrk+0x68>)
 80019c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019c2:	4b10      	ldr	r3, [pc, #64]	@ (8001a04 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d207      	bcs.n	80019e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d0:	f008 fa84 	bl	8009edc <__errno>
 80019d4:	4603      	mov	r3, r0
 80019d6:	220c      	movs	r2, #12
 80019d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019da:	f04f 33ff 	mov.w	r3, #4294967295
 80019de:	e009      	b.n	80019f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e0:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <_sbrk+0x64>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019e6:	4b07      	ldr	r3, [pc, #28]	@ (8001a04 <_sbrk+0x64>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	4a05      	ldr	r2, [pc, #20]	@ (8001a04 <_sbrk+0x64>)
 80019f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019f2:	68fb      	ldr	r3, [r7, #12]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20020000 	.word	0x20020000
 8001a00:	00000400 	.word	0x00000400
 8001a04:	20000518 	.word	0x20000518
 8001a08:	20002278 	.word	0x20002278

08001a0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a10:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <SystemInit+0x20>)
 8001a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a16:	4a05      	ldr	r2, [pc, #20]	@ (8001a2c <SystemInit+0x20>)
 8001a18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a34:	480d      	ldr	r0, [pc, #52]	@ (8001a6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a36:	490e      	ldr	r1, [pc, #56]	@ (8001a70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a38:	4a0e      	ldr	r2, [pc, #56]	@ (8001a74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a3c:	e002      	b.n	8001a44 <LoopCopyDataInit>

08001a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a42:	3304      	adds	r3, #4

08001a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a48:	d3f9      	bcc.n	8001a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a4c:	4c0b      	ldr	r4, [pc, #44]	@ (8001a7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a50:	e001      	b.n	8001a56 <LoopFillZerobss>

08001a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a54:	3204      	adds	r2, #4

08001a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a58:	d3fb      	bcc.n	8001a52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a5a:	f7ff ffd7 	bl	8001a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a5e:	f008 fa43 	bl	8009ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a62:	f7ff fa59 	bl	8000f18 <main>
  bx  lr    
 8001a66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a70:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001a74:	0800c3d8 	.word	0x0800c3d8
  ldr r2, =_sbss
 8001a78:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001a7c:	20002278 	.word	0x20002278

08001a80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a80:	e7fe      	b.n	8001a80 <ADC_IRQHandler>
	...

08001a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a88:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <HAL_Init+0x40>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac4 <HAL_Init+0x40>)
 8001a8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac4 <HAL_Init+0x40>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac4 <HAL_Init+0x40>)
 8001a9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa0:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <HAL_Init+0x40>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a07      	ldr	r2, [pc, #28]	@ (8001ac4 <HAL_Init+0x40>)
 8001aa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aac:	2003      	movs	r0, #3
 8001aae:	f000 f94f 	bl	8001d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ab2:	200f      	movs	r0, #15
 8001ab4:	f000 f808 	bl	8001ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab8:	f7ff fe26 	bl	8001708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023c00 	.word	0x40023c00

08001ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad0:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <HAL_InitTick+0x54>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <HAL_InitTick+0x58>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 f967 	bl	8001dba <HAL_SYSTICK_Config>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e00e      	b.n	8001b14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b0f      	cmp	r3, #15
 8001afa:	d80a      	bhi.n	8001b12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001afc:	2200      	movs	r2, #0
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295
 8001b04:	f000 f92f 	bl	8001d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b08:	4a06      	ldr	r2, [pc, #24]	@ (8001b24 <HAL_InitTick+0x5c>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e000      	b.n	8001b14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	20000008 	.word	0x20000008
 8001b24:	20000004 	.word	0x20000004

08001b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <HAL_IncTick+0x20>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <HAL_IncTick+0x24>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4413      	add	r3, r2
 8001b38:	4a04      	ldr	r2, [pc, #16]	@ (8001b4c <HAL_IncTick+0x24>)
 8001b3a:	6013      	str	r3, [r2, #0]
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	2000051c 	.word	0x2000051c

08001b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return uwTick;
 8001b54:	4b03      	ldr	r3, [pc, #12]	@ (8001b64 <HAL_GetTick+0x14>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	2000051c 	.word	0x2000051c

08001b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b70:	f7ff ffee 	bl	8001b50 <HAL_GetTick>
 8001b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b80:	d005      	beq.n	8001b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b82:	4b0a      	ldr	r3, [pc, #40]	@ (8001bac <HAL_Delay+0x44>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b8e:	bf00      	nop
 8001b90:	f7ff ffde 	bl	8001b50 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d8f7      	bhi.n	8001b90 <HAL_Delay+0x28>
  {
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000008 	.word	0x20000008

08001bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be2:	4a04      	ldr	r2, [pc, #16]	@ (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	60d3      	str	r3, [r2, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bfc:	4b04      	ldr	r3, [pc, #16]	@ (8001c10 <__NVIC_GetPriorityGrouping+0x18>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	f003 0307 	and.w	r3, r3, #7
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	db0b      	blt.n	8001c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	f003 021f 	and.w	r2, r3, #31
 8001c2c:	4907      	ldr	r1, [pc, #28]	@ (8001c4c <__NVIC_EnableIRQ+0x38>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	2001      	movs	r0, #1
 8001c36:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000e100 	.word	0xe000e100

08001c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	db0a      	blt.n	8001c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	490c      	ldr	r1, [pc, #48]	@ (8001c9c <__NVIC_SetPriority+0x4c>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	0112      	lsls	r2, r2, #4
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	440b      	add	r3, r1
 8001c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c78:	e00a      	b.n	8001c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4908      	ldr	r1, [pc, #32]	@ (8001ca0 <__NVIC_SetPriority+0x50>)
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	3b04      	subs	r3, #4
 8001c88:	0112      	lsls	r2, r2, #4
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	761a      	strb	r2, [r3, #24]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000e100 	.word	0xe000e100
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	@ 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f1c3 0307 	rsb	r3, r3, #7
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	bf28      	it	cs
 8001cc2:	2304      	movcs	r3, #4
 8001cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d902      	bls.n	8001cd4 <NVIC_EncodePriority+0x30>
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3b03      	subs	r3, #3
 8001cd2:	e000      	b.n	8001cd6 <NVIC_EncodePriority+0x32>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf6:	43d9      	mvns	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	4313      	orrs	r3, r2
         );
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3724      	adds	r7, #36	@ 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d1c:	d301      	bcc.n	8001d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00f      	b.n	8001d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d22:	4a0a      	ldr	r2, [pc, #40]	@ (8001d4c <SysTick_Config+0x40>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2a:	210f      	movs	r1, #15
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d30:	f7ff ff8e 	bl	8001c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d34:	4b05      	ldr	r3, [pc, #20]	@ (8001d4c <SysTick_Config+0x40>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3a:	4b04      	ldr	r3, [pc, #16]	@ (8001d4c <SysTick_Config+0x40>)
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	e000e010 	.word	0xe000e010

08001d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ff29 	bl	8001bb0 <__NVIC_SetPriorityGrouping>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b086      	sub	sp, #24
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	607a      	str	r2, [r7, #4]
 8001d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d78:	f7ff ff3e 	bl	8001bf8 <__NVIC_GetPriorityGrouping>
 8001d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	6978      	ldr	r0, [r7, #20]
 8001d84:	f7ff ff8e 	bl	8001ca4 <NVIC_EncodePriority>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff5d 	bl	8001c50 <__NVIC_SetPriority>
}
 8001d96:	bf00      	nop
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff31 	bl	8001c14 <__NVIC_EnableIRQ>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ffa2 	bl	8001d0c <SysTick_Config>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b084      	sub	sp, #16
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dde:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001de0:	f7ff feb6 	bl	8001b50 <HAL_GetTick>
 8001de4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d008      	beq.n	8001e04 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2280      	movs	r2, #128	@ 0x80
 8001df6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e052      	b.n	8001eaa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0216 	bic.w	r2, r2, #22
 8001e12:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	695a      	ldr	r2, [r3, #20]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e22:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d103      	bne.n	8001e34 <HAL_DMA_Abort+0x62>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d007      	beq.n	8001e44 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0208 	bic.w	r2, r2, #8
 8001e42:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0201 	bic.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e54:	e013      	b.n	8001e7e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e56:	f7ff fe7b 	bl	8001b50 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b05      	cmp	r3, #5
 8001e62:	d90c      	bls.n	8001e7e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2220      	movs	r2, #32
 8001e68:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e015      	b.n	8001eaa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1e4      	bne.n	8001e56 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e90:	223f      	movs	r2, #63	@ 0x3f
 8001e92:	409a      	lsls	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d004      	beq.n	8001ed0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2280      	movs	r2, #128	@ 0x80
 8001eca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e00c      	b.n	8001eea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2205      	movs	r2, #5
 8001ed4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0201 	bic.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b089      	sub	sp, #36	@ 0x24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
 8001f12:	e159      	b.n	80021c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f14:	2201      	movs	r2, #1
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	4013      	ands	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	f040 8148 	bne.w	80021c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d005      	beq.n	8001f4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d130      	bne.n	8001fac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	2203      	movs	r2, #3
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f80:	2201      	movs	r2, #1
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f003 0201 	and.w	r2, r3, #1
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	d017      	beq.n	8001fe8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d123      	bne.n	800203c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	08da      	lsrs	r2, r3, #3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3208      	adds	r2, #8
 8001ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002000:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	220f      	movs	r2, #15
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	08da      	lsrs	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3208      	adds	r2, #8
 8002036:	69b9      	ldr	r1, [r7, #24]
 8002038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	2203      	movs	r2, #3
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0203 	and.w	r2, r3, #3
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80a2 	beq.w	80021c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	4b57      	ldr	r3, [pc, #348]	@ (80021e0 <HAL_GPIO_Init+0x2e8>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002086:	4a56      	ldr	r2, [pc, #344]	@ (80021e0 <HAL_GPIO_Init+0x2e8>)
 8002088:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800208c:	6453      	str	r3, [r2, #68]	@ 0x44
 800208e:	4b54      	ldr	r3, [pc, #336]	@ (80021e0 <HAL_GPIO_Init+0x2e8>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800209a:	4a52      	ldr	r2, [pc, #328]	@ (80021e4 <HAL_GPIO_Init+0x2ec>)
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	089b      	lsrs	r3, r3, #2
 80020a0:	3302      	adds	r3, #2
 80020a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	220f      	movs	r2, #15
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a49      	ldr	r2, [pc, #292]	@ (80021e8 <HAL_GPIO_Init+0x2f0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d019      	beq.n	80020fa <HAL_GPIO_Init+0x202>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a48      	ldr	r2, [pc, #288]	@ (80021ec <HAL_GPIO_Init+0x2f4>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d013      	beq.n	80020f6 <HAL_GPIO_Init+0x1fe>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a47      	ldr	r2, [pc, #284]	@ (80021f0 <HAL_GPIO_Init+0x2f8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00d      	beq.n	80020f2 <HAL_GPIO_Init+0x1fa>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a46      	ldr	r2, [pc, #280]	@ (80021f4 <HAL_GPIO_Init+0x2fc>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d007      	beq.n	80020ee <HAL_GPIO_Init+0x1f6>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a45      	ldr	r2, [pc, #276]	@ (80021f8 <HAL_GPIO_Init+0x300>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d101      	bne.n	80020ea <HAL_GPIO_Init+0x1f2>
 80020e6:	2304      	movs	r3, #4
 80020e8:	e008      	b.n	80020fc <HAL_GPIO_Init+0x204>
 80020ea:	2307      	movs	r3, #7
 80020ec:	e006      	b.n	80020fc <HAL_GPIO_Init+0x204>
 80020ee:	2303      	movs	r3, #3
 80020f0:	e004      	b.n	80020fc <HAL_GPIO_Init+0x204>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e002      	b.n	80020fc <HAL_GPIO_Init+0x204>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <HAL_GPIO_Init+0x204>
 80020fa:	2300      	movs	r3, #0
 80020fc:	69fa      	ldr	r2, [r7, #28]
 80020fe:	f002 0203 	and.w	r2, r2, #3
 8002102:	0092      	lsls	r2, r2, #2
 8002104:	4093      	lsls	r3, r2
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800210c:	4935      	ldr	r1, [pc, #212]	@ (80021e4 <HAL_GPIO_Init+0x2ec>)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	089b      	lsrs	r3, r3, #2
 8002112:	3302      	adds	r3, #2
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800211a:	4b38      	ldr	r3, [pc, #224]	@ (80021fc <HAL_GPIO_Init+0x304>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800213e:	4a2f      	ldr	r2, [pc, #188]	@ (80021fc <HAL_GPIO_Init+0x304>)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002144:	4b2d      	ldr	r3, [pc, #180]	@ (80021fc <HAL_GPIO_Init+0x304>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002168:	4a24      	ldr	r2, [pc, #144]	@ (80021fc <HAL_GPIO_Init+0x304>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800216e:	4b23      	ldr	r3, [pc, #140]	@ (80021fc <HAL_GPIO_Init+0x304>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002192:	4a1a      	ldr	r2, [pc, #104]	@ (80021fc <HAL_GPIO_Init+0x304>)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002198:	4b18      	ldr	r3, [pc, #96]	@ (80021fc <HAL_GPIO_Init+0x304>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021bc:	4a0f      	ldr	r2, [pc, #60]	@ (80021fc <HAL_GPIO_Init+0x304>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3301      	adds	r3, #1
 80021c6:	61fb      	str	r3, [r7, #28]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	2b0f      	cmp	r3, #15
 80021cc:	f67f aea2 	bls.w	8001f14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	3724      	adds	r7, #36	@ 0x24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40013800 	.word	0x40013800
 80021e8:	40020000 	.word	0x40020000
 80021ec:	40020400 	.word	0x40020400
 80021f0:	40020800 	.word	0x40020800
 80021f4:	40020c00 	.word	0x40020c00
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40013c00 	.word	0x40013c00

08002200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	807b      	strh	r3, [r7, #2]
 800220c:	4613      	mov	r3, r2
 800220e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002210:	787b      	ldrb	r3, [r7, #1]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002216:	887a      	ldrh	r2, [r7, #2]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800221c:	e003      	b.n	8002226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800221e:	887b      	ldrh	r3, [r7, #2]
 8002220:	041a      	lsls	r2, r3, #16
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	619a      	str	r2, [r3, #24]
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002232:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002234:	b08f      	sub	sp, #60	@ 0x3c
 8002236:	af0a      	add	r7, sp, #40	@ 0x28
 8002238:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e10f      	b.n	8002464 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f006 fd4e 	bl	8008d00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2203      	movs	r2, #3
 8002268:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002274:	2b00      	cmp	r3, #0
 8002276:	d102      	bne.n	800227e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f003 f837 	bl	80052f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	603b      	str	r3, [r7, #0]
 800228e:	687e      	ldr	r6, [r7, #4]
 8002290:	466d      	mov	r5, sp
 8002292:	f106 0410 	add.w	r4, r6, #16
 8002296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800229a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800229c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800229e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80022a6:	1d33      	adds	r3, r6, #4
 80022a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022aa:	6838      	ldr	r0, [r7, #0]
 80022ac:	f002 ff0e 	bl	80050cc <USB_CoreInit>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d005      	beq.n	80022c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2202      	movs	r2, #2
 80022ba:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e0d0      	b.n	8002464 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2100      	movs	r1, #0
 80022c8:	4618      	mov	r0, r3
 80022ca:	f003 f825 	bl	8005318 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ce:	2300      	movs	r3, #0
 80022d0:	73fb      	strb	r3, [r7, #15]
 80022d2:	e04a      	b.n	800236a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022d4:	7bfa      	ldrb	r2, [r7, #15]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4413      	add	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	333d      	adds	r3, #61	@ 0x3d
 80022e4:	2201      	movs	r2, #1
 80022e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022e8:	7bfa      	ldrb	r2, [r7, #15]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	333c      	adds	r3, #60	@ 0x3c
 80022f8:	7bfa      	ldrb	r2, [r7, #15]
 80022fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	b298      	uxth	r0, r3
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4413      	add	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	3344      	adds	r3, #68	@ 0x44
 8002310:	4602      	mov	r2, r0
 8002312:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002314:	7bfa      	ldrb	r2, [r7, #15]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	3340      	adds	r3, #64	@ 0x40
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	3348      	adds	r3, #72	@ 0x48
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4413      	add	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	334c      	adds	r3, #76	@ 0x4c
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	3354      	adds	r3, #84	@ 0x54
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	3301      	adds	r3, #1
 8002368:	73fb      	strb	r3, [r7, #15]
 800236a:	7bfa      	ldrb	r2, [r7, #15]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	429a      	cmp	r2, r3
 8002372:	d3af      	bcc.n	80022d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002374:	2300      	movs	r3, #0
 8002376:	73fb      	strb	r3, [r7, #15]
 8002378:	e044      	b.n	8002404 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4413      	add	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002390:	7bfa      	ldrb	r2, [r7, #15]
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	4413      	add	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80023a2:	7bfa      	ldrb	r2, [r7, #15]
 80023a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023a6:	7bfa      	ldrb	r2, [r7, #15]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4413      	add	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023bc:	7bfa      	ldrb	r2, [r7, #15]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023d2:	7bfa      	ldrb	r2, [r7, #15]
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4413      	add	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023e8:	7bfa      	ldrb	r2, [r7, #15]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
 8002400:	3301      	adds	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
 8002404:	7bfa      	ldrb	r2, [r7, #15]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	429a      	cmp	r2, r3
 800240c:	d3b5      	bcc.n	800237a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	687e      	ldr	r6, [r7, #4]
 8002416:	466d      	mov	r5, sp
 8002418:	f106 0410 	add.w	r4, r6, #16
 800241c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800241e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002420:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002422:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002424:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002428:	e885 0003 	stmia.w	r5, {r0, r1}
 800242c:	1d33      	adds	r3, r6, #4
 800242e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002430:	6838      	ldr	r0, [r7, #0]
 8002432:	f002 ffbd 	bl	80053b0 <USB_DevInit>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e00d      	b.n	8002464 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f004 f90c 	bl	800667a <USB_DevDisconnect>

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800246c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_PCD_Start+0x1c>
 8002484:	2302      	movs	r3, #2
 8002486:	e020      	b.n	80024ca <HAL_PCD_Start+0x5e>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002494:	2b01      	cmp	r3, #1
 8002496:	d109      	bne.n	80024ac <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800249c:	2b01      	cmp	r3, #1
 800249e:	d005      	beq.n	80024ac <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f002 ff0f 	bl	80052d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f004 f8bc 	bl	8006638 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024d2:	b590      	push	{r4, r7, lr}
 80024d4:	b08d      	sub	sp, #52	@ 0x34
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f004 f97a 	bl	80067e2 <USB_GetMode>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f040 848a 	bne.w	8002e0a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f004 f8de 	bl	80066bc <USB_ReadInterrupts>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 8480 	beq.w	8002e08 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	0a1b      	lsrs	r3, r3, #8
 8002512:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f004 f8cb 	bl	80066bc <USB_ReadInterrupts>
 8002526:	4603      	mov	r3, r0
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b02      	cmp	r3, #2
 800252e:	d107      	bne.n	8002540 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695a      	ldr	r2, [r3, #20]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f002 0202 	and.w	r2, r2, #2
 800253e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f004 f8b9 	bl	80066bc <USB_ReadInterrupts>
 800254a:	4603      	mov	r3, r0
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b10      	cmp	r3, #16
 8002552:	d161      	bne.n	8002618 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699a      	ldr	r2, [r3, #24]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0210 	bic.w	r2, r2, #16
 8002562:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	f003 020f 	and.w	r2, r3, #15
 8002570:	4613      	mov	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	4413      	add	r3, r2
 8002580:	3304      	adds	r3, #4
 8002582:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	0c5b      	lsrs	r3, r3, #17
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	2b02      	cmp	r3, #2
 800258e:	d124      	bne.n	80025da <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002596:	4013      	ands	r3, r2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d035      	beq.n	8002608 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	091b      	lsrs	r3, r3, #4
 80025a4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	6a38      	ldr	r0, [r7, #32]
 80025b0:	f003 fef0 	bl	8006394 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	091b      	lsrs	r3, r3, #4
 80025bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025c0:	441a      	add	r2, r3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	6a1a      	ldr	r2, [r3, #32]
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025d2:	441a      	add	r2, r3
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	621a      	str	r2, [r3, #32]
 80025d8:	e016      	b.n	8002608 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	0c5b      	lsrs	r3, r3, #17
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	2b06      	cmp	r3, #6
 80025e4:	d110      	bne.n	8002608 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80025ec:	2208      	movs	r2, #8
 80025ee:	4619      	mov	r1, r3
 80025f0:	6a38      	ldr	r0, [r7, #32]
 80025f2:	f003 fecf 	bl	8006394 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	6a1a      	ldr	r2, [r3, #32]
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002602:	441a      	add	r2, r3
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699a      	ldr	r2, [r3, #24]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0210 	orr.w	r2, r2, #16
 8002616:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f004 f84d 	bl	80066bc <USB_ReadInterrupts>
 8002622:	4603      	mov	r3, r0
 8002624:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002628:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800262c:	f040 80a7 	bne.w	800277e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f004 f852 	bl	80066e2 <USB_ReadDevAllOutEpInterrupt>
 800263e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002640:	e099      	b.n	8002776 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 808e 	beq.w	800276a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f004 f876 	bl	800674a <USB_ReadDevOutEPInterrupt>
 800265e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00c      	beq.n	8002684 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	4413      	add	r3, r2
 8002672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002676:	461a      	mov	r2, r3
 8002678:	2301      	movs	r3, #1
 800267a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800267c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 fec2 	bl	8003408 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00c      	beq.n	80026a8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	4413      	add	r3, r2
 8002696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800269a:	461a      	mov	r2, r3
 800269c:	2308      	movs	r3, #8
 800269e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80026a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 ff98 	bl	80035d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d008      	beq.n	80026c4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026be:	461a      	mov	r2, r3
 80026c0:	2310      	movs	r3, #16
 80026c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d030      	beq.n	8002730 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026d6:	2b80      	cmp	r3, #128	@ 0x80
 80026d8:	d109      	bne.n	80026ee <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026ec:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026f0:	4613      	mov	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	4413      	add	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	4413      	add	r3, r2
 8002700:	3304      	adds	r3, #4
 8002702:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	78db      	ldrb	r3, [r3, #3]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d108      	bne.n	800271e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2200      	movs	r2, #0
 8002710:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002714:	b2db      	uxtb	r3, r3
 8002716:	4619      	mov	r1, r3
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f006 fbed 	bl	8008ef8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	4413      	add	r3, r2
 8002726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800272a:	461a      	mov	r2, r3
 800272c:	2302      	movs	r3, #2
 800272e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	f003 0320 	and.w	r3, r3, #32
 8002736:	2b00      	cmp	r3, #0
 8002738:	d008      	beq.n	800274c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	4413      	add	r3, r2
 8002742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002746:	461a      	mov	r2, r3
 8002748:	2320      	movs	r3, #32
 800274a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d009      	beq.n	800276a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	4413      	add	r3, r2
 800275e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002762:	461a      	mov	r2, r3
 8002764:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002768:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276c:	3301      	adds	r3, #1
 800276e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002772:	085b      	lsrs	r3, r3, #1
 8002774:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002778:	2b00      	cmp	r3, #0
 800277a:	f47f af62 	bne.w	8002642 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f003 ff9a 	bl	80066bc <USB_ReadInterrupts>
 8002788:	4603      	mov	r3, r0
 800278a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800278e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002792:	f040 80db 	bne.w	800294c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f003 ffbb 	bl	8006716 <USB_ReadDevAllInEpInterrupt>
 80027a0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80027a6:	e0cd      	b.n	8002944 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80027a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 80c2 	beq.w	8002938 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f003 ffe1 	bl	8006786 <USB_ReadDevInEPInterrupt>
 80027c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d057      	beq.n	8002880 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	2201      	movs	r2, #1
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69f9      	ldr	r1, [r7, #28]
 80027ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80027f0:	4013      	ands	r3, r2
 80027f2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002800:	461a      	mov	r2, r3
 8002802:	2301      	movs	r3, #1
 8002804:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d132      	bne.n	8002874 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002812:	4613      	mov	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	4413      	add	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	334c      	adds	r3, #76	@ 0x4c
 800281e:	6819      	ldr	r1, [r3, #0]
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4403      	add	r3, r0
 800282e:	3348      	adds	r3, #72	@ 0x48
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4419      	add	r1, r3
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4413      	add	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4403      	add	r3, r0
 8002842:	334c      	adds	r3, #76	@ 0x4c
 8002844:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002848:	2b00      	cmp	r3, #0
 800284a:	d113      	bne.n	8002874 <HAL_PCD_IRQHandler+0x3a2>
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002850:	4613      	mov	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	3354      	adds	r3, #84	@ 0x54
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d108      	bne.n	8002874 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800286c:	461a      	mov	r2, r3
 800286e:	2101      	movs	r1, #1
 8002870:	f003 ffe8 	bl	8006844 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002876:	b2db      	uxtb	r3, r3
 8002878:	4619      	mov	r1, r3
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f006 fac1 	bl	8008e02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d008      	beq.n	800289c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	4413      	add	r3, r2
 8002892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002896:	461a      	mov	r2, r3
 8002898:	2308      	movs	r3, #8
 800289a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80028a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a8:	015a      	lsls	r2, r3, #5
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028b2:	461a      	mov	r2, r3
 80028b4:	2310      	movs	r3, #16
 80028b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d008      	beq.n	80028d4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028ce:	461a      	mov	r2, r3
 80028d0:	2340      	movs	r3, #64	@ 0x40
 80028d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d023      	beq.n	8002926 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028e0:	6a38      	ldr	r0, [r7, #32]
 80028e2:	f002 fec9 	bl	8005678 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	3338      	adds	r3, #56	@ 0x38
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	4413      	add	r3, r2
 80028f6:	3304      	adds	r3, #4
 80028f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	78db      	ldrb	r3, [r3, #3]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d108      	bne.n	8002914 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2200      	movs	r2, #0
 8002906:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290a:	b2db      	uxtb	r3, r3
 800290c:	4619      	mov	r1, r3
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f006 fb04 	bl	8008f1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	4413      	add	r3, r2
 800291c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002920:	461a      	mov	r2, r3
 8002922:	2302      	movs	r3, #2
 8002924:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002930:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 fcdb 	bl	80032ee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293a:	3301      	adds	r3, #1
 800293c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800293e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002940:	085b      	lsrs	r3, r3, #1
 8002942:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002946:	2b00      	cmp	r3, #0
 8002948:	f47f af2e 	bne.w	80027a8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f003 feb3 	bl	80066bc <USB_ReadInterrupts>
 8002956:	4603      	mov	r3, r0
 8002958:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800295c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002960:	d122      	bne.n	80029a8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002970:	f023 0301 	bic.w	r3, r3, #1
 8002974:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800297c:	2b01      	cmp	r3, #1
 800297e:	d108      	bne.n	8002992 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002988:	2100      	movs	r1, #0
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fec2 	bl	8003714 <HAL_PCDEx_LPM_Callback>
 8002990:	e002      	b.n	8002998 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f006 faa2 	bl	8008edc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80029a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f003 fe85 	bl	80066bc <USB_ReadInterrupts>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029bc:	d112      	bne.n	80029e4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d102      	bne.n	80029d4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f006 fa5e 	bl	8008e90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695a      	ldr	r2, [r3, #20]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80029e2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f003 fe67 	bl	80066bc <USB_ReadInterrupts>
 80029ee:	4603      	mov	r3, r0
 80029f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029f8:	f040 80b7 	bne.w	8002b6a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	69fa      	ldr	r2, [r7, #28]
 8002a06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a0a:	f023 0301 	bic.w	r3, r3, #1
 8002a0e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2110      	movs	r1, #16
 8002a16:	4618      	mov	r0, r3
 8002a18:	f002 fe2e 	bl	8005678 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a20:	e046      	b.n	8002ab0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a24:	015a      	lsls	r2, r3, #5
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002a34:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a46:	0151      	lsls	r1, r2, #5
 8002a48:	69fa      	ldr	r2, [r7, #28]
 8002a4a:	440a      	add	r2, r1
 8002a4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002a50:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002a54:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a58:	015a      	lsls	r2, r3, #5
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a62:	461a      	mov	r2, r3
 8002a64:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002a68:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a6c:	015a      	lsls	r2, r3, #5
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a7a:	0151      	lsls	r1, r2, #5
 8002a7c:	69fa      	ldr	r2, [r7, #28]
 8002a7e:	440a      	add	r2, r1
 8002a80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002a84:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002a88:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a9a:	0151      	lsls	r1, r2, #5
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	440a      	add	r2, r1
 8002aa0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002aa4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002aa8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aac:	3301      	adds	r3, #1
 8002aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d3b3      	bcc.n	8002a22 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	69fa      	ldr	r2, [r7, #28]
 8002ac4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ac8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002acc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d016      	beq.n	8002b04 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ae0:	69fa      	ldr	r2, [r7, #28]
 8002ae2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ae6:	f043 030b 	orr.w	r3, r3, #11
 8002aea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002afc:	f043 030b 	orr.w	r3, r3, #11
 8002b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b02:	e015      	b.n	8002b30 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	69fa      	ldr	r2, [r7, #28]
 8002b0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b12:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b16:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002b1a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	69fa      	ldr	r2, [r7, #28]
 8002b26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b2a:	f043 030b 	orr.w	r3, r3, #11
 8002b2e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	69fa      	ldr	r2, [r7, #28]
 8002b3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b3e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002b42:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b54:	461a      	mov	r2, r3
 8002b56:	f003 fe75 	bl	8006844 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f003 fda4 	bl	80066bc <USB_ReadInterrupts>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b7e:	d124      	bne.n	8002bca <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f003 fe3a 	bl	80067fe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f002 fdef 	bl	8005772 <USB_GetDevSpeed>
 8002b94:	4603      	mov	r3, r0
 8002b96:	461a      	mov	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681c      	ldr	r4, [r3, #0]
 8002ba0:	f001 f9e8 	bl	8003f74 <HAL_RCC_GetHCLKFreq>
 8002ba4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	461a      	mov	r2, r3
 8002bae:	4620      	mov	r0, r4
 8002bb0:	f002 faee 	bl	8005190 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f006 f94c 	bl	8008e52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002bc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f003 fd74 	bl	80066bc <USB_ReadInterrupts>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d10a      	bne.n	8002bf4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f006 f929 	bl	8008e36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695a      	ldr	r2, [r3, #20]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f002 0208 	and.w	r2, r2, #8
 8002bf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f003 fd5f 	bl	80066bc <USB_ReadInterrupts>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c04:	2b80      	cmp	r3, #128	@ 0x80
 8002c06:	d122      	bne.n	8002c4e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c14:	2301      	movs	r3, #1
 8002c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c18:	e014      	b.n	8002c44 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c1e:	4613      	mov	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d105      	bne.n	8002c3e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	4619      	mov	r1, r3
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 fb27 	bl	800328c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c40:	3301      	adds	r3, #1
 8002c42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d3e5      	bcc.n	8002c1a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f003 fd32 	bl	80066bc <USB_ReadInterrupts>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c62:	d13b      	bne.n	8002cdc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c64:	2301      	movs	r3, #1
 8002c66:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c68:	e02b      	b.n	8002cc2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	015a      	lsls	r2, r3, #5
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c7e:	4613      	mov	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	3340      	adds	r3, #64	@ 0x40
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d115      	bne.n	8002cbc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c90:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	da12      	bge.n	8002cbc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	333f      	adds	r3, #63	@ 0x3f
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fae8 	bl	800328c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d3ce      	bcc.n	8002c6a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002cda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f003 fceb 	bl	80066bc <USB_ReadInterrupts>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002cf0:	d155      	bne.n	8002d9e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf6:	e045      	b.n	8002d84 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	4413      	add	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d12e      	bne.n	8002d7e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d20:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	da2b      	bge.n	8002d7e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8002d32:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d121      	bne.n	8002d7e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10a      	bne.n	8002d7e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d7a:	6053      	str	r3, [r2, #4]
            break;
 8002d7c:	e007      	b.n	8002d8e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	3301      	adds	r3, #1
 8002d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d3b4      	bcc.n	8002cf8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695a      	ldr	r2, [r3, #20]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002d9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f003 fc8a 	bl	80066bc <USB_ReadInterrupts>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002dae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002db2:	d10a      	bne.n	8002dca <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f006 f8c3 	bl	8008f40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002dc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f003 fc74 	bl	80066bc <USB_ReadInterrupts>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d115      	bne.n	8002e0a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f006 f8b3 	bl	8008f5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	e000      	b.n	8002e0a <HAL_PCD_IRQHandler+0x938>
      return;
 8002e08:	bf00      	nop
    }
  }
}
 8002e0a:	3734      	adds	r7, #52	@ 0x34
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd90      	pop	{r4, r7, pc}

08002e10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_PCD_SetAddress+0x1a>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e013      	b.n	8002e52 <HAL_PCD_SetAddress+0x42>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	78fa      	ldrb	r2, [r7, #3]
 8002e36:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	4611      	mov	r1, r2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f003 fbd2 	bl	80065ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	4608      	mov	r0, r1
 8002e64:	4611      	mov	r1, r2
 8002e66:	461a      	mov	r2, r3
 8002e68:	4603      	mov	r3, r0
 8002e6a:	70fb      	strb	r3, [r7, #3]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	803b      	strh	r3, [r7, #0]
 8002e70:	4613      	mov	r3, r2
 8002e72:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	da0f      	bge.n	8002ea0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	f003 020f 	and.w	r2, r3, #15
 8002e86:	4613      	mov	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	3338      	adds	r3, #56	@ 0x38
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	4413      	add	r3, r2
 8002e94:	3304      	adds	r3, #4
 8002e96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	705a      	strb	r2, [r3, #1]
 8002e9e:	e00f      	b.n	8002ec0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	f003 020f 	and.w	r2, r3, #15
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ecc:	883a      	ldrh	r2, [r7, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	78ba      	ldrb	r2, [r7, #2]
 8002ed6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	785b      	ldrb	r3, [r3, #1]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d004      	beq.n	8002eea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002eea:	78bb      	ldrb	r3, [r7, #2]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d102      	bne.n	8002ef6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_PCD_EP_Open+0xaa>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e00e      	b.n	8002f22 <HAL_PCD_EP_Open+0xc8>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68f9      	ldr	r1, [r7, #12]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f002 fc52 	bl	80057bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8002f20:	7afb      	ldrb	r3, [r7, #11]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	460b      	mov	r3, r1
 8002f34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	da0f      	bge.n	8002f5e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f3e:	78fb      	ldrb	r3, [r7, #3]
 8002f40:	f003 020f 	and.w	r2, r3, #15
 8002f44:	4613      	mov	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	3338      	adds	r3, #56	@ 0x38
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	3304      	adds	r3, #4
 8002f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	705a      	strb	r2, [r3, #1]
 8002f5c:	e00f      	b.n	8002f7e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	f003 020f 	and.w	r2, r3, #15
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	4413      	add	r3, r2
 8002f74:	3304      	adds	r3, #4
 8002f76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f7e:	78fb      	ldrb	r3, [r7, #3]
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_PCD_EP_Close+0x6e>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e00e      	b.n	8002fb6 <HAL_PCD_EP_Close+0x8c>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68f9      	ldr	r1, [r7, #12]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f002 fc90 	bl	80058cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b086      	sub	sp, #24
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	603b      	str	r3, [r7, #0]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fce:	7afb      	ldrb	r3, [r7, #11]
 8002fd0:	f003 020f 	and.w	r2, r3, #15
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003000:	7afb      	ldrb	r3, [r7, #11]
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	b2da      	uxtb	r2, r3
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d102      	bne.n	800301a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800301a:	7afb      	ldrb	r3, [r7, #11]
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	2b00      	cmp	r3, #0
 8003022:	d109      	bne.n	8003038 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	b2db      	uxtb	r3, r3
 800302e:	461a      	mov	r2, r3
 8003030:	6979      	ldr	r1, [r7, #20]
 8003032:	f002 ff6f 	bl	8005f14 <USB_EP0StartXfer>
 8003036:	e008      	b.n	800304a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	6979      	ldr	r1, [r7, #20]
 8003046:	f002 fd1d 	bl	8005a84 <USB_EPStartXfer>
  }

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003060:	78fb      	ldrb	r3, [r7, #3]
 8003062:	f003 020f 	and.w	r2, r3, #15
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8003076:	681b      	ldr	r3, [r3, #0]
}
 8003078:	4618      	mov	r0, r3
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	607a      	str	r2, [r7, #4]
 800308e:	603b      	str	r3, [r7, #0]
 8003090:	460b      	mov	r3, r1
 8003092:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003094:	7afb      	ldrb	r3, [r7, #11]
 8003096:	f003 020f 	and.w	r2, r3, #15
 800309a:	4613      	mov	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	3338      	adds	r3, #56	@ 0x38
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4413      	add	r3, r2
 80030a8:	3304      	adds	r3, #4
 80030aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2200      	movs	r2, #0
 80030bc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2201      	movs	r2, #1
 80030c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030c4:	7afb      	ldrb	r3, [r7, #11]
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d102      	bne.n	80030de <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030de:	7afb      	ldrb	r3, [r7, #11]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d109      	bne.n	80030fc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	461a      	mov	r2, r3
 80030f4:	6979      	ldr	r1, [r7, #20]
 80030f6:	f002 ff0d 	bl	8005f14 <USB_EP0StartXfer>
 80030fa:	e008      	b.n	800310e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	461a      	mov	r2, r3
 8003108:	6979      	ldr	r1, [r7, #20]
 800310a:	f002 fcbb 	bl	8005a84 <USB_EPStartXfer>
  }

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	f003 020f 	and.w	r2, r3, #15
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	429a      	cmp	r2, r3
 8003130:	d901      	bls.n	8003136 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e050      	b.n	80031d8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003136:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800313a:	2b00      	cmp	r3, #0
 800313c:	da0f      	bge.n	800315e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	f003 020f 	and.w	r2, r3, #15
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	3338      	adds	r3, #56	@ 0x38
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	4413      	add	r3, r2
 8003152:	3304      	adds	r3, #4
 8003154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	705a      	strb	r2, [r3, #1]
 800315c:	e00d      	b.n	800317a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	4613      	mov	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	4413      	add	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	4413      	add	r3, r2
 8003170:	3304      	adds	r3, #4
 8003172:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2201      	movs	r2, #1
 800317e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	b2da      	uxtb	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_PCD_EP_SetStall+0x82>
 8003196:	2302      	movs	r3, #2
 8003198:	e01e      	b.n	80031d8 <HAL_PCD_EP_SetStall+0xc0>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68f9      	ldr	r1, [r7, #12]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f003 f94b 	bl	8006444 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031ae:	78fb      	ldrb	r3, [r7, #3]
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10a      	bne.n	80031ce <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6818      	ldr	r0, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	b2d9      	uxtb	r1, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80031c8:	461a      	mov	r2, r3
 80031ca:	f003 fb3b 	bl	8006844 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	f003 020f 	and.w	r2, r3, #15
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d901      	bls.n	80031fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e042      	b.n	8003284 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003202:	2b00      	cmp	r3, #0
 8003204:	da0f      	bge.n	8003226 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	f003 020f 	and.w	r2, r3, #15
 800320c:	4613      	mov	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	3338      	adds	r3, #56	@ 0x38
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	4413      	add	r3, r2
 800321a:	3304      	adds	r3, #4
 800321c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2201      	movs	r2, #1
 8003222:	705a      	strb	r2, [r3, #1]
 8003224:	e00f      	b.n	8003246 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	f003 020f 	and.w	r2, r3, #15
 800322c:	4613      	mov	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	4413      	add	r3, r2
 800323c:	3304      	adds	r3, #4
 800323e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	b2da      	uxtb	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_PCD_EP_ClrStall+0x86>
 8003262:	2302      	movs	r3, #2
 8003264:	e00e      	b.n	8003284 <HAL_PCD_EP_ClrStall+0xa4>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68f9      	ldr	r1, [r7, #12]
 8003274:	4618      	mov	r0, r3
 8003276:	f003 f953 	bl	8006520 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003298:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800329c:	2b00      	cmp	r3, #0
 800329e:	da0c      	bge.n	80032ba <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	f003 020f 	and.w	r2, r3, #15
 80032a6:	4613      	mov	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	3338      	adds	r3, #56	@ 0x38
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	4413      	add	r3, r2
 80032b4:	3304      	adds	r3, #4
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	e00c      	b.n	80032d4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032ba:	78fb      	ldrb	r3, [r7, #3]
 80032bc:	f003 020f 	and.w	r2, r3, #15
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	4413      	add	r3, r2
 80032d0:	3304      	adds	r3, #4
 80032d2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68f9      	ldr	r1, [r7, #12]
 80032da:	4618      	mov	r0, r3
 80032dc:	f002 ff72 	bl	80061c4 <USB_EPStopXfer>
 80032e0:	4603      	mov	r3, r0
 80032e2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80032e4:	7afb      	ldrb	r3, [r7, #11]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b08a      	sub	sp, #40	@ 0x28
 80032f2:	af02      	add	r7, sp, #8
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4413      	add	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	3338      	adds	r3, #56	@ 0x38
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	4413      	add	r3, r2
 8003312:	3304      	adds	r3, #4
 8003314:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a1a      	ldr	r2, [r3, #32]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	429a      	cmp	r2, r3
 8003320:	d901      	bls.n	8003326 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e06c      	b.n	8003400 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	429a      	cmp	r2, r3
 800333a:	d902      	bls.n	8003342 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3303      	adds	r3, #3
 8003346:	089b      	lsrs	r3, r3, #2
 8003348:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800334a:	e02b      	b.n	80033a4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	699a      	ldr	r2, [r3, #24]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	69fa      	ldr	r2, [r7, #28]
 800335e:	429a      	cmp	r2, r3
 8003360:	d902      	bls.n	8003368 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	3303      	adds	r3, #3
 800336c:	089b      	lsrs	r3, r3, #2
 800336e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6919      	ldr	r1, [r3, #16]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	b2da      	uxtb	r2, r3
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003380:	b2db      	uxtb	r3, r3
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	4603      	mov	r3, r0
 8003386:	6978      	ldr	r0, [r7, #20]
 8003388:	f002 ffc6 	bl	8006318 <USB_WritePacket>

    ep->xfer_buff  += len;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	441a      	add	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a1a      	ldr	r2, [r3, #32]
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	441a      	add	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d809      	bhi.n	80033ce <PCD_WriteEmptyTxFifo+0xe0>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a1a      	ldr	r2, [r3, #32]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d203      	bcs.n	80033ce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1be      	bne.n	800334c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	699a      	ldr	r2, [r3, #24]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d811      	bhi.n	80033fe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	2201      	movs	r2, #1
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	6939      	ldr	r1, [r7, #16]
 80033f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033fa:	4013      	ands	r3, r2
 80033fc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3720      	adds	r7, #32
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	333c      	adds	r3, #60	@ 0x3c
 8003420:	3304      	adds	r3, #4
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	4413      	add	r3, r2
 800342e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d17b      	bne.n	8003536 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d015      	beq.n	8003474 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	4a61      	ldr	r2, [pc, #388]	@ (80035d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	f240 80b9 	bls.w	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80b3 	beq.w	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800346a:	461a      	mov	r2, r3
 800346c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003470:	6093      	str	r3, [r2, #8]
 8003472:	e0a7      	b.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	015a      	lsls	r2, r3, #5
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	4413      	add	r3, r2
 8003486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800348a:	461a      	mov	r2, r3
 800348c:	2320      	movs	r3, #32
 800348e:	6093      	str	r3, [r2, #8]
 8003490:	e098      	b.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003498:	2b00      	cmp	r3, #0
 800349a:	f040 8093 	bne.w	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	4a4b      	ldr	r2, [pc, #300]	@ (80035d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d90f      	bls.n	80034c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034bc:	461a      	mov	r2, r3
 80034be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034c2:	6093      	str	r3, [r2, #8]
 80034c4:	e07e      	b.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	4613      	mov	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	4413      	add	r3, r2
 80034d8:	3304      	adds	r3, #4
 80034da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	69da      	ldr	r2, [r3, #28]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	0159      	lsls	r1, r3, #5
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	440b      	add	r3, r1
 80034e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f2:	1ad2      	subs	r2, r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d114      	bne.n	8003528 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d109      	bne.n	800351a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003510:	461a      	mov	r2, r3
 8003512:	2101      	movs	r1, #1
 8003514:	f003 f996 	bl	8006844 <USB_EP0_OutStart>
 8003518:	e006      	b.n	8003528 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	441a      	add	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	b2db      	uxtb	r3, r3
 800352c:	4619      	mov	r1, r3
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f005 fc4c 	bl	8008dcc <HAL_PCD_DataOutStageCallback>
 8003534:	e046      	b.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	4a26      	ldr	r2, [pc, #152]	@ (80035d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d124      	bne.n	8003588 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	4413      	add	r3, r2
 8003550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003554:	461a      	mov	r2, r3
 8003556:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800355a:	6093      	str	r3, [r2, #8]
 800355c:	e032      	b.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003574:	461a      	mov	r2, r3
 8003576:	2320      	movs	r3, #32
 8003578:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	4619      	mov	r1, r3
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f005 fc23 	bl	8008dcc <HAL_PCD_DataOutStageCallback>
 8003586:	e01d      	b.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d114      	bne.n	80035b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	4613      	mov	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d108      	bne.n	80035b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80035b0:	461a      	mov	r2, r3
 80035b2:	2100      	movs	r1, #0
 80035b4:	f003 f946 	bl	8006844 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	4619      	mov	r1, r3
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f005 fc04 	bl	8008dcc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3720      	adds	r7, #32
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	4f54300a 	.word	0x4f54300a
 80035d4:	4f54310a 	.word	0x4f54310a

080035d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	333c      	adds	r3, #60	@ 0x3c
 80035f0:	3304      	adds	r3, #4
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4a15      	ldr	r2, [pc, #84]	@ (8003660 <PCD_EP_OutSetupPacket_int+0x88>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d90e      	bls.n	800362c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003614:	2b00      	cmp	r3, #0
 8003616:	d009      	beq.n	800362c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4413      	add	r3, r2
 8003620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003624:	461a      	mov	r2, r3
 8003626:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800362a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f005 fbbb 	bl	8008da8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4a0a      	ldr	r2, [pc, #40]	@ (8003660 <PCD_EP_OutSetupPacket_int+0x88>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d90c      	bls.n	8003654 <PCD_EP_OutSetupPacket_int+0x7c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d108      	bne.n	8003654 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800364c:	461a      	mov	r2, r3
 800364e:	2101      	movs	r1, #1
 8003650:	f003 f8f8 	bl	8006844 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	4f54300a 	.word	0x4f54300a

08003664 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	70fb      	strb	r3, [r7, #3]
 8003670:	4613      	mov	r3, r2
 8003672:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d107      	bne.n	8003692 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003682:	883b      	ldrh	r3, [r7, #0]
 8003684:	0419      	lsls	r1, r3, #16
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	430a      	orrs	r2, r1
 800368e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003690:	e028      	b.n	80036e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003698:	0c1b      	lsrs	r3, r3, #16
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	4413      	add	r3, r2
 800369e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036a0:	2300      	movs	r3, #0
 80036a2:	73fb      	strb	r3, [r7, #15]
 80036a4:	e00d      	b.n	80036c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
 80036ac:	3340      	adds	r3, #64	@ 0x40
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	4413      	add	r3, r2
 80036ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	3301      	adds	r3, #1
 80036c0:	73fb      	strb	r3, [r7, #15]
 80036c2:	7bfa      	ldrb	r2, [r7, #15]
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d3ec      	bcc.n	80036a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036cc:	883b      	ldrh	r3, [r7, #0]
 80036ce:	0418      	lsls	r0, r3, #16
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6819      	ldr	r1, [r3, #0]
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	4302      	orrs	r2, r0
 80036dc:	3340      	adds	r3, #64	@ 0x40
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	460b      	mov	r3, r1
 80036fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	887a      	ldrh	r2, [r7, #2]
 8003704:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e267      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d075      	beq.n	8003836 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800374a:	4b88      	ldr	r3, [pc, #544]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b04      	cmp	r3, #4
 8003754:	d00c      	beq.n	8003770 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003756:	4b85      	ldr	r3, [pc, #532]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800375e:	2b08      	cmp	r3, #8
 8003760:	d112      	bne.n	8003788 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003762:	4b82      	ldr	r3, [pc, #520]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800376a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800376e:	d10b      	bne.n	8003788 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003770:	4b7e      	ldr	r3, [pc, #504]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d05b      	beq.n	8003834 <HAL_RCC_OscConfig+0x108>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d157      	bne.n	8003834 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e242      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003790:	d106      	bne.n	80037a0 <HAL_RCC_OscConfig+0x74>
 8003792:	4b76      	ldr	r3, [pc, #472]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a75      	ldr	r2, [pc, #468]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e01d      	b.n	80037dc <HAL_RCC_OscConfig+0xb0>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCC_OscConfig+0x98>
 80037aa:	4b70      	ldr	r3, [pc, #448]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a6f      	ldr	r2, [pc, #444]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	4b6d      	ldr	r3, [pc, #436]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a6c      	ldr	r2, [pc, #432]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	e00b      	b.n	80037dc <HAL_RCC_OscConfig+0xb0>
 80037c4:	4b69      	ldr	r3, [pc, #420]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a68      	ldr	r2, [pc, #416]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	4b66      	ldr	r3, [pc, #408]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a65      	ldr	r2, [pc, #404]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d013      	beq.n	800380c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fe f9b4 	bl	8001b50 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ec:	f7fe f9b0 	bl	8001b50 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	@ 0x64
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e207      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fe:	4b5b      	ldr	r3, [pc, #364]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0xc0>
 800380a:	e014      	b.n	8003836 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fe f9a0 	bl	8001b50 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003814:	f7fe f99c 	bl	8001b50 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	@ 0x64
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e1f3      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003826:	4b51      	ldr	r3, [pc, #324]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0xe8>
 8003832:	e000      	b.n	8003836 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d063      	beq.n	800390a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003842:	4b4a      	ldr	r3, [pc, #296]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00b      	beq.n	8003866 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800384e:	4b47      	ldr	r3, [pc, #284]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003856:	2b08      	cmp	r3, #8
 8003858:	d11c      	bne.n	8003894 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800385a:	4b44      	ldr	r3, [pc, #272]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d116      	bne.n	8003894 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003866:	4b41      	ldr	r3, [pc, #260]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d005      	beq.n	800387e <HAL_RCC_OscConfig+0x152>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d001      	beq.n	800387e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e1c7      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387e:	4b3b      	ldr	r3, [pc, #236]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4937      	ldr	r1, [pc, #220]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003892:	e03a      	b.n	800390a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d020      	beq.n	80038de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800389c:	4b34      	ldr	r3, [pc, #208]	@ (8003970 <HAL_RCC_OscConfig+0x244>)
 800389e:	2201      	movs	r2, #1
 80038a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a2:	f7fe f955 	bl	8001b50 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038aa:	f7fe f951 	bl	8001b50 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e1a8      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038bc:	4b2b      	ldr	r3, [pc, #172]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0f0      	beq.n	80038aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c8:	4b28      	ldr	r3, [pc, #160]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	4925      	ldr	r1, [pc, #148]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]
 80038dc:	e015      	b.n	800390a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038de:	4b24      	ldr	r3, [pc, #144]	@ (8003970 <HAL_RCC_OscConfig+0x244>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fe f934 	bl	8001b50 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ec:	f7fe f930 	bl	8001b50 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e187      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fe:	4b1b      	ldr	r3, [pc, #108]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d036      	beq.n	8003984 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d016      	beq.n	800394c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800391e:	4b15      	ldr	r3, [pc, #84]	@ (8003974 <HAL_RCC_OscConfig+0x248>)
 8003920:	2201      	movs	r2, #1
 8003922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003924:	f7fe f914 	bl	8001b50 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800392c:	f7fe f910 	bl	8001b50 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e167      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393e:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f0      	beq.n	800392c <HAL_RCC_OscConfig+0x200>
 800394a:	e01b      	b.n	8003984 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800394c:	4b09      	ldr	r3, [pc, #36]	@ (8003974 <HAL_RCC_OscConfig+0x248>)
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003952:	f7fe f8fd 	bl	8001b50 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003958:	e00e      	b.n	8003978 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800395a:	f7fe f8f9 	bl	8001b50 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d907      	bls.n	8003978 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e150      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
 800396c:	40023800 	.word	0x40023800
 8003970:	42470000 	.word	0x42470000
 8003974:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003978:	4b88      	ldr	r3, [pc, #544]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 800397a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1ea      	bne.n	800395a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 8097 	beq.w	8003ac0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003992:	2300      	movs	r3, #0
 8003994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003996:	4b81      	ldr	r3, [pc, #516]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10f      	bne.n	80039c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039a2:	2300      	movs	r3, #0
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	4b7d      	ldr	r3, [pc, #500]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039aa:	4a7c      	ldr	r2, [pc, #496]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 80039ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80039b2:	4b7a      	ldr	r3, [pc, #488]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ba:	60bb      	str	r3, [r7, #8]
 80039bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039be:	2301      	movs	r3, #1
 80039c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c2:	4b77      	ldr	r3, [pc, #476]	@ (8003ba0 <HAL_RCC_OscConfig+0x474>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d118      	bne.n	8003a00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ce:	4b74      	ldr	r3, [pc, #464]	@ (8003ba0 <HAL_RCC_OscConfig+0x474>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a73      	ldr	r2, [pc, #460]	@ (8003ba0 <HAL_RCC_OscConfig+0x474>)
 80039d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039da:	f7fe f8b9 	bl	8001b50 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e2:	f7fe f8b5 	bl	8001b50 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e10c      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f4:	4b6a      	ldr	r3, [pc, #424]	@ (8003ba0 <HAL_RCC_OscConfig+0x474>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d106      	bne.n	8003a16 <HAL_RCC_OscConfig+0x2ea>
 8003a08:	4b64      	ldr	r3, [pc, #400]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0c:	4a63      	ldr	r2, [pc, #396]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a14:	e01c      	b.n	8003a50 <HAL_RCC_OscConfig+0x324>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b05      	cmp	r3, #5
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x30c>
 8003a1e:	4b5f      	ldr	r3, [pc, #380]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a22:	4a5e      	ldr	r2, [pc, #376]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a24:	f043 0304 	orr.w	r3, r3, #4
 8003a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a2a:	4b5c      	ldr	r3, [pc, #368]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a2e:	4a5b      	ldr	r2, [pc, #364]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a36:	e00b      	b.n	8003a50 <HAL_RCC_OscConfig+0x324>
 8003a38:	4b58      	ldr	r3, [pc, #352]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a3c:	4a57      	ldr	r2, [pc, #348]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a44:	4b55      	ldr	r3, [pc, #340]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a48:	4a54      	ldr	r2, [pc, #336]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a4a:	f023 0304 	bic.w	r3, r3, #4
 8003a4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d015      	beq.n	8003a84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a58:	f7fe f87a 	bl	8001b50 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a60:	f7fe f876 	bl	8001b50 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e0cb      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a76:	4b49      	ldr	r3, [pc, #292]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0ee      	beq.n	8003a60 <HAL_RCC_OscConfig+0x334>
 8003a82:	e014      	b.n	8003aae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a84:	f7fe f864 	bl	8001b50 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a8a:	e00a      	b.n	8003aa2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a8c:	f7fe f860 	bl	8001b50 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e0b5      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1ee      	bne.n	8003a8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aae:	7dfb      	ldrb	r3, [r7, #23]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d105      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab4:	4b39      	ldr	r3, [pc, #228]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab8:	4a38      	ldr	r2, [pc, #224]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003aba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003abe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80a1 	beq.w	8003c0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aca:	4b34      	ldr	r3, [pc, #208]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d05c      	beq.n	8003b90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d141      	bne.n	8003b62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ade:	4b31      	ldr	r3, [pc, #196]	@ (8003ba4 <HAL_RCC_OscConfig+0x478>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fe f834 	bl	8001b50 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aec:	f7fe f830 	bl	8001b50 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e087      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afe:	4b27      	ldr	r3, [pc, #156]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69da      	ldr	r2, [r3, #28]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	019b      	lsls	r3, r3, #6
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b20:	085b      	lsrs	r3, r3, #1
 8003b22:	3b01      	subs	r3, #1
 8003b24:	041b      	lsls	r3, r3, #16
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2c:	061b      	lsls	r3, r3, #24
 8003b2e:	491b      	ldr	r1, [pc, #108]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b34:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba4 <HAL_RCC_OscConfig+0x478>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3a:	f7fe f809 	bl	8001b50 <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b42:	f7fe f805 	bl	8001b50 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e05c      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b54:	4b11      	ldr	r3, [pc, #68]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0f0      	beq.n	8003b42 <HAL_RCC_OscConfig+0x416>
 8003b60:	e054      	b.n	8003c0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b62:	4b10      	ldr	r3, [pc, #64]	@ (8003ba4 <HAL_RCC_OscConfig+0x478>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b68:	f7fd fff2 	bl	8001b50 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b70:	f7fd ffee 	bl	8001b50 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e045      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b82:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0x444>
 8003b8e:	e03d      	b.n	8003c0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d107      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e038      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	40007000 	.word	0x40007000
 8003ba4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c18 <HAL_RCC_OscConfig+0x4ec>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d028      	beq.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d121      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d11a      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003bd8:	4013      	ands	r3, r2
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d111      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bee:	085b      	lsrs	r3, r3, #1
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d107      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d001      	beq.n	8003c0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40023800 	.word	0x40023800

08003c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0cc      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c30:	4b68      	ldr	r3, [pc, #416]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d90c      	bls.n	8003c58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3e:	4b65      	ldr	r3, [pc, #404]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c46:	4b63      	ldr	r3, [pc, #396]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0b8      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d020      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d005      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c70:	4b59      	ldr	r3, [pc, #356]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	4a58      	ldr	r2, [pc, #352]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c88:	4b53      	ldr	r3, [pc, #332]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	4a52      	ldr	r2, [pc, #328]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c94:	4b50      	ldr	r3, [pc, #320]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	494d      	ldr	r1, [pc, #308]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d044      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d107      	bne.n	8003cca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cba:	4b47      	ldr	r3, [pc, #284]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d119      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e07f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d003      	beq.n	8003cda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d107      	bne.n	8003cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cda:	4b3f      	ldr	r3, [pc, #252]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e06f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cea:	4b3b      	ldr	r3, [pc, #236]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e067      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cfa:	4b37      	ldr	r3, [pc, #220]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f023 0203 	bic.w	r2, r3, #3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	4934      	ldr	r1, [pc, #208]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d0c:	f7fd ff20 	bl	8001b50 <HAL_GetTick>
 8003d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d12:	e00a      	b.n	8003d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d14:	f7fd ff1c 	bl	8001b50 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e04f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 020c 	and.w	r2, r3, #12
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d1eb      	bne.n	8003d14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d3c:	4b25      	ldr	r3, [pc, #148]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d20c      	bcs.n	8003d64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4a:	4b22      	ldr	r3, [pc, #136]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d52:	4b20      	ldr	r3, [pc, #128]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d001      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e032      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d70:	4b19      	ldr	r3, [pc, #100]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4916      	ldr	r1, [pc, #88]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d8e:	4b12      	ldr	r3, [pc, #72]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	490e      	ldr	r1, [pc, #56]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003da2:	f000 f821 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
 8003da6:	4602      	mov	r2, r0
 8003da8:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	490a      	ldr	r1, [pc, #40]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c0>)
 8003db4:	5ccb      	ldrb	r3, [r1, r3]
 8003db6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dba:	4a09      	ldr	r2, [pc, #36]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dbe:	4b09      	ldr	r3, [pc, #36]	@ (8003de4 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fd fe80 	bl	8001ac8 <HAL_InitTick>

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40023c00 	.word	0x40023c00
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	0800c040 	.word	0x0800c040
 8003de0:	20000000 	.word	0x20000000
 8003de4:	20000004 	.word	0x20000004

08003de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dec:	b090      	sub	sp, #64	@ 0x40
 8003dee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003df4:	2300      	movs	r3, #0
 8003df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003df8:	2300      	movs	r3, #0
 8003dfa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e00:	4b59      	ldr	r3, [pc, #356]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 030c 	and.w	r3, r3, #12
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d00d      	beq.n	8003e28 <HAL_RCC_GetSysClockFreq+0x40>
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	f200 80a1 	bhi.w	8003f54 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0x34>
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d003      	beq.n	8003e22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e1a:	e09b      	b.n	8003f54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e1c:	4b53      	ldr	r3, [pc, #332]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0x184>)
 8003e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003e20:	e09b      	b.n	8003f5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e22:	4b53      	ldr	r3, [pc, #332]	@ (8003f70 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e26:	e098      	b.n	8003f5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e28:	4b4f      	ldr	r3, [pc, #316]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e30:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e32:	4b4d      	ldr	r3, [pc, #308]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d028      	beq.n	8003e90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e3e:	4b4a      	ldr	r3, [pc, #296]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	099b      	lsrs	r3, r3, #6
 8003e44:	2200      	movs	r2, #0
 8003e46:	623b      	str	r3, [r7, #32]
 8003e48:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e50:	2100      	movs	r1, #0
 8003e52:	4b47      	ldr	r3, [pc, #284]	@ (8003f70 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e54:	fb03 f201 	mul.w	r2, r3, r1
 8003e58:	2300      	movs	r3, #0
 8003e5a:	fb00 f303 	mul.w	r3, r0, r3
 8003e5e:	4413      	add	r3, r2
 8003e60:	4a43      	ldr	r2, [pc, #268]	@ (8003f70 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e62:	fba0 1202 	umull	r1, r2, r0, r2
 8003e66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e68:	460a      	mov	r2, r1
 8003e6a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003e6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e6e:	4413      	add	r3, r2
 8003e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e74:	2200      	movs	r2, #0
 8003e76:	61bb      	str	r3, [r7, #24]
 8003e78:	61fa      	str	r2, [r7, #28]
 8003e7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003e82:	f7fc fe99 	bl	8000bb8 <__aeabi_uldivmod>
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e8e:	e053      	b.n	8003f38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e90:	4b35      	ldr	r3, [pc, #212]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	099b      	lsrs	r3, r3, #6
 8003e96:	2200      	movs	r2, #0
 8003e98:	613b      	str	r3, [r7, #16]
 8003e9a:	617a      	str	r2, [r7, #20]
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ea2:	f04f 0b00 	mov.w	fp, #0
 8003ea6:	4652      	mov	r2, sl
 8003ea8:	465b      	mov	r3, fp
 8003eaa:	f04f 0000 	mov.w	r0, #0
 8003eae:	f04f 0100 	mov.w	r1, #0
 8003eb2:	0159      	lsls	r1, r3, #5
 8003eb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eb8:	0150      	lsls	r0, r2, #5
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	ebb2 080a 	subs.w	r8, r2, sl
 8003ec2:	eb63 090b 	sbc.w	r9, r3, fp
 8003ec6:	f04f 0200 	mov.w	r2, #0
 8003eca:	f04f 0300 	mov.w	r3, #0
 8003ece:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ed2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ed6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003eda:	ebb2 0408 	subs.w	r4, r2, r8
 8003ede:	eb63 0509 	sbc.w	r5, r3, r9
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	00eb      	lsls	r3, r5, #3
 8003eec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ef0:	00e2      	lsls	r2, r4, #3
 8003ef2:	4614      	mov	r4, r2
 8003ef4:	461d      	mov	r5, r3
 8003ef6:	eb14 030a 	adds.w	r3, r4, sl
 8003efa:	603b      	str	r3, [r7, #0]
 8003efc:	eb45 030b 	adc.w	r3, r5, fp
 8003f00:	607b      	str	r3, [r7, #4]
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f0e:	4629      	mov	r1, r5
 8003f10:	028b      	lsls	r3, r1, #10
 8003f12:	4621      	mov	r1, r4
 8003f14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f18:	4621      	mov	r1, r4
 8003f1a:	028a      	lsls	r2, r1, #10
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	4619      	mov	r1, r3
 8003f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f22:	2200      	movs	r2, #0
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	60fa      	str	r2, [r7, #12]
 8003f28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f2c:	f7fc fe44 	bl	8000bb8 <__aeabi_uldivmod>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4613      	mov	r3, r2
 8003f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f38:	4b0b      	ldr	r3, [pc, #44]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	0c1b      	lsrs	r3, r3, #16
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	3301      	adds	r3, #1
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003f48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f52:	e002      	b.n	8003f5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f54:	4b05      	ldr	r3, [pc, #20]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0x184>)
 8003f56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3740      	adds	r7, #64	@ 0x40
 8003f60:	46bd      	mov	sp, r7
 8003f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f66:	bf00      	nop
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	00f42400 	.word	0x00f42400
 8003f70:	017d7840 	.word	0x017d7840

08003f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f78:	4b03      	ldr	r3, [pc, #12]	@ (8003f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	20000000 	.word	0x20000000

08003f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f90:	f7ff fff0 	bl	8003f74 <HAL_RCC_GetHCLKFreq>
 8003f94:	4602      	mov	r2, r0
 8003f96:	4b05      	ldr	r3, [pc, #20]	@ (8003fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	0a9b      	lsrs	r3, r3, #10
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	4903      	ldr	r1, [pc, #12]	@ (8003fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fa2:	5ccb      	ldrb	r3, [r1, r3]
 8003fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	0800c050 	.word	0x0800c050

08003fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fb8:	f7ff ffdc 	bl	8003f74 <HAL_RCC_GetHCLKFreq>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	4b05      	ldr	r3, [pc, #20]	@ (8003fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	0b5b      	lsrs	r3, r3, #13
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	4903      	ldr	r1, [pc, #12]	@ (8003fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fca:	5ccb      	ldrb	r3, [r1, r3]
 8003fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	0800c050 	.word	0x0800c050

08003fdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e03f      	b.n	800406e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d106      	bne.n	8004008 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7fd fba8 	bl	8001758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2224      	movs	r2, #36	@ 0x24
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800401e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fddf 	bl	8004be4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004034:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695a      	ldr	r2, [r3, #20]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004044:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004054:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b08a      	sub	sp, #40	@ 0x28
 800407a:	af02      	add	r7, sp, #8
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	603b      	str	r3, [r7, #0]
 8004082:	4613      	mov	r3, r2
 8004084:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b20      	cmp	r3, #32
 8004094:	d17c      	bne.n	8004190 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <HAL_UART_Transmit+0x2c>
 800409c:	88fb      	ldrh	r3, [r7, #6]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e075      	b.n	8004192 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_UART_Transmit+0x3e>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e06e      	b.n	8004192 <HAL_UART_Transmit+0x11c>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2221      	movs	r2, #33	@ 0x21
 80040c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ca:	f7fd fd41 	bl	8001b50 <HAL_GetTick>
 80040ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	88fa      	ldrh	r2, [r7, #6]
 80040d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	88fa      	ldrh	r2, [r7, #6]
 80040da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040e4:	d108      	bne.n	80040f8 <HAL_UART_Transmit+0x82>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d104      	bne.n	80040f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	61bb      	str	r3, [r7, #24]
 80040f6:	e003      	b.n	8004100 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040fc:	2300      	movs	r3, #0
 80040fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8004108:	e02a      	b.n	8004160 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2200      	movs	r2, #0
 8004112:	2180      	movs	r1, #128	@ 0x80
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 fb1f 	bl	8004758 <UART_WaitOnFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e036      	b.n	8004192 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10b      	bne.n	8004142 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	461a      	mov	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004138:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	3302      	adds	r3, #2
 800413e:	61bb      	str	r3, [r7, #24]
 8004140:	e007      	b.n	8004152 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	781a      	ldrb	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	3301      	adds	r3, #1
 8004150:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1cf      	bne.n	800410a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2200      	movs	r2, #0
 8004172:	2140      	movs	r1, #64	@ 0x40
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 faef 	bl	8004758 <UART_WaitOnFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e006      	b.n	8004192 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800418c:	2300      	movs	r3, #0
 800418e:	e000      	b.n	8004192 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004190:	2302      	movs	r3, #2
  }
}
 8004192:	4618      	mov	r0, r3
 8004194:	3720      	adds	r7, #32
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	60f8      	str	r0, [r7, #12]
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	4613      	mov	r3, r2
 80041a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b20      	cmp	r3, #32
 80041b2:	d11d      	bne.n	80041f0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <HAL_UART_Receive_IT+0x26>
 80041ba:	88fb      	ldrh	r3, [r7, #6]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e016      	b.n	80041f2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_UART_Receive_IT+0x38>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e00f      	b.n	80041f2 <HAL_UART_Receive_IT+0x58>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041e0:	88fb      	ldrh	r3, [r7, #6]
 80041e2:	461a      	mov	r2, r3
 80041e4:	68b9      	ldr	r1, [r7, #8]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 fb24 	bl	8004834 <UART_Start_Receive_IT>
 80041ec:	4603      	mov	r3, r0
 80041ee:	e000      	b.n	80041f2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80041f0:	2302      	movs	r3, #2
  }
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b0ba      	sub	sp, #232	@ 0xe8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004222:	2300      	movs	r3, #0
 8004224:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004228:	2300      	movs	r3, #0
 800422a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800422e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800423a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10f      	bne.n	8004262 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004246:	f003 0320 	and.w	r3, r3, #32
 800424a:	2b00      	cmp	r3, #0
 800424c:	d009      	beq.n	8004262 <HAL_UART_IRQHandler+0x66>
 800424e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fc07 	bl	8004a6e <UART_Receive_IT>
      return;
 8004260:	e256      	b.n	8004710 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004262:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 80de 	beq.w	8004428 <HAL_UART_IRQHandler+0x22c>
 800426c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d106      	bne.n	8004286 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800427c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 80d1 	beq.w	8004428 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00b      	beq.n	80042aa <HAL_UART_IRQHandler+0xae>
 8004292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800429a:	2b00      	cmp	r3, #0
 800429c:	d005      	beq.n	80042aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a2:	f043 0201 	orr.w	r2, r3, #1
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00b      	beq.n	80042ce <HAL_UART_IRQHandler+0xd2>
 80042b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d005      	beq.n	80042ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c6:	f043 0202 	orr.w	r2, r3, #2
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00b      	beq.n	80042f2 <HAL_UART_IRQHandler+0xf6>
 80042da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	f043 0204 	orr.w	r2, r3, #4
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d011      	beq.n	8004322 <HAL_UART_IRQHandler+0x126>
 80042fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004302:	f003 0320 	and.w	r3, r3, #32
 8004306:	2b00      	cmp	r3, #0
 8004308:	d105      	bne.n	8004316 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800430a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431a:	f043 0208 	orr.w	r2, r3, #8
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 81ed 	beq.w	8004706 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800432c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004330:	f003 0320 	and.w	r3, r3, #32
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <HAL_UART_IRQHandler+0x14e>
 8004338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800433c:	f003 0320 	and.w	r3, r3, #32
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fb92 	bl	8004a6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004354:	2b40      	cmp	r3, #64	@ 0x40
 8004356:	bf0c      	ite	eq
 8004358:	2301      	moveq	r3, #1
 800435a:	2300      	movne	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d103      	bne.n	8004376 <HAL_UART_IRQHandler+0x17a>
 800436e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004372:	2b00      	cmp	r3, #0
 8004374:	d04f      	beq.n	8004416 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fa9a 	bl	80048b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004386:	2b40      	cmp	r3, #64	@ 0x40
 8004388:	d141      	bne.n	800440e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3314      	adds	r3, #20
 8004390:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004398:	e853 3f00 	ldrex	r3, [r3]
 800439c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80043a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3314      	adds	r3, #20
 80043b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80043ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80043c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80043c6:	e841 2300 	strex	r3, r2, [r1]
 80043ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80043ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1d9      	bne.n	800438a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d013      	beq.n	8004406 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e2:	4a7d      	ldr	r2, [pc, #500]	@ (80045d8 <HAL_UART_IRQHandler+0x3dc>)
 80043e4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fd fd61 	bl	8001eb2 <HAL_DMA_Abort_IT>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d016      	beq.n	8004424 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004400:	4610      	mov	r0, r2
 8004402:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004404:	e00e      	b.n	8004424 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f990 	bl	800472c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800440c:	e00a      	b.n	8004424 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f98c 	bl	800472c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004414:	e006      	b.n	8004424 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f988 	bl	800472c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8004422:	e170      	b.n	8004706 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004424:	bf00      	nop
    return;
 8004426:	e16e      	b.n	8004706 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442c:	2b01      	cmp	r3, #1
 800442e:	f040 814a 	bne.w	80046c6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004436:	f003 0310 	and.w	r3, r3, #16
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 8143 	beq.w	80046c6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004444:	f003 0310 	and.w	r3, r3, #16
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 813c 	beq.w	80046c6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800444e:	2300      	movs	r3, #0
 8004450:	60bb      	str	r3, [r7, #8]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	60bb      	str	r3, [r7, #8]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	60bb      	str	r3, [r7, #8]
 8004462:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800446e:	2b40      	cmp	r3, #64	@ 0x40
 8004470:	f040 80b4 	bne.w	80045dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004480:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 8140 	beq.w	800470a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800448e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004492:	429a      	cmp	r2, r3
 8004494:	f080 8139 	bcs.w	800470a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800449e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044aa:	f000 8088 	beq.w	80045be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	330c      	adds	r3, #12
 80044b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044bc:	e853 3f00 	ldrex	r3, [r3]
 80044c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80044c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	330c      	adds	r3, #12
 80044d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80044da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80044e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80044ea:	e841 2300 	strex	r3, r2, [r1]
 80044ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80044f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1d9      	bne.n	80044ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3314      	adds	r3, #20
 8004500:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800450a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3314      	adds	r3, #20
 800451a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800451e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004522:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004526:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800452a:	e841 2300 	strex	r3, r2, [r1]
 800452e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004530:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1e1      	bne.n	80044fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3314      	adds	r3, #20
 800453c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004540:	e853 3f00 	ldrex	r3, [r3]
 8004544:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004546:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004548:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800454c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3314      	adds	r3, #20
 8004556:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800455a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800455c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004560:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004568:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e3      	bne.n	8004536 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2220      	movs	r2, #32
 8004572:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	330c      	adds	r3, #12
 8004582:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004586:	e853 3f00 	ldrex	r3, [r3]
 800458a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800458c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800458e:	f023 0310 	bic.w	r3, r3, #16
 8004592:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	330c      	adds	r3, #12
 800459c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80045a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80045a2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045a8:	e841 2300 	strex	r3, r2, [r1]
 80045ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1e3      	bne.n	800457c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fd fc0a 	bl	8001dd2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	4619      	mov	r1, r3
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f8b6 	bl	8004740 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045d4:	e099      	b.n	800470a <HAL_UART_IRQHandler+0x50e>
 80045d6:	bf00      	nop
 80045d8:	08004977 	.word	0x08004977
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 808b 	beq.w	800470e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80045f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 8086 	beq.w	800470e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	330c      	adds	r3, #12
 8004608:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800460c:	e853 3f00 	ldrex	r3, [r3]
 8004610:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004614:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004618:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	330c      	adds	r3, #12
 8004622:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004626:	647a      	str	r2, [r7, #68]	@ 0x44
 8004628:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800462c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800462e:	e841 2300 	strex	r3, r2, [r1]
 8004632:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1e3      	bne.n	8004602 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3314      	adds	r3, #20
 8004640:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004644:	e853 3f00 	ldrex	r3, [r3]
 8004648:	623b      	str	r3, [r7, #32]
   return(result);
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	f023 0301 	bic.w	r3, r3, #1
 8004650:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3314      	adds	r3, #20
 800465a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800465e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004660:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004662:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004666:	e841 2300 	strex	r3, r2, [r1]
 800466a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800466c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1e3      	bne.n	800463a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2220      	movs	r2, #32
 8004676:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	330c      	adds	r3, #12
 8004686:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	e853 3f00 	ldrex	r3, [r3]
 800468e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 0310 	bic.w	r3, r3, #16
 8004696:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	330c      	adds	r3, #12
 80046a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80046a4:	61fa      	str	r2, [r7, #28]
 80046a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a8:	69b9      	ldr	r1, [r7, #24]
 80046aa:	69fa      	ldr	r2, [r7, #28]
 80046ac:	e841 2300 	strex	r3, r2, [r1]
 80046b0:	617b      	str	r3, [r7, #20]
   return(result);
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e3      	bne.n	8004680 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046bc:	4619      	mov	r1, r3
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f83e 	bl	8004740 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046c4:	e023      	b.n	800470e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d009      	beq.n	80046e6 <HAL_UART_IRQHandler+0x4ea>
 80046d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f95d 	bl	800499e <UART_Transmit_IT>
    return;
 80046e4:	e014      	b.n	8004710 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00e      	beq.n	8004710 <HAL_UART_IRQHandler+0x514>
 80046f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d008      	beq.n	8004710 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f99d 	bl	8004a3e <UART_EndTransmit_IT>
    return;
 8004704:	e004      	b.n	8004710 <HAL_UART_IRQHandler+0x514>
    return;
 8004706:	bf00      	nop
 8004708:	e002      	b.n	8004710 <HAL_UART_IRQHandler+0x514>
      return;
 800470a:	bf00      	nop
 800470c:	e000      	b.n	8004710 <HAL_UART_IRQHandler+0x514>
      return;
 800470e:	bf00      	nop
  }
}
 8004710:	37e8      	adds	r7, #232	@ 0xe8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop

08004718 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	460b      	mov	r3, r1
 800474a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b090      	sub	sp, #64	@ 0x40
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	603b      	str	r3, [r7, #0]
 8004764:	4613      	mov	r3, r2
 8004766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004768:	e050      	b.n	800480c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800476a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800476c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004770:	d04c      	beq.n	800480c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004772:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004774:	2b00      	cmp	r3, #0
 8004776:	d007      	beq.n	8004788 <UART_WaitOnFlagUntilTimeout+0x30>
 8004778:	f7fd f9ea 	bl	8001b50 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004784:	429a      	cmp	r2, r3
 8004786:	d241      	bcs.n	800480c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	330c      	adds	r3, #12
 800478e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004792:	e853 3f00 	ldrex	r3, [r3]
 8004796:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800479e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	330c      	adds	r3, #12
 80047a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80047a8:	637a      	str	r2, [r7, #52]	@ 0x34
 80047aa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80047ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047b0:	e841 2300 	strex	r3, r2, [r1]
 80047b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80047b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1e5      	bne.n	8004788 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3314      	adds	r3, #20
 80047c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	e853 3f00 	ldrex	r3, [r3]
 80047ca:	613b      	str	r3, [r7, #16]
   return(result);
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f023 0301 	bic.w	r3, r3, #1
 80047d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3314      	adds	r3, #20
 80047da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80047dc:	623a      	str	r2, [r7, #32]
 80047de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e0:	69f9      	ldr	r1, [r7, #28]
 80047e2:	6a3a      	ldr	r2, [r7, #32]
 80047e4:	e841 2300 	strex	r3, r2, [r1]
 80047e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1e5      	bne.n	80047bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e00f      	b.n	800482c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	4013      	ands	r3, r2
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	429a      	cmp	r2, r3
 800481a:	bf0c      	ite	eq
 800481c:	2301      	moveq	r3, #1
 800481e:	2300      	movne	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	461a      	mov	r2, r3
 8004824:	79fb      	ldrb	r3, [r7, #7]
 8004826:	429a      	cmp	r2, r3
 8004828:	d09f      	beq.n	800476a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3740      	adds	r7, #64	@ 0x40
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	4613      	mov	r3, r2
 8004840:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	88fa      	ldrh	r2, [r7, #6]
 800484c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	88fa      	ldrh	r2, [r7, #6]
 8004852:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2222      	movs	r2, #34	@ 0x22
 800485e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d007      	beq.n	8004882 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004880:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695a      	ldr	r2, [r3, #20]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0201 	orr.w	r2, r2, #1
 8004890:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 0220 	orr.w	r2, r2, #32
 80048a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b095      	sub	sp, #84	@ 0x54
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	330c      	adds	r3, #12
 80048be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	330c      	adds	r3, #12
 80048d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048d8:	643a      	str	r2, [r7, #64]	@ 0x40
 80048da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048e0:	e841 2300 	strex	r3, r2, [r1]
 80048e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e5      	bne.n	80048b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3314      	adds	r3, #20
 80048f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f023 0301 	bic.w	r3, r3, #1
 8004902:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3314      	adds	r3, #20
 800490a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800490c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800490e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004912:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800491a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e5      	bne.n	80048ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004924:	2b01      	cmp	r3, #1
 8004926:	d119      	bne.n	800495c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	330c      	adds	r3, #12
 800492e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	e853 3f00 	ldrex	r3, [r3]
 8004936:	60bb      	str	r3, [r7, #8]
   return(result);
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f023 0310 	bic.w	r3, r3, #16
 800493e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	330c      	adds	r3, #12
 8004946:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004948:	61ba      	str	r2, [r7, #24]
 800494a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494c:	6979      	ldr	r1, [r7, #20]
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	e841 2300 	strex	r3, r2, [r1]
 8004954:	613b      	str	r3, [r7, #16]
   return(result);
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1e5      	bne.n	8004928 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800496a:	bf00      	nop
 800496c:	3754      	adds	r7, #84	@ 0x54
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004982:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f7ff fecb 	bl	800472c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004996:	bf00      	nop
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800499e:	b480      	push	{r7}
 80049a0:	b085      	sub	sp, #20
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b21      	cmp	r3, #33	@ 0x21
 80049b0:	d13e      	bne.n	8004a30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049ba:	d114      	bne.n	80049e6 <UART_Transmit_IT+0x48>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d110      	bne.n	80049e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	1c9a      	adds	r2, r3, #2
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	621a      	str	r2, [r3, #32]
 80049e4:	e008      	b.n	80049f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	1c59      	adds	r1, r3, #1
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6211      	str	r1, [r2, #32]
 80049f0:	781a      	ldrb	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	4619      	mov	r1, r3
 8004a06:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10f      	bne.n	8004a2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	e000      	b.n	8004a32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a30:	2302      	movs	r3, #2
  }
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b082      	sub	sp, #8
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7ff fe5a 	bl	8004718 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b08c      	sub	sp, #48	@ 0x30
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b22      	cmp	r3, #34	@ 0x22
 8004a80:	f040 80ab 	bne.w	8004bda <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a8c:	d117      	bne.n	8004abe <UART_Receive_IT+0x50>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d113      	bne.n	8004abe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a96:	2300      	movs	r3, #0
 8004a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab6:	1c9a      	adds	r2, r3, #2
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	629a      	str	r2, [r3, #40]	@ 0x28
 8004abc:	e026      	b.n	8004b0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ad0:	d007      	beq.n	8004ae2 <UART_Receive_IT+0x74>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10a      	bne.n	8004af0 <UART_Receive_IT+0x82>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d106      	bne.n	8004af0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aec:	701a      	strb	r2, [r3, #0]
 8004aee:	e008      	b.n	8004b02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	4619      	mov	r1, r3
 8004b1a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d15a      	bne.n	8004bd6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 0220 	bic.w	r2, r2, #32
 8004b2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695a      	ldr	r2, [r3, #20]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0201 	bic.w	r2, r2, #1
 8004b4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d135      	bne.n	8004bcc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	330c      	adds	r3, #12
 8004b6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	e853 3f00 	ldrex	r3, [r3]
 8004b74:	613b      	str	r3, [r7, #16]
   return(result);
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f023 0310 	bic.w	r3, r3, #16
 8004b7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	330c      	adds	r3, #12
 8004b84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b86:	623a      	str	r2, [r7, #32]
 8004b88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8a:	69f9      	ldr	r1, [r7, #28]
 8004b8c:	6a3a      	ldr	r2, [r7, #32]
 8004b8e:	e841 2300 	strex	r3, r2, [r1]
 8004b92:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1e5      	bne.n	8004b66 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	2b10      	cmp	r3, #16
 8004ba6:	d10a      	bne.n	8004bbe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ba8:	2300      	movs	r3, #0
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7ff fdbb 	bl	8004740 <HAL_UARTEx_RxEventCallback>
 8004bca:	e002      	b.n	8004bd2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7fc f96b 	bl	8000ea8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e002      	b.n	8004bdc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	e000      	b.n	8004bdc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004bda:	2302      	movs	r3, #2
  }
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3730      	adds	r7, #48	@ 0x30
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004be8:	b0c0      	sub	sp, #256	@ 0x100
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c00:	68d9      	ldr	r1, [r3, #12]
 8004c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	ea40 0301 	orr.w	r3, r0, r1
 8004c0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c3c:	f021 010c 	bic.w	r1, r1, #12
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c4a:	430b      	orrs	r3, r1
 8004c4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5e:	6999      	ldr	r1, [r3, #24]
 8004c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	ea40 0301 	orr.w	r3, r0, r1
 8004c6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	4b8f      	ldr	r3, [pc, #572]	@ (8004eb0 <UART_SetConfig+0x2cc>)
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d005      	beq.n	8004c84 <UART_SetConfig+0xa0>
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4b8d      	ldr	r3, [pc, #564]	@ (8004eb4 <UART_SetConfig+0x2d0>)
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d104      	bne.n	8004c8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c84:	f7ff f996 	bl	8003fb4 <HAL_RCC_GetPCLK2Freq>
 8004c88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c8c:	e003      	b.n	8004c96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c8e:	f7ff f97d 	bl	8003f8c <HAL_RCC_GetPCLK1Freq>
 8004c92:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ca0:	f040 810c 	bne.w	8004ebc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004cae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004cb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004cb6:	4622      	mov	r2, r4
 8004cb8:	462b      	mov	r3, r5
 8004cba:	1891      	adds	r1, r2, r2
 8004cbc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004cbe:	415b      	adcs	r3, r3
 8004cc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	eb12 0801 	adds.w	r8, r2, r1
 8004ccc:	4629      	mov	r1, r5
 8004cce:	eb43 0901 	adc.w	r9, r3, r1
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ce2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ce6:	4690      	mov	r8, r2
 8004ce8:	4699      	mov	r9, r3
 8004cea:	4623      	mov	r3, r4
 8004cec:	eb18 0303 	adds.w	r3, r8, r3
 8004cf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004cf4:	462b      	mov	r3, r5
 8004cf6:	eb49 0303 	adc.w	r3, r9, r3
 8004cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d0a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d12:	460b      	mov	r3, r1
 8004d14:	18db      	adds	r3, r3, r3
 8004d16:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d18:	4613      	mov	r3, r2
 8004d1a:	eb42 0303 	adc.w	r3, r2, r3
 8004d1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004d24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004d28:	f7fb ff46 	bl	8000bb8 <__aeabi_uldivmod>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4b61      	ldr	r3, [pc, #388]	@ (8004eb8 <UART_SetConfig+0x2d4>)
 8004d32:	fba3 2302 	umull	r2, r3, r3, r2
 8004d36:	095b      	lsrs	r3, r3, #5
 8004d38:	011c      	lsls	r4, r3, #4
 8004d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d44:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d4c:	4642      	mov	r2, r8
 8004d4e:	464b      	mov	r3, r9
 8004d50:	1891      	adds	r1, r2, r2
 8004d52:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d54:	415b      	adcs	r3, r3
 8004d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d5c:	4641      	mov	r1, r8
 8004d5e:	eb12 0a01 	adds.w	sl, r2, r1
 8004d62:	4649      	mov	r1, r9
 8004d64:	eb43 0b01 	adc.w	fp, r3, r1
 8004d68:	f04f 0200 	mov.w	r2, #0
 8004d6c:	f04f 0300 	mov.w	r3, #0
 8004d70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d7c:	4692      	mov	sl, r2
 8004d7e:	469b      	mov	fp, r3
 8004d80:	4643      	mov	r3, r8
 8004d82:	eb1a 0303 	adds.w	r3, sl, r3
 8004d86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d8a:	464b      	mov	r3, r9
 8004d8c:	eb4b 0303 	adc.w	r3, fp, r3
 8004d90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004da0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004da4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004da8:	460b      	mov	r3, r1
 8004daa:	18db      	adds	r3, r3, r3
 8004dac:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dae:	4613      	mov	r3, r2
 8004db0:	eb42 0303 	adc.w	r3, r2, r3
 8004db4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004db6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004dba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004dbe:	f7fb fefb 	bl	8000bb8 <__aeabi_uldivmod>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	4b3b      	ldr	r3, [pc, #236]	@ (8004eb8 <UART_SetConfig+0x2d4>)
 8004dca:	fba3 2301 	umull	r2, r3, r3, r1
 8004dce:	095b      	lsrs	r3, r3, #5
 8004dd0:	2264      	movs	r2, #100	@ 0x64
 8004dd2:	fb02 f303 	mul.w	r3, r2, r3
 8004dd6:	1acb      	subs	r3, r1, r3
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004dde:	4b36      	ldr	r3, [pc, #216]	@ (8004eb8 <UART_SetConfig+0x2d4>)
 8004de0:	fba3 2302 	umull	r2, r3, r3, r2
 8004de4:	095b      	lsrs	r3, r3, #5
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004dec:	441c      	add	r4, r3
 8004dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004df8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004dfc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004e00:	4642      	mov	r2, r8
 8004e02:	464b      	mov	r3, r9
 8004e04:	1891      	adds	r1, r2, r2
 8004e06:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e08:	415b      	adcs	r3, r3
 8004e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004e10:	4641      	mov	r1, r8
 8004e12:	1851      	adds	r1, r2, r1
 8004e14:	6339      	str	r1, [r7, #48]	@ 0x30
 8004e16:	4649      	mov	r1, r9
 8004e18:	414b      	adcs	r3, r1
 8004e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e1c:	f04f 0200 	mov.w	r2, #0
 8004e20:	f04f 0300 	mov.w	r3, #0
 8004e24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004e28:	4659      	mov	r1, fp
 8004e2a:	00cb      	lsls	r3, r1, #3
 8004e2c:	4651      	mov	r1, sl
 8004e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e32:	4651      	mov	r1, sl
 8004e34:	00ca      	lsls	r2, r1, #3
 8004e36:	4610      	mov	r0, r2
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	4642      	mov	r2, r8
 8004e3e:	189b      	adds	r3, r3, r2
 8004e40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e44:	464b      	mov	r3, r9
 8004e46:	460a      	mov	r2, r1
 8004e48:	eb42 0303 	adc.w	r3, r2, r3
 8004e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e5c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e64:	460b      	mov	r3, r1
 8004e66:	18db      	adds	r3, r3, r3
 8004e68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	eb42 0303 	adc.w	r3, r2, r3
 8004e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e7a:	f7fb fe9d 	bl	8000bb8 <__aeabi_uldivmod>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb8 <UART_SetConfig+0x2d4>)
 8004e84:	fba3 1302 	umull	r1, r3, r3, r2
 8004e88:	095b      	lsrs	r3, r3, #5
 8004e8a:	2164      	movs	r1, #100	@ 0x64
 8004e8c:	fb01 f303 	mul.w	r3, r1, r3
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	3332      	adds	r3, #50	@ 0x32
 8004e96:	4a08      	ldr	r2, [pc, #32]	@ (8004eb8 <UART_SetConfig+0x2d4>)
 8004e98:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	f003 0207 	and.w	r2, r3, #7
 8004ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4422      	add	r2, r4
 8004eaa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004eac:	e106      	b.n	80050bc <UART_SetConfig+0x4d8>
 8004eae:	bf00      	nop
 8004eb0:	40011000 	.word	0x40011000
 8004eb4:	40011400 	.word	0x40011400
 8004eb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ec6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004eca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004ece:	4642      	mov	r2, r8
 8004ed0:	464b      	mov	r3, r9
 8004ed2:	1891      	adds	r1, r2, r2
 8004ed4:	6239      	str	r1, [r7, #32]
 8004ed6:	415b      	adcs	r3, r3
 8004ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ede:	4641      	mov	r1, r8
 8004ee0:	1854      	adds	r4, r2, r1
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	eb43 0501 	adc.w	r5, r3, r1
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	00eb      	lsls	r3, r5, #3
 8004ef2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ef6:	00e2      	lsls	r2, r4, #3
 8004ef8:	4614      	mov	r4, r2
 8004efa:	461d      	mov	r5, r3
 8004efc:	4643      	mov	r3, r8
 8004efe:	18e3      	adds	r3, r4, r3
 8004f00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f04:	464b      	mov	r3, r9
 8004f06:	eb45 0303 	adc.w	r3, r5, r3
 8004f0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f1e:	f04f 0200 	mov.w	r2, #0
 8004f22:	f04f 0300 	mov.w	r3, #0
 8004f26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	008b      	lsls	r3, r1, #2
 8004f2e:	4621      	mov	r1, r4
 8004f30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f34:	4621      	mov	r1, r4
 8004f36:	008a      	lsls	r2, r1, #2
 8004f38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f3c:	f7fb fe3c 	bl	8000bb8 <__aeabi_uldivmod>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	4b60      	ldr	r3, [pc, #384]	@ (80050c8 <UART_SetConfig+0x4e4>)
 8004f46:	fba3 2302 	umull	r2, r3, r3, r2
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	011c      	lsls	r4, r3, #4
 8004f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f52:	2200      	movs	r2, #0
 8004f54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f60:	4642      	mov	r2, r8
 8004f62:	464b      	mov	r3, r9
 8004f64:	1891      	adds	r1, r2, r2
 8004f66:	61b9      	str	r1, [r7, #24]
 8004f68:	415b      	adcs	r3, r3
 8004f6a:	61fb      	str	r3, [r7, #28]
 8004f6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f70:	4641      	mov	r1, r8
 8004f72:	1851      	adds	r1, r2, r1
 8004f74:	6139      	str	r1, [r7, #16]
 8004f76:	4649      	mov	r1, r9
 8004f78:	414b      	adcs	r3, r1
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	f04f 0200 	mov.w	r2, #0
 8004f80:	f04f 0300 	mov.w	r3, #0
 8004f84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f88:	4659      	mov	r1, fp
 8004f8a:	00cb      	lsls	r3, r1, #3
 8004f8c:	4651      	mov	r1, sl
 8004f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f92:	4651      	mov	r1, sl
 8004f94:	00ca      	lsls	r2, r1, #3
 8004f96:	4610      	mov	r0, r2
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	4642      	mov	r2, r8
 8004f9e:	189b      	adds	r3, r3, r2
 8004fa0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004fa4:	464b      	mov	r3, r9
 8004fa6:	460a      	mov	r2, r1
 8004fa8:	eb42 0303 	adc.w	r3, r2, r3
 8004fac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004fc8:	4649      	mov	r1, r9
 8004fca:	008b      	lsls	r3, r1, #2
 8004fcc:	4641      	mov	r1, r8
 8004fce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fd2:	4641      	mov	r1, r8
 8004fd4:	008a      	lsls	r2, r1, #2
 8004fd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004fda:	f7fb fded 	bl	8000bb8 <__aeabi_uldivmod>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	4b38      	ldr	r3, [pc, #224]	@ (80050c8 <UART_SetConfig+0x4e4>)
 8004fe6:	fba3 2301 	umull	r2, r3, r3, r1
 8004fea:	095b      	lsrs	r3, r3, #5
 8004fec:	2264      	movs	r2, #100	@ 0x64
 8004fee:	fb02 f303 	mul.w	r3, r2, r3
 8004ff2:	1acb      	subs	r3, r1, r3
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	3332      	adds	r3, #50	@ 0x32
 8004ff8:	4a33      	ldr	r2, [pc, #204]	@ (80050c8 <UART_SetConfig+0x4e4>)
 8004ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffe:	095b      	lsrs	r3, r3, #5
 8005000:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005004:	441c      	add	r4, r3
 8005006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800500a:	2200      	movs	r2, #0
 800500c:	673b      	str	r3, [r7, #112]	@ 0x70
 800500e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005010:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005014:	4642      	mov	r2, r8
 8005016:	464b      	mov	r3, r9
 8005018:	1891      	adds	r1, r2, r2
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	415b      	adcs	r3, r3
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005024:	4641      	mov	r1, r8
 8005026:	1851      	adds	r1, r2, r1
 8005028:	6039      	str	r1, [r7, #0]
 800502a:	4649      	mov	r1, r9
 800502c:	414b      	adcs	r3, r1
 800502e:	607b      	str	r3, [r7, #4]
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800503c:	4659      	mov	r1, fp
 800503e:	00cb      	lsls	r3, r1, #3
 8005040:	4651      	mov	r1, sl
 8005042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005046:	4651      	mov	r1, sl
 8005048:	00ca      	lsls	r2, r1, #3
 800504a:	4610      	mov	r0, r2
 800504c:	4619      	mov	r1, r3
 800504e:	4603      	mov	r3, r0
 8005050:	4642      	mov	r2, r8
 8005052:	189b      	adds	r3, r3, r2
 8005054:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005056:	464b      	mov	r3, r9
 8005058:	460a      	mov	r2, r1
 800505a:	eb42 0303 	adc.w	r3, r2, r3
 800505e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	663b      	str	r3, [r7, #96]	@ 0x60
 800506a:	667a      	str	r2, [r7, #100]	@ 0x64
 800506c:	f04f 0200 	mov.w	r2, #0
 8005070:	f04f 0300 	mov.w	r3, #0
 8005074:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005078:	4649      	mov	r1, r9
 800507a:	008b      	lsls	r3, r1, #2
 800507c:	4641      	mov	r1, r8
 800507e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005082:	4641      	mov	r1, r8
 8005084:	008a      	lsls	r2, r1, #2
 8005086:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800508a:	f7fb fd95 	bl	8000bb8 <__aeabi_uldivmod>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4b0d      	ldr	r3, [pc, #52]	@ (80050c8 <UART_SetConfig+0x4e4>)
 8005094:	fba3 1302 	umull	r1, r3, r3, r2
 8005098:	095b      	lsrs	r3, r3, #5
 800509a:	2164      	movs	r1, #100	@ 0x64
 800509c:	fb01 f303 	mul.w	r3, r1, r3
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	3332      	adds	r3, #50	@ 0x32
 80050a6:	4a08      	ldr	r2, [pc, #32]	@ (80050c8 <UART_SetConfig+0x4e4>)
 80050a8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ac:	095b      	lsrs	r3, r3, #5
 80050ae:	f003 020f 	and.w	r2, r3, #15
 80050b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4422      	add	r2, r4
 80050ba:	609a      	str	r2, [r3, #8]
}
 80050bc:	bf00      	nop
 80050be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80050c2:	46bd      	mov	sp, r7
 80050c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050c8:	51eb851f 	.word	0x51eb851f

080050cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050cc:	b084      	sub	sp, #16
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
 80050d6:	f107 001c 	add.w	r0, r7, #28
 80050da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d122      	bne.n	800512a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80050f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800510c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800510e:	2b01      	cmp	r3, #1
 8005110:	d105      	bne.n	800511e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f001 fbee 	bl	8006900 <USB_CoreReset>
 8005124:	4603      	mov	r3, r0
 8005126:	73fb      	strb	r3, [r7, #15]
 8005128:	e01a      	b.n	8005160 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f001 fbe2 	bl	8006900 <USB_CoreReset>
 800513c:	4603      	mov	r3, r0
 800513e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005140:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005142:	2b00      	cmp	r3, #0
 8005144:	d106      	bne.n	8005154 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	639a      	str	r2, [r3, #56]	@ 0x38
 8005152:	e005      	b.n	8005160 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005158:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005162:	2b01      	cmp	r3, #1
 8005164:	d10b      	bne.n	800517e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f043 0206 	orr.w	r2, r3, #6
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f043 0220 	orr.w	r2, r3, #32
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800517e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800518a:	b004      	add	sp, #16
 800518c:	4770      	bx	lr
	...

08005190 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	4613      	mov	r3, r2
 800519c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800519e:	79fb      	ldrb	r3, [r7, #7]
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d165      	bne.n	8005270 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	4a41      	ldr	r2, [pc, #260]	@ (80052ac <USB_SetTurnaroundTime+0x11c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d906      	bls.n	80051ba <USB_SetTurnaroundTime+0x2a>
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4a40      	ldr	r2, [pc, #256]	@ (80052b0 <USB_SetTurnaroundTime+0x120>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d202      	bcs.n	80051ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80051b4:	230f      	movs	r3, #15
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	e062      	b.n	8005280 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	4a3c      	ldr	r2, [pc, #240]	@ (80052b0 <USB_SetTurnaroundTime+0x120>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d306      	bcc.n	80051d0 <USB_SetTurnaroundTime+0x40>
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	4a3b      	ldr	r2, [pc, #236]	@ (80052b4 <USB_SetTurnaroundTime+0x124>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d202      	bcs.n	80051d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80051ca:	230e      	movs	r3, #14
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	e057      	b.n	8005280 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	4a38      	ldr	r2, [pc, #224]	@ (80052b4 <USB_SetTurnaroundTime+0x124>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d306      	bcc.n	80051e6 <USB_SetTurnaroundTime+0x56>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4a37      	ldr	r2, [pc, #220]	@ (80052b8 <USB_SetTurnaroundTime+0x128>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d202      	bcs.n	80051e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051e0:	230d      	movs	r3, #13
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	e04c      	b.n	8005280 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	4a33      	ldr	r2, [pc, #204]	@ (80052b8 <USB_SetTurnaroundTime+0x128>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d306      	bcc.n	80051fc <USB_SetTurnaroundTime+0x6c>
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	4a32      	ldr	r2, [pc, #200]	@ (80052bc <USB_SetTurnaroundTime+0x12c>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d802      	bhi.n	80051fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80051f6:	230c      	movs	r3, #12
 80051f8:	617b      	str	r3, [r7, #20]
 80051fa:	e041      	b.n	8005280 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	4a2f      	ldr	r2, [pc, #188]	@ (80052bc <USB_SetTurnaroundTime+0x12c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d906      	bls.n	8005212 <USB_SetTurnaroundTime+0x82>
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	4a2e      	ldr	r2, [pc, #184]	@ (80052c0 <USB_SetTurnaroundTime+0x130>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d802      	bhi.n	8005212 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800520c:	230b      	movs	r3, #11
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	e036      	b.n	8005280 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	4a2a      	ldr	r2, [pc, #168]	@ (80052c0 <USB_SetTurnaroundTime+0x130>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d906      	bls.n	8005228 <USB_SetTurnaroundTime+0x98>
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	4a29      	ldr	r2, [pc, #164]	@ (80052c4 <USB_SetTurnaroundTime+0x134>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d802      	bhi.n	8005228 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005222:	230a      	movs	r3, #10
 8005224:	617b      	str	r3, [r7, #20]
 8005226:	e02b      	b.n	8005280 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	4a26      	ldr	r2, [pc, #152]	@ (80052c4 <USB_SetTurnaroundTime+0x134>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d906      	bls.n	800523e <USB_SetTurnaroundTime+0xae>
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4a25      	ldr	r2, [pc, #148]	@ (80052c8 <USB_SetTurnaroundTime+0x138>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d202      	bcs.n	800523e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005238:	2309      	movs	r3, #9
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	e020      	b.n	8005280 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	4a21      	ldr	r2, [pc, #132]	@ (80052c8 <USB_SetTurnaroundTime+0x138>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d306      	bcc.n	8005254 <USB_SetTurnaroundTime+0xc4>
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	4a20      	ldr	r2, [pc, #128]	@ (80052cc <USB_SetTurnaroundTime+0x13c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d802      	bhi.n	8005254 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800524e:	2308      	movs	r3, #8
 8005250:	617b      	str	r3, [r7, #20]
 8005252:	e015      	b.n	8005280 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4a1d      	ldr	r2, [pc, #116]	@ (80052cc <USB_SetTurnaroundTime+0x13c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d906      	bls.n	800526a <USB_SetTurnaroundTime+0xda>
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	4a1c      	ldr	r2, [pc, #112]	@ (80052d0 <USB_SetTurnaroundTime+0x140>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d202      	bcs.n	800526a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005264:	2307      	movs	r3, #7
 8005266:	617b      	str	r3, [r7, #20]
 8005268:	e00a      	b.n	8005280 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800526a:	2306      	movs	r3, #6
 800526c:	617b      	str	r3, [r7, #20]
 800526e:	e007      	b.n	8005280 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005270:	79fb      	ldrb	r3, [r7, #7]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d102      	bne.n	800527c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005276:	2309      	movs	r3, #9
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	e001      	b.n	8005280 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800527c:	2309      	movs	r3, #9
 800527e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	029b      	lsls	r3, r3, #10
 8005294:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005298:	431a      	orrs	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	371c      	adds	r7, #28
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	00d8acbf 	.word	0x00d8acbf
 80052b0:	00e4e1c0 	.word	0x00e4e1c0
 80052b4:	00f42400 	.word	0x00f42400
 80052b8:	01067380 	.word	0x01067380
 80052bc:	011a499f 	.word	0x011a499f
 80052c0:	01312cff 	.word	0x01312cff
 80052c4:	014ca43f 	.word	0x014ca43f
 80052c8:	016e3600 	.word	0x016e3600
 80052cc:	01a6ab1f 	.word	0x01a6ab1f
 80052d0:	01e84800 	.word	0x01e84800

080052d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f043 0201 	orr.w	r2, r3, #1
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f023 0201 	bic.w	r2, r3, #1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	460b      	mov	r3, r1
 8005322:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d115      	bne.n	8005366 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005346:	2001      	movs	r0, #1
 8005348:	f7fc fc0e 	bl	8001b68 <HAL_Delay>
      ms++;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	3301      	adds	r3, #1
 8005350:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f001 fa45 	bl	80067e2 <USB_GetMode>
 8005358:	4603      	mov	r3, r0
 800535a:	2b01      	cmp	r3, #1
 800535c:	d01e      	beq.n	800539c <USB_SetCurrentMode+0x84>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2b31      	cmp	r3, #49	@ 0x31
 8005362:	d9f0      	bls.n	8005346 <USB_SetCurrentMode+0x2e>
 8005364:	e01a      	b.n	800539c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005366:	78fb      	ldrb	r3, [r7, #3]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d115      	bne.n	8005398 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005378:	2001      	movs	r0, #1
 800537a:	f7fc fbf5 	bl	8001b68 <HAL_Delay>
      ms++;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	3301      	adds	r3, #1
 8005382:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f001 fa2c 	bl	80067e2 <USB_GetMode>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d005      	beq.n	800539c <USB_SetCurrentMode+0x84>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b31      	cmp	r3, #49	@ 0x31
 8005394:	d9f0      	bls.n	8005378 <USB_SetCurrentMode+0x60>
 8005396:	e001      	b.n	800539c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e005      	b.n	80053a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b32      	cmp	r3, #50	@ 0x32
 80053a0:	d101      	bne.n	80053a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e000      	b.n	80053a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053b0:	b084      	sub	sp, #16
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b086      	sub	sp, #24
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80053be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053ca:	2300      	movs	r3, #0
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	e009      	b.n	80053e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	3340      	adds	r3, #64	@ 0x40
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	2200      	movs	r2, #0
 80053dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	3301      	adds	r3, #1
 80053e2:	613b      	str	r3, [r7, #16]
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	2b0e      	cmp	r3, #14
 80053e8:	d9f2      	bls.n	80053d0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d11c      	bne.n	800542a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053fe:	f043 0302 	orr.w	r3, r3, #2
 8005402:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005408:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005414:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005420:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	639a      	str	r2, [r3, #56]	@ 0x38
 8005428:	e00b      	b.n	8005442 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800542e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800543a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005448:	461a      	mov	r2, r3
 800544a:	2300      	movs	r3, #0
 800544c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005454:	4619      	mov	r1, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800545c:	461a      	mov	r2, r3
 800545e:	680b      	ldr	r3, [r1, #0]
 8005460:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005464:	2b01      	cmp	r3, #1
 8005466:	d10c      	bne.n	8005482 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800546a:	2b00      	cmp	r3, #0
 800546c:	d104      	bne.n	8005478 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800546e:	2100      	movs	r1, #0
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f965 	bl	8005740 <USB_SetDevSpeed>
 8005476:	e008      	b.n	800548a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005478:	2101      	movs	r1, #1
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f960 	bl	8005740 <USB_SetDevSpeed>
 8005480:	e003      	b.n	800548a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005482:	2103      	movs	r1, #3
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f95b 	bl	8005740 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800548a:	2110      	movs	r1, #16
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f8f3 	bl	8005678 <USB_FlushTxFifo>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f91f 	bl	80056e0 <USB_FlushRxFifo>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054b2:	461a      	mov	r2, r3
 80054b4:	2300      	movs	r3, #0
 80054b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054be:	461a      	mov	r2, r3
 80054c0:	2300      	movs	r3, #0
 80054c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054ca:	461a      	mov	r2, r3
 80054cc:	2300      	movs	r3, #0
 80054ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054d0:	2300      	movs	r3, #0
 80054d2:	613b      	str	r3, [r7, #16]
 80054d4:	e043      	b.n	800555e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054ec:	d118      	bne.n	8005520 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10a      	bne.n	800550a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005500:	461a      	mov	r2, r3
 8005502:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005506:	6013      	str	r3, [r2, #0]
 8005508:	e013      	b.n	8005532 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	4413      	add	r3, r2
 8005512:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005516:	461a      	mov	r2, r3
 8005518:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800551c:	6013      	str	r3, [r2, #0]
 800551e:	e008      	b.n	8005532 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800552c:	461a      	mov	r2, r3
 800552e:	2300      	movs	r3, #0
 8005530:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4413      	add	r3, r2
 800553a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800553e:	461a      	mov	r2, r3
 8005540:	2300      	movs	r3, #0
 8005542:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005550:	461a      	mov	r2, r3
 8005552:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005556:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	3301      	adds	r3, #1
 800555c:	613b      	str	r3, [r7, #16]
 800555e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	429a      	cmp	r2, r3
 8005564:	d3b7      	bcc.n	80054d6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005566:	2300      	movs	r3, #0
 8005568:	613b      	str	r3, [r7, #16]
 800556a:	e043      	b.n	80055f4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800557e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005582:	d118      	bne.n	80055b6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10a      	bne.n	80055a0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005596:	461a      	mov	r2, r3
 8005598:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	e013      	b.n	80055c8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ac:	461a      	mov	r2, r3
 80055ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80055b2:	6013      	str	r3, [r2, #0]
 80055b4:	e008      	b.n	80055c8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055c2:	461a      	mov	r2, r3
 80055c4:	2300      	movs	r3, #0
 80055c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055d4:	461a      	mov	r2, r3
 80055d6:	2300      	movs	r3, #0
 80055d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055e6:	461a      	mov	r2, r3
 80055e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80055ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	3301      	adds	r3, #1
 80055f2:	613b      	str	r3, [r7, #16]
 80055f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d3b7      	bcc.n	800556c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800560a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800560e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800561c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800561e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005620:	2b00      	cmp	r3, #0
 8005622:	d105      	bne.n	8005630 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	f043 0210 	orr.w	r2, r3, #16
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	699a      	ldr	r2, [r3, #24]
 8005634:	4b0f      	ldr	r3, [pc, #60]	@ (8005674 <USB_DevInit+0x2c4>)
 8005636:	4313      	orrs	r3, r2
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800563c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800563e:	2b00      	cmp	r3, #0
 8005640:	d005      	beq.n	800564e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	f043 0208 	orr.w	r2, r3, #8
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800564e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005650:	2b01      	cmp	r3, #1
 8005652:	d107      	bne.n	8005664 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800565c:	f043 0304 	orr.w	r3, r3, #4
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005664:	7dfb      	ldrb	r3, [r7, #23]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3718      	adds	r7, #24
 800566a:	46bd      	mov	sp, r7
 800566c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005670:	b004      	add	sp, #16
 8005672:	4770      	bx	lr
 8005674:	803c3800 	.word	0x803c3800

08005678 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005682:	2300      	movs	r3, #0
 8005684:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3301      	adds	r3, #1
 800568a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4a13      	ldr	r2, [pc, #76]	@ (80056dc <USB_FlushTxFifo+0x64>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d901      	bls.n	8005698 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e01b      	b.n	80056d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	daf2      	bge.n	8005686 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	019b      	lsls	r3, r3, #6
 80056a8:	f043 0220 	orr.w	r2, r3, #32
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3301      	adds	r3, #1
 80056b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4a08      	ldr	r2, [pc, #32]	@ (80056dc <USB_FlushTxFifo+0x64>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d901      	bls.n	80056c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e006      	b.n	80056d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f003 0320 	and.w	r3, r3, #32
 80056ca:	2b20      	cmp	r3, #32
 80056cc:	d0f0      	beq.n	80056b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	00030d40 	.word	0x00030d40

080056e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	3301      	adds	r3, #1
 80056f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4a11      	ldr	r2, [pc, #68]	@ (800573c <USB_FlushRxFifo+0x5c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d901      	bls.n	80056fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e018      	b.n	8005730 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	daf2      	bge.n	80056ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005706:	2300      	movs	r3, #0
 8005708:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2210      	movs	r2, #16
 800570e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3301      	adds	r3, #1
 8005714:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4a08      	ldr	r2, [pc, #32]	@ (800573c <USB_FlushRxFifo+0x5c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d901      	bls.n	8005722 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e006      	b.n	8005730 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f003 0310 	and.w	r3, r3, #16
 800572a:	2b10      	cmp	r3, #16
 800572c:	d0f0      	beq.n	8005710 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	00030d40 	.word	0x00030d40

08005740 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	460b      	mov	r3, r1
 800574a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	78fb      	ldrb	r3, [r7, #3]
 800575a:	68f9      	ldr	r1, [r7, #12]
 800575c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005760:	4313      	orrs	r3, r2
 8005762:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005772:	b480      	push	{r7}
 8005774:	b087      	sub	sp, #28
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 0306 	and.w	r3, r3, #6
 800578a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d102      	bne.n	8005798 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005792:	2300      	movs	r3, #0
 8005794:	75fb      	strb	r3, [r7, #23]
 8005796:	e00a      	b.n	80057ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2b02      	cmp	r3, #2
 800579c:	d002      	beq.n	80057a4 <USB_GetDevSpeed+0x32>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2b06      	cmp	r3, #6
 80057a2:	d102      	bne.n	80057aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80057a4:	2302      	movs	r3, #2
 80057a6:	75fb      	strb	r3, [r7, #23]
 80057a8:	e001      	b.n	80057ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80057aa:	230f      	movs	r3, #15
 80057ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80057ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	371c      	adds	r7, #28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	785b      	ldrb	r3, [r3, #1]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d13a      	bne.n	800584e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057de:	69da      	ldr	r2, [r3, #28]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	f003 030f 	and.w	r3, r3, #15
 80057e8:	2101      	movs	r1, #1
 80057ea:	fa01 f303 	lsl.w	r3, r1, r3
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	68f9      	ldr	r1, [r7, #12]
 80057f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057f6:	4313      	orrs	r3, r2
 80057f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d155      	bne.n	80058bc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	791b      	ldrb	r3, [r3, #4]
 800582a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800582c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	059b      	lsls	r3, r3, #22
 8005832:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005834:	4313      	orrs	r3, r2
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	0151      	lsls	r1, r2, #5
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	440a      	add	r2, r1
 800583e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005842:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005846:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800584a:	6013      	str	r3, [r2, #0]
 800584c:	e036      	b.n	80058bc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005854:	69da      	ldr	r2, [r3, #28]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	f003 030f 	and.w	r3, r3, #15
 800585e:	2101      	movs	r1, #1
 8005860:	fa01 f303 	lsl.w	r3, r1, r3
 8005864:	041b      	lsls	r3, r3, #16
 8005866:	68f9      	ldr	r1, [r7, #12]
 8005868:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800586c:	4313      	orrs	r3, r2
 800586e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d11a      	bne.n	80058bc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	791b      	ldrb	r3, [r3, #4]
 80058a0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058a2:	430b      	orrs	r3, r1
 80058a4:	4313      	orrs	r3, r2
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	0151      	lsls	r1, r2, #5
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	440a      	add	r2, r1
 80058ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058ba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
	...

080058cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	785b      	ldrb	r3, [r3, #1]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d161      	bne.n	80059ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058fe:	d11f      	bne.n	8005940 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	0151      	lsls	r1, r2, #5
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	440a      	add	r2, r1
 8005916:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800591a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800591e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4413      	add	r3, r2
 8005928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	0151      	lsls	r1, r2, #5
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	440a      	add	r2, r1
 8005936:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800593a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800593e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005946:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	f003 030f 	and.w	r3, r3, #15
 8005950:	2101      	movs	r1, #1
 8005952:	fa01 f303 	lsl.w	r3, r1, r3
 8005956:	b29b      	uxth	r3, r3
 8005958:	43db      	mvns	r3, r3
 800595a:	68f9      	ldr	r1, [r7, #12]
 800595c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005960:	4013      	ands	r3, r2
 8005962:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800596a:	69da      	ldr	r2, [r3, #28]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	f003 030f 	and.w	r3, r3, #15
 8005974:	2101      	movs	r1, #1
 8005976:	fa01 f303 	lsl.w	r3, r1, r3
 800597a:	b29b      	uxth	r3, r3
 800597c:	43db      	mvns	r3, r3
 800597e:	68f9      	ldr	r1, [r7, #12]
 8005980:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005984:	4013      	ands	r3, r2
 8005986:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	0159      	lsls	r1, r3, #5
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	440b      	add	r3, r1
 800599e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059a2:	4619      	mov	r1, r3
 80059a4:	4b35      	ldr	r3, [pc, #212]	@ (8005a7c <USB_DeactivateEndpoint+0x1b0>)
 80059a6:	4013      	ands	r3, r2
 80059a8:	600b      	str	r3, [r1, #0]
 80059aa:	e060      	b.n	8005a6e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059c2:	d11f      	bne.n	8005a04 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	0151      	lsls	r1, r2, #5
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	440a      	add	r2, r1
 80059da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80059e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	0151      	lsls	r1, r2, #5
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	440a      	add	r2, r1
 80059fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	f003 030f 	and.w	r3, r3, #15
 8005a14:	2101      	movs	r1, #1
 8005a16:	fa01 f303 	lsl.w	r3, r1, r3
 8005a1a:	041b      	lsls	r3, r3, #16
 8005a1c:	43db      	mvns	r3, r3
 8005a1e:	68f9      	ldr	r1, [r7, #12]
 8005a20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a24:	4013      	ands	r3, r2
 8005a26:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a2e:	69da      	ldr	r2, [r3, #28]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	f003 030f 	and.w	r3, r3, #15
 8005a38:	2101      	movs	r1, #1
 8005a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3e:	041b      	lsls	r3, r3, #16
 8005a40:	43db      	mvns	r3, r3
 8005a42:	68f9      	ldr	r1, [r7, #12]
 8005a44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a48:	4013      	ands	r3, r2
 8005a4a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	0159      	lsls	r1, r3, #5
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	440b      	add	r3, r1
 8005a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a66:	4619      	mov	r1, r3
 8005a68:	4b05      	ldr	r3, [pc, #20]	@ (8005a80 <USB_DeactivateEndpoint+0x1b4>)
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	ec337800 	.word	0xec337800
 8005a80:	eff37800 	.word	0xeff37800

08005a84 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08a      	sub	sp, #40	@ 0x28
 8005a88:	af02      	add	r7, sp, #8
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	785b      	ldrb	r3, [r3, #1]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	f040 815c 	bne.w	8005d5e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d132      	bne.n	8005b14 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	0151      	lsls	r1, r2, #5
 8005ac0:	69fa      	ldr	r2, [r7, #28]
 8005ac2:	440a      	add	r2, r1
 8005ac4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ac8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005acc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005ad0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005af0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	0151      	lsls	r1, r2, #5
 8005b04:	69fa      	ldr	r2, [r7, #28]
 8005b06:	440a      	add	r2, r1
 8005b08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b0c:	0cdb      	lsrs	r3, r3, #19
 8005b0e:	04db      	lsls	r3, r3, #19
 8005b10:	6113      	str	r3, [r2, #16]
 8005b12:	e074      	b.n	8005bfe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	0151      	lsls	r1, r2, #5
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	440a      	add	r2, r1
 8005b2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b2e:	0cdb      	lsrs	r3, r3, #19
 8005b30:	04db      	lsls	r3, r3, #19
 8005b32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	0151      	lsls	r1, r2, #5
 8005b46:	69fa      	ldr	r2, [r7, #28]
 8005b48:	440a      	add	r2, r1
 8005b4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b4e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005b52:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005b56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b64:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	6999      	ldr	r1, [r3, #24]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	440b      	add	r3, r1
 8005b70:	1e59      	subs	r1, r3, #1
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b7a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b7c:	4b9d      	ldr	r3, [pc, #628]	@ (8005df4 <USB_EPStartXfer+0x370>)
 8005b7e:	400b      	ands	r3, r1
 8005b80:	69b9      	ldr	r1, [r7, #24]
 8005b82:	0148      	lsls	r0, r1, #5
 8005b84:	69f9      	ldr	r1, [r7, #28]
 8005b86:	4401      	add	r1, r0
 8005b88:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b9c:	691a      	ldr	r2, [r3, #16]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ba6:	69b9      	ldr	r1, [r7, #24]
 8005ba8:	0148      	lsls	r0, r1, #5
 8005baa:	69f9      	ldr	r1, [r7, #28]
 8005bac:	4401      	add	r1, r0
 8005bae:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	791b      	ldrb	r3, [r3, #4]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d11f      	bne.n	8005bfe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	0151      	lsls	r1, r2, #5
 8005bd0:	69fa      	ldr	r2, [r7, #28]
 8005bd2:	440a      	add	r2, r1
 8005bd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bd8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005bdc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	0151      	lsls	r1, r2, #5
 8005bf0:	69fa      	ldr	r2, [r7, #28]
 8005bf2:	440a      	add	r2, r1
 8005bf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bf8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005bfc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005bfe:	79fb      	ldrb	r3, [r7, #7]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d14b      	bne.n	8005c9c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d009      	beq.n	8005c20 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c18:	461a      	mov	r2, r3
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	791b      	ldrb	r3, [r3, #4]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d128      	bne.n	8005c7a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d110      	bne.n	8005c5a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	0151      	lsls	r1, r2, #5
 8005c4a:	69fa      	ldr	r2, [r7, #28]
 8005c4c:	440a      	add	r2, r1
 8005c4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c52:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005c56:	6013      	str	r3, [r2, #0]
 8005c58:	e00f      	b.n	8005c7a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	0151      	lsls	r1, r2, #5
 8005c6c:	69fa      	ldr	r2, [r7, #28]
 8005c6e:	440a      	add	r2, r1
 8005c70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c78:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	0151      	lsls	r1, r2, #5
 8005c8c:	69fa      	ldr	r2, [r7, #28]
 8005c8e:	440a      	add	r2, r1
 8005c90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c94:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	e133      	b.n	8005f04 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	0151      	lsls	r1, r2, #5
 8005cae:	69fa      	ldr	r2, [r7, #28]
 8005cb0:	440a      	add	r2, r1
 8005cb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cb6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005cba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	791b      	ldrb	r3, [r3, #4]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d015      	beq.n	8005cf0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 811b 	beq.w	8005f04 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	f003 030f 	and.w	r3, r3, #15
 8005cde:	2101      	movs	r1, #1
 8005ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce4:	69f9      	ldr	r1, [r7, #28]
 8005ce6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cea:	4313      	orrs	r3, r2
 8005cec:	634b      	str	r3, [r1, #52]	@ 0x34
 8005cee:	e109      	b.n	8005f04 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d110      	bne.n	8005d22 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	0151      	lsls	r1, r2, #5
 8005d12:	69fa      	ldr	r2, [r7, #28]
 8005d14:	440a      	add	r2, r1
 8005d16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d1a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	e00f      	b.n	8005d42 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	69fa      	ldr	r2, [r7, #28]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d40:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	6919      	ldr	r1, [r3, #16]
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	781a      	ldrb	r2, [r3, #0]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	b298      	uxth	r0, r3
 8005d50:	79fb      	ldrb	r3, [r7, #7]
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	4603      	mov	r3, r0
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f000 fade 	bl	8006318 <USB_WritePacket>
 8005d5c:	e0d2      	b.n	8005f04 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	69ba      	ldr	r2, [r7, #24]
 8005d6e:	0151      	lsls	r1, r2, #5
 8005d70:	69fa      	ldr	r2, [r7, #28]
 8005d72:	440a      	add	r2, r1
 8005d74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d78:	0cdb      	lsrs	r3, r3, #19
 8005d7a:	04db      	lsls	r3, r3, #19
 8005d7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	0151      	lsls	r1, r2, #5
 8005d90:	69fa      	ldr	r2, [r7, #28]
 8005d92:	440a      	add	r2, r1
 8005d94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d98:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005d9c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005da0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d126      	bne.n	8005df8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005db6:	691a      	ldr	r2, [r3, #16]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dc0:	69b9      	ldr	r1, [r7, #24]
 8005dc2:	0148      	lsls	r0, r1, #5
 8005dc4:	69f9      	ldr	r1, [r7, #28]
 8005dc6:	4401      	add	r1, r0
 8005dc8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	0151      	lsls	r1, r2, #5
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	440a      	add	r2, r1
 8005de6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005dee:	6113      	str	r3, [r2, #16]
 8005df0:	e03a      	b.n	8005e68 <USB_EPStartXfer+0x3e4>
 8005df2:	bf00      	nop
 8005df4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	699a      	ldr	r2, [r3, #24]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	4413      	add	r3, r2
 8005e02:	1e5a      	subs	r2, r3, #1
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	8afa      	ldrh	r2, [r7, #22]
 8005e14:	fb03 f202 	mul.w	r2, r3, r2
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e28:	691a      	ldr	r2, [r3, #16]
 8005e2a:	8afb      	ldrh	r3, [r7, #22]
 8005e2c:	04d9      	lsls	r1, r3, #19
 8005e2e:	4b38      	ldr	r3, [pc, #224]	@ (8005f10 <USB_EPStartXfer+0x48c>)
 8005e30:	400b      	ands	r3, r1
 8005e32:	69b9      	ldr	r1, [r7, #24]
 8005e34:	0148      	lsls	r0, r1, #5
 8005e36:	69f9      	ldr	r1, [r7, #28]
 8005e38:	4401      	add	r1, r0
 8005e3a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e58:	69b9      	ldr	r1, [r7, #24]
 8005e5a:	0148      	lsls	r0, r1, #5
 8005e5c:	69f9      	ldr	r1, [r7, #28]
 8005e5e:	4401      	add	r1, r0
 8005e60:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005e64:	4313      	orrs	r3, r2
 8005e66:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e68:	79fb      	ldrb	r3, [r7, #7]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d10d      	bne.n	8005e8a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d009      	beq.n	8005e8a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	6919      	ldr	r1, [r3, #16]
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e86:	460a      	mov	r2, r1
 8005e88:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	791b      	ldrb	r3, [r3, #4]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d128      	bne.n	8005ee4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d110      	bne.n	8005ec4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	69ba      	ldr	r2, [r7, #24]
 8005eb2:	0151      	lsls	r1, r2, #5
 8005eb4:	69fa      	ldr	r2, [r7, #28]
 8005eb6:	440a      	add	r2, r1
 8005eb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ebc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ec0:	6013      	str	r3, [r2, #0]
 8005ec2:	e00f      	b.n	8005ee4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	0151      	lsls	r1, r2, #5
 8005ed6:	69fa      	ldr	r2, [r7, #28]
 8005ed8:	440a      	add	r2, r1
 8005eda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ede:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ee2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	69fa      	ldr	r2, [r7, #28]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005efe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005f02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3720      	adds	r7, #32
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	1ff80000 	.word	0x1ff80000

08005f14 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	785b      	ldrb	r3, [r3, #1]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	f040 80ce 	bne.w	80060d2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d132      	bne.n	8005fa4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	0151      	lsls	r1, r2, #5
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	440a      	add	r2, r1
 8005f54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f58:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005f5c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005f60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	0151      	lsls	r1, r2, #5
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	440a      	add	r2, r1
 8005f78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	0151      	lsls	r1, r2, #5
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	440a      	add	r2, r1
 8005f98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f9c:	0cdb      	lsrs	r3, r3, #19
 8005f9e:	04db      	lsls	r3, r3, #19
 8005fa0:	6113      	str	r3, [r2, #16]
 8005fa2:	e04e      	b.n	8006042 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	0151      	lsls	r1, r2, #5
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	440a      	add	r2, r1
 8005fba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fbe:	0cdb      	lsrs	r3, r3, #19
 8005fc0:	04db      	lsls	r3, r3, #19
 8005fc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	0151      	lsls	r1, r2, #5
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	440a      	add	r2, r1
 8005fda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fde:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005fe2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005fe6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	699a      	ldr	r2, [r3, #24]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d903      	bls.n	8005ffc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	0151      	lsls	r1, r2, #5
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	440a      	add	r2, r1
 8006012:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006016:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800601a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006028:	691a      	ldr	r2, [r3, #16]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006032:	6939      	ldr	r1, [r7, #16]
 8006034:	0148      	lsls	r0, r1, #5
 8006036:	6979      	ldr	r1, [r7, #20]
 8006038:	4401      	add	r1, r0
 800603a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800603e:	4313      	orrs	r3, r2
 8006040:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006042:	79fb      	ldrb	r3, [r7, #7]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d11e      	bne.n	8006086 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d009      	beq.n	8006064 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	4413      	add	r3, r2
 8006058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800605c:	461a      	mov	r2, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	4413      	add	r3, r2
 800606c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	0151      	lsls	r1, r2, #5
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	440a      	add	r2, r1
 800607a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800607e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006082:	6013      	str	r3, [r2, #0]
 8006084:	e097      	b.n	80061b6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	4413      	add	r3, r2
 800608e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	0151      	lsls	r1, r2, #5
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	440a      	add	r2, r1
 800609c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060a0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80060a4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 8083 	beq.w	80061b6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	f003 030f 	and.w	r3, r3, #15
 80060c0:	2101      	movs	r1, #1
 80060c2:	fa01 f303 	lsl.w	r3, r1, r3
 80060c6:	6979      	ldr	r1, [r7, #20]
 80060c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060cc:	4313      	orrs	r3, r2
 80060ce:	634b      	str	r3, [r1, #52]	@ 0x34
 80060d0:	e071      	b.n	80061b6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	0151      	lsls	r1, r2, #5
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	440a      	add	r2, r1
 80060e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060ec:	0cdb      	lsrs	r3, r3, #19
 80060ee:	04db      	lsls	r3, r3, #19
 80060f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	0151      	lsls	r1, r2, #5
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	440a      	add	r2, r1
 8006108:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800610c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006110:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006114:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	0151      	lsls	r1, r2, #5
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	440a      	add	r2, r1
 8006144:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006148:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800614c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	4413      	add	r3, r2
 8006156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800615a:	691a      	ldr	r2, [r3, #16]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006164:	6939      	ldr	r1, [r7, #16]
 8006166:	0148      	lsls	r0, r1, #5
 8006168:	6979      	ldr	r1, [r7, #20]
 800616a:	4401      	add	r1, r0
 800616c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006170:	4313      	orrs	r3, r2
 8006172:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006174:	79fb      	ldrb	r3, [r7, #7]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d10d      	bne.n	8006196 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d009      	beq.n	8006196 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	6919      	ldr	r1, [r3, #16]
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006192:	460a      	mov	r2, r1
 8006194:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	0151      	lsls	r1, r2, #5
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	440a      	add	r2, r1
 80061ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061b0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80061b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	371c      	adds	r7, #28
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061ce:	2300      	movs	r3, #0
 80061d0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80061d2:	2300      	movs	r3, #0
 80061d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	785b      	ldrb	r3, [r3, #1]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d14a      	bne.n	8006278 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061fa:	f040 8086 	bne.w	800630a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	7812      	ldrb	r2, [r2, #0]
 8006212:	0151      	lsls	r1, r2, #5
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	440a      	add	r2, r1
 8006218:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800621c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006220:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	7812      	ldrb	r2, [r2, #0]
 8006236:	0151      	lsls	r1, r2, #5
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	440a      	add	r2, r1
 800623c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006240:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006244:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3301      	adds	r3, #1
 800624a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006252:	4293      	cmp	r3, r2
 8006254:	d902      	bls.n	800625c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	75fb      	strb	r3, [r7, #23]
          break;
 800625a:	e056      	b.n	800630a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006270:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006274:	d0e7      	beq.n	8006246 <USB_EPStopXfer+0x82>
 8006276:	e048      	b.n	800630a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	4413      	add	r3, r2
 8006282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800628c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006290:	d13b      	bne.n	800630a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	4413      	add	r3, r2
 800629c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	7812      	ldrb	r2, [r2, #0]
 80062a6:	0151      	lsls	r1, r2, #5
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	440a      	add	r2, r1
 80062ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80062b4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	7812      	ldrb	r2, [r2, #0]
 80062ca:	0151      	lsls	r1, r2, #5
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	440a      	add	r2, r1
 80062d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3301      	adds	r3, #1
 80062de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d902      	bls.n	80062f0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	75fb      	strb	r3, [r7, #23]
          break;
 80062ee:	e00c      	b.n	800630a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006304:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006308:	d0e7      	beq.n	80062da <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800630a:	7dfb      	ldrb	r3, [r7, #23]
}
 800630c:	4618      	mov	r0, r3
 800630e:	371c      	adds	r7, #28
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006318:	b480      	push	{r7}
 800631a:	b089      	sub	sp, #36	@ 0x24
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	4611      	mov	r1, r2
 8006324:	461a      	mov	r2, r3
 8006326:	460b      	mov	r3, r1
 8006328:	71fb      	strb	r3, [r7, #7]
 800632a:	4613      	mov	r3, r2
 800632c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006336:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800633a:	2b00      	cmp	r3, #0
 800633c:	d123      	bne.n	8006386 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800633e:	88bb      	ldrh	r3, [r7, #4]
 8006340:	3303      	adds	r3, #3
 8006342:	089b      	lsrs	r3, r3, #2
 8006344:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006346:	2300      	movs	r3, #0
 8006348:	61bb      	str	r3, [r7, #24]
 800634a:	e018      	b.n	800637e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800634c:	79fb      	ldrb	r3, [r7, #7]
 800634e:	031a      	lsls	r2, r3, #12
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	4413      	add	r3, r2
 8006354:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006358:	461a      	mov	r2, r3
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	3301      	adds	r3, #1
 8006364:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	3301      	adds	r3, #1
 800636a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	3301      	adds	r3, #1
 8006370:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	3301      	adds	r3, #1
 8006376:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	3301      	adds	r3, #1
 800637c:	61bb      	str	r3, [r7, #24]
 800637e:	69ba      	ldr	r2, [r7, #24]
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	429a      	cmp	r2, r3
 8006384:	d3e2      	bcc.n	800634c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3724      	adds	r7, #36	@ 0x24
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006394:	b480      	push	{r7}
 8006396:	b08b      	sub	sp, #44	@ 0x2c
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	4613      	mov	r3, r2
 80063a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80063aa:	88fb      	ldrh	r3, [r7, #6]
 80063ac:	089b      	lsrs	r3, r3, #2
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80063b2:	88fb      	ldrh	r3, [r7, #6]
 80063b4:	f003 0303 	and.w	r3, r3, #3
 80063b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80063ba:	2300      	movs	r3, #0
 80063bc:	623b      	str	r3, [r7, #32]
 80063be:	e014      	b.n	80063ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80063cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ce:	3301      	adds	r3, #1
 80063d0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80063d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d4:	3301      	adds	r3, #1
 80063d6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80063d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063da:	3301      	adds	r3, #1
 80063dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80063de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e0:	3301      	adds	r3, #1
 80063e2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	3301      	adds	r3, #1
 80063e8:	623b      	str	r3, [r7, #32]
 80063ea:	6a3a      	ldr	r2, [r7, #32]
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d3e6      	bcc.n	80063c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80063f2:	8bfb      	ldrh	r3, [r7, #30]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d01e      	beq.n	8006436 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006402:	461a      	mov	r2, r3
 8006404:	f107 0310 	add.w	r3, r7, #16
 8006408:	6812      	ldr	r2, [r2, #0]
 800640a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	b2db      	uxtb	r3, r3
 8006412:	00db      	lsls	r3, r3, #3
 8006414:	fa22 f303 	lsr.w	r3, r2, r3
 8006418:	b2da      	uxtb	r2, r3
 800641a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641c:	701a      	strb	r2, [r3, #0]
      i++;
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	3301      	adds	r3, #1
 8006422:	623b      	str	r3, [r7, #32]
      pDest++;
 8006424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006426:	3301      	adds	r3, #1
 8006428:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800642a:	8bfb      	ldrh	r3, [r7, #30]
 800642c:	3b01      	subs	r3, #1
 800642e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006430:	8bfb      	ldrh	r3, [r7, #30]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1ea      	bne.n	800640c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006438:	4618      	mov	r0, r3
 800643a:	372c      	adds	r7, #44	@ 0x2c
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	785b      	ldrb	r3, [r3, #1]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d12c      	bne.n	80064ba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4413      	add	r3, r2
 8006468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	db12      	blt.n	8006498 <USB_EPSetStall+0x54>
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00f      	beq.n	8006498 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	4413      	add	r3, r2
 8006480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	0151      	lsls	r1, r2, #5
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	440a      	add	r2, r1
 800648e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006492:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006496:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	0151      	lsls	r1, r2, #5
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	440a      	add	r2, r1
 80064ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80064b6:	6013      	str	r3, [r2, #0]
 80064b8:	e02b      	b.n	8006512 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	db12      	blt.n	80064f2 <USB_EPSetStall+0xae>
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00f      	beq.n	80064f2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	015a      	lsls	r2, r3, #5
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4413      	add	r3, r2
 80064da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	0151      	lsls	r1, r2, #5
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	440a      	add	r2, r1
 80064e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80064f0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	0151      	lsls	r1, r2, #5
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	440a      	add	r2, r1
 8006508:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800650c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006510:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	785b      	ldrb	r3, [r3, #1]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d128      	bne.n	800658e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	0151      	lsls	r1, r2, #5
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	440a      	add	r2, r1
 8006552:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006556:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800655a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	791b      	ldrb	r3, [r3, #4]
 8006560:	2b03      	cmp	r3, #3
 8006562:	d003      	beq.n	800656c <USB_EPClearStall+0x4c>
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	791b      	ldrb	r3, [r3, #4]
 8006568:	2b02      	cmp	r3, #2
 800656a:	d138      	bne.n	80065de <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4413      	add	r3, r2
 8006574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	0151      	lsls	r1, r2, #5
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	440a      	add	r2, r1
 8006582:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800658a:	6013      	str	r3, [r2, #0]
 800658c:	e027      	b.n	80065de <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4413      	add	r3, r2
 8006596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	0151      	lsls	r1, r2, #5
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	440a      	add	r2, r1
 80065a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80065ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	791b      	ldrb	r3, [r3, #4]
 80065b2:	2b03      	cmp	r3, #3
 80065b4:	d003      	beq.n	80065be <USB_EPClearStall+0x9e>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	791b      	ldrb	r3, [r3, #4]
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d10f      	bne.n	80065de <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	0151      	lsls	r1, r2, #5
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	440a      	add	r2, r1
 80065d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065dc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	460b      	mov	r3, r1
 80065f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800660a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800660e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	78fb      	ldrb	r3, [r7, #3]
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006620:	68f9      	ldr	r1, [r7, #12]
 8006622:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006626:	4313      	orrs	r3, r2
 8006628:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3714      	adds	r7, #20
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006652:	f023 0303 	bic.w	r3, r3, #3
 8006656:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006666:	f023 0302 	bic.w	r3, r3, #2
 800666a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800667a:	b480      	push	{r7}
 800667c:	b085      	sub	sp, #20
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006694:	f023 0303 	bic.w	r3, r3, #3
 8006698:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066a8:	f043 0302 	orr.w	r3, r3, #2
 80066ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	4013      	ands	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80066d4:	68fb      	ldr	r3, [r7, #12]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b085      	sub	sp, #20
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	4013      	ands	r3, r2
 8006704:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	0c1b      	lsrs	r3, r3, #16
}
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006716:	b480      	push	{r7}
 8006718:	b085      	sub	sp, #20
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006732:	69db      	ldr	r3, [r3, #28]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	4013      	ands	r3, r2
 8006738:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	b29b      	uxth	r3, r3
}
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800674a:	b480      	push	{r7}
 800674c:	b085      	sub	sp, #20
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	460b      	mov	r3, r1
 8006754:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4413      	add	r3, r2
 8006762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	4013      	ands	r3, r2
 8006776:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006778:	68bb      	ldr	r3, [r7, #8]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3714      	adds	r7, #20
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006786:	b480      	push	{r7}
 8006788:	b087      	sub	sp, #28
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	460b      	mov	r3, r1
 8006790:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80067aa:	78fb      	ldrb	r3, [r7, #3]
 80067ac:	f003 030f 	and.w	r3, r3, #15
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	fa22 f303 	lsr.w	r3, r2, r3
 80067b6:	01db      	lsls	r3, r3, #7
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80067c0:	78fb      	ldrb	r3, [r7, #3]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	4013      	ands	r3, r2
 80067d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067d4:	68bb      	ldr	r3, [r7, #8]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	f003 0301 	and.w	r3, r3, #1
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80067fe:	b480      	push	{r7}
 8006800:	b085      	sub	sp, #20
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006818:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800681c:	f023 0307 	bic.w	r3, r3, #7
 8006820:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006830:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006834:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	460b      	mov	r3, r1
 800684e:	607a      	str	r2, [r7, #4]
 8006850:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	333c      	adds	r3, #60	@ 0x3c
 800685a:	3304      	adds	r3, #4
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	4a26      	ldr	r2, [pc, #152]	@ (80068fc <USB_EP0_OutStart+0xb8>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d90a      	bls.n	800687e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006874:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006878:	d101      	bne.n	800687e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	e037      	b.n	80068ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006884:	461a      	mov	r2, r3
 8006886:	2300      	movs	r3, #0
 8006888:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006898:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800689c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068ac:	f043 0318 	orr.w	r3, r3, #24
 80068b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068c0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80068c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80068c6:	7afb      	ldrb	r3, [r7, #11]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d10f      	bne.n	80068ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068d2:	461a      	mov	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068e6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80068ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	371c      	adds	r7, #28
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	4f54300a 	.word	0x4f54300a

08006900 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006908:	2300      	movs	r3, #0
 800690a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3301      	adds	r3, #1
 8006910:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	4a13      	ldr	r2, [pc, #76]	@ (8006964 <USB_CoreReset+0x64>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d901      	bls.n	800691e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e01b      	b.n	8006956 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	2b00      	cmp	r3, #0
 8006924:	daf2      	bge.n	800690c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f043 0201 	orr.w	r2, r3, #1
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3301      	adds	r3, #1
 800693a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4a09      	ldr	r2, [pc, #36]	@ (8006964 <USB_CoreReset+0x64>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d901      	bls.n	8006948 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e006      	b.n	8006956 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b01      	cmp	r3, #1
 8006952:	d0f0      	beq.n	8006936 <USB_CoreReset+0x36>

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	00030d40 	.word	0x00030d40

08006968 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	460b      	mov	r3, r1
 8006972:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006974:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006978:	f002 fc88 	bl	800928c <USBD_static_malloc>
 800697c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d109      	bne.n	8006998 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	32b0      	adds	r2, #176	@ 0xb0
 800698e:	2100      	movs	r1, #0
 8006990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006994:	2302      	movs	r3, #2
 8006996:	e0d4      	b.n	8006b42 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006998:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800699c:	2100      	movs	r1, #0
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f003 fa49 	bl	8009e36 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	32b0      	adds	r2, #176	@ 0xb0
 80069ae:	68f9      	ldr	r1, [r7, #12]
 80069b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	32b0      	adds	r2, #176	@ 0xb0
 80069be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	7c1b      	ldrb	r3, [r3, #16]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d138      	bne.n	8006a42 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80069d0:	4b5e      	ldr	r3, [pc, #376]	@ (8006b4c <USBD_CDC_Init+0x1e4>)
 80069d2:	7819      	ldrb	r1, [r3, #0]
 80069d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069d8:	2202      	movs	r2, #2
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f002 fb33 	bl	8009046 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80069e0:	4b5a      	ldr	r3, [pc, #360]	@ (8006b4c <USBD_CDC_Init+0x1e4>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	f003 020f 	and.w	r2, r3, #15
 80069e8:	6879      	ldr	r1, [r7, #4]
 80069ea:	4613      	mov	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	440b      	add	r3, r1
 80069f4:	3324      	adds	r3, #36	@ 0x24
 80069f6:	2201      	movs	r2, #1
 80069f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80069fa:	4b55      	ldr	r3, [pc, #340]	@ (8006b50 <USBD_CDC_Init+0x1e8>)
 80069fc:	7819      	ldrb	r1, [r3, #0]
 80069fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a02:	2202      	movs	r2, #2
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f002 fb1e 	bl	8009046 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a0a:	4b51      	ldr	r3, [pc, #324]	@ (8006b50 <USBD_CDC_Init+0x1e8>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	f003 020f 	and.w	r2, r3, #15
 8006a12:	6879      	ldr	r1, [r7, #4]
 8006a14:	4613      	mov	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	440b      	add	r3, r1
 8006a1e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006a22:	2201      	movs	r2, #1
 8006a24:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006a26:	4b4b      	ldr	r3, [pc, #300]	@ (8006b54 <USBD_CDC_Init+0x1ec>)
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	f003 020f 	and.w	r2, r3, #15
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	4613      	mov	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	440b      	add	r3, r1
 8006a3a:	3326      	adds	r3, #38	@ 0x26
 8006a3c:	2210      	movs	r2, #16
 8006a3e:	801a      	strh	r2, [r3, #0]
 8006a40:	e035      	b.n	8006aae <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006a42:	4b42      	ldr	r3, [pc, #264]	@ (8006b4c <USBD_CDC_Init+0x1e4>)
 8006a44:	7819      	ldrb	r1, [r3, #0]
 8006a46:	2340      	movs	r3, #64	@ 0x40
 8006a48:	2202      	movs	r2, #2
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f002 fafb 	bl	8009046 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006a50:	4b3e      	ldr	r3, [pc, #248]	@ (8006b4c <USBD_CDC_Init+0x1e4>)
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	f003 020f 	and.w	r2, r3, #15
 8006a58:	6879      	ldr	r1, [r7, #4]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	440b      	add	r3, r1
 8006a64:	3324      	adds	r3, #36	@ 0x24
 8006a66:	2201      	movs	r2, #1
 8006a68:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006a6a:	4b39      	ldr	r3, [pc, #228]	@ (8006b50 <USBD_CDC_Init+0x1e8>)
 8006a6c:	7819      	ldrb	r1, [r3, #0]
 8006a6e:	2340      	movs	r3, #64	@ 0x40
 8006a70:	2202      	movs	r2, #2
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f002 fae7 	bl	8009046 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a78:	4b35      	ldr	r3, [pc, #212]	@ (8006b50 <USBD_CDC_Init+0x1e8>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	f003 020f 	and.w	r2, r3, #15
 8006a80:	6879      	ldr	r1, [r7, #4]
 8006a82:	4613      	mov	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	440b      	add	r3, r1
 8006a8c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006a90:	2201      	movs	r2, #1
 8006a92:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006a94:	4b2f      	ldr	r3, [pc, #188]	@ (8006b54 <USBD_CDC_Init+0x1ec>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	f003 020f 	and.w	r2, r3, #15
 8006a9c:	6879      	ldr	r1, [r7, #4]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	440b      	add	r3, r1
 8006aa8:	3326      	adds	r3, #38	@ 0x26
 8006aaa:	2210      	movs	r2, #16
 8006aac:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006aae:	4b29      	ldr	r3, [pc, #164]	@ (8006b54 <USBD_CDC_Init+0x1ec>)
 8006ab0:	7819      	ldrb	r1, [r3, #0]
 8006ab2:	2308      	movs	r3, #8
 8006ab4:	2203      	movs	r2, #3
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f002 fac5 	bl	8009046 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006abc:	4b25      	ldr	r3, [pc, #148]	@ (8006b54 <USBD_CDC_Init+0x1ec>)
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	f003 020f 	and.w	r2, r3, #15
 8006ac4:	6879      	ldr	r1, [r7, #4]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	440b      	add	r3, r1
 8006ad0:	3324      	adds	r3, #36	@ 0x24
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	33b0      	adds	r3, #176	@ 0xb0
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4413      	add	r3, r2
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d101      	bne.n	8006b10 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	e018      	b.n	8006b42 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	7c1b      	ldrb	r3, [r3, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10a      	bne.n	8006b2e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b18:	4b0d      	ldr	r3, [pc, #52]	@ (8006b50 <USBD_CDC_Init+0x1e8>)
 8006b1a:	7819      	ldrb	r1, [r3, #0]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006b22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f002 fb7c 	bl	8009224 <USBD_LL_PrepareReceive>
 8006b2c:	e008      	b.n	8006b40 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b2e:	4b08      	ldr	r3, [pc, #32]	@ (8006b50 <USBD_CDC_Init+0x1e8>)
 8006b30:	7819      	ldrb	r1, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006b38:	2340      	movs	r3, #64	@ 0x40
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f002 fb72 	bl	8009224 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000093 	.word	0x20000093
 8006b50:	20000094 	.word	0x20000094
 8006b54:	20000095 	.word	0x20000095

08006b58 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	460b      	mov	r3, r1
 8006b62:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006b64:	4b3a      	ldr	r3, [pc, #232]	@ (8006c50 <USBD_CDC_DeInit+0xf8>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f002 fa91 	bl	8009092 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006b70:	4b37      	ldr	r3, [pc, #220]	@ (8006c50 <USBD_CDC_DeInit+0xf8>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	f003 020f 	and.w	r2, r3, #15
 8006b78:	6879      	ldr	r1, [r7, #4]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	440b      	add	r3, r1
 8006b84:	3324      	adds	r3, #36	@ 0x24
 8006b86:	2200      	movs	r2, #0
 8006b88:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006b8a:	4b32      	ldr	r3, [pc, #200]	@ (8006c54 <USBD_CDC_DeInit+0xfc>)
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f002 fa7e 	bl	8009092 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006b96:	4b2f      	ldr	r3, [pc, #188]	@ (8006c54 <USBD_CDC_DeInit+0xfc>)
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	f003 020f 	and.w	r2, r3, #15
 8006b9e:	6879      	ldr	r1, [r7, #4]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	440b      	add	r3, r1
 8006baa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006bae:	2200      	movs	r2, #0
 8006bb0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006bb2:	4b29      	ldr	r3, [pc, #164]	@ (8006c58 <USBD_CDC_DeInit+0x100>)
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f002 fa6a 	bl	8009092 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006bbe:	4b26      	ldr	r3, [pc, #152]	@ (8006c58 <USBD_CDC_DeInit+0x100>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	f003 020f 	and.w	r2, r3, #15
 8006bc6:	6879      	ldr	r1, [r7, #4]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	440b      	add	r3, r1
 8006bd2:	3324      	adds	r3, #36	@ 0x24
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8006c58 <USBD_CDC_DeInit+0x100>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	f003 020f 	and.w	r2, r3, #15
 8006be0:	6879      	ldr	r1, [r7, #4]
 8006be2:	4613      	mov	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	440b      	add	r3, r1
 8006bec:	3326      	adds	r3, #38	@ 0x26
 8006bee:	2200      	movs	r2, #0
 8006bf0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	32b0      	adds	r2, #176	@ 0xb0
 8006bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d01f      	beq.n	8006c44 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	33b0      	adds	r3, #176	@ 0xb0
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	32b0      	adds	r2, #176	@ 0xb0
 8006c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f002 fb3e 	bl	80092a8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	32b0      	adds	r2, #176	@ 0xb0
 8006c36:	2100      	movs	r1, #0
 8006c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	20000093 	.word	0x20000093
 8006c54:	20000094 	.word	0x20000094
 8006c58:	20000095 	.word	0x20000095

08006c5c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	32b0      	adds	r2, #176	@ 0xb0
 8006c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c74:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e0bf      	b.n	8006e0c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d050      	beq.n	8006d3a <USBD_CDC_Setup+0xde>
 8006c98:	2b20      	cmp	r3, #32
 8006c9a:	f040 80af 	bne.w	8006dfc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	88db      	ldrh	r3, [r3, #6]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d03a      	beq.n	8006d1c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	b25b      	sxtb	r3, r3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	da1b      	bge.n	8006ce8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	33b0      	adds	r3, #176	@ 0xb0
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006cc6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	88d2      	ldrh	r2, [r2, #6]
 8006ccc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	88db      	ldrh	r3, [r3, #6]
 8006cd2:	2b07      	cmp	r3, #7
 8006cd4:	bf28      	it	cs
 8006cd6:	2307      	movcs	r3, #7
 8006cd8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	89fa      	ldrh	r2, [r7, #14]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f001 fd87 	bl	80087f4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006ce6:	e090      	b.n	8006e0a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	785a      	ldrb	r2, [r3, #1]
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	88db      	ldrh	r3, [r3, #6]
 8006cf6:	2b3f      	cmp	r3, #63	@ 0x3f
 8006cf8:	d803      	bhi.n	8006d02 <USBD_CDC_Setup+0xa6>
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	88db      	ldrh	r3, [r3, #6]
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	e000      	b.n	8006d04 <USBD_CDC_Setup+0xa8>
 8006d02:	2240      	movs	r2, #64	@ 0x40
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006d0a:	6939      	ldr	r1, [r7, #16]
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006d12:	461a      	mov	r2, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f001 fd99 	bl	800884c <USBD_CtlPrepareRx>
      break;
 8006d1a:	e076      	b.n	8006e0a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	33b0      	adds	r3, #176	@ 0xb0
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	7850      	ldrb	r0, [r2, #1]
 8006d32:	2200      	movs	r2, #0
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	4798      	blx	r3
      break;
 8006d38:	e067      	b.n	8006e0a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	785b      	ldrb	r3, [r3, #1]
 8006d3e:	2b0b      	cmp	r3, #11
 8006d40:	d851      	bhi.n	8006de6 <USBD_CDC_Setup+0x18a>
 8006d42:	a201      	add	r2, pc, #4	@ (adr r2, 8006d48 <USBD_CDC_Setup+0xec>)
 8006d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d48:	08006d79 	.word	0x08006d79
 8006d4c:	08006df5 	.word	0x08006df5
 8006d50:	08006de7 	.word	0x08006de7
 8006d54:	08006de7 	.word	0x08006de7
 8006d58:	08006de7 	.word	0x08006de7
 8006d5c:	08006de7 	.word	0x08006de7
 8006d60:	08006de7 	.word	0x08006de7
 8006d64:	08006de7 	.word	0x08006de7
 8006d68:	08006de7 	.word	0x08006de7
 8006d6c:	08006de7 	.word	0x08006de7
 8006d70:	08006da3 	.word	0x08006da3
 8006d74:	08006dcd 	.word	0x08006dcd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	d107      	bne.n	8006d94 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006d84:	f107 030a 	add.w	r3, r7, #10
 8006d88:	2202      	movs	r2, #2
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f001 fd31 	bl	80087f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d92:	e032      	b.n	8006dfa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f001 fcbb 	bl	8008712 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	75fb      	strb	r3, [r7, #23]
          break;
 8006da0:	e02b      	b.n	8006dfa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d107      	bne.n	8006dbe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006dae:	f107 030d 	add.w	r3, r7, #13
 8006db2:	2201      	movs	r2, #1
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f001 fd1c 	bl	80087f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dbc:	e01d      	b.n	8006dfa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 fca6 	bl	8008712 <USBD_CtlError>
            ret = USBD_FAIL;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	75fb      	strb	r3, [r7, #23]
          break;
 8006dca:	e016      	b.n	8006dfa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b03      	cmp	r3, #3
 8006dd6:	d00f      	beq.n	8006df8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006dd8:	6839      	ldr	r1, [r7, #0]
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 fc99 	bl	8008712 <USBD_CtlError>
            ret = USBD_FAIL;
 8006de0:	2303      	movs	r3, #3
 8006de2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006de4:	e008      	b.n	8006df8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f001 fc92 	bl	8008712 <USBD_CtlError>
          ret = USBD_FAIL;
 8006dee:	2303      	movs	r3, #3
 8006df0:	75fb      	strb	r3, [r7, #23]
          break;
 8006df2:	e002      	b.n	8006dfa <USBD_CDC_Setup+0x19e>
          break;
 8006df4:	bf00      	nop
 8006df6:	e008      	b.n	8006e0a <USBD_CDC_Setup+0x1ae>
          break;
 8006df8:	bf00      	nop
      }
      break;
 8006dfa:	e006      	b.n	8006e0a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006dfc:	6839      	ldr	r1, [r7, #0]
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f001 fc87 	bl	8008712 <USBD_CtlError>
      ret = USBD_FAIL;
 8006e04:	2303      	movs	r3, #3
 8006e06:	75fb      	strb	r3, [r7, #23]
      break;
 8006e08:	bf00      	nop
  }

  return (uint8_t)ret;
 8006e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3718      	adds	r7, #24
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006e26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	32b0      	adds	r2, #176	@ 0xb0
 8006e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e065      	b.n	8006f0a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	32b0      	adds	r2, #176	@ 0xb0
 8006e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006e4e:	78fb      	ldrb	r3, [r7, #3]
 8006e50:	f003 020f 	and.w	r2, r3, #15
 8006e54:	6879      	ldr	r1, [r7, #4]
 8006e56:	4613      	mov	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	440b      	add	r3, r1
 8006e60:	3318      	adds	r3, #24
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d02f      	beq.n	8006ec8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006e68:	78fb      	ldrb	r3, [r7, #3]
 8006e6a:	f003 020f 	and.w	r2, r3, #15
 8006e6e:	6879      	ldr	r1, [r7, #4]
 8006e70:	4613      	mov	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	440b      	add	r3, r1
 8006e7a:	3318      	adds	r3, #24
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	78fb      	ldrb	r3, [r7, #3]
 8006e80:	f003 010f 	and.w	r1, r3, #15
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	460b      	mov	r3, r1
 8006e88:	00db      	lsls	r3, r3, #3
 8006e8a:	440b      	add	r3, r1
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4403      	add	r3, r0
 8006e90:	3348      	adds	r3, #72	@ 0x48
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e98:	fb01 f303 	mul.w	r3, r1, r3
 8006e9c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d112      	bne.n	8006ec8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006ea2:	78fb      	ldrb	r3, [r7, #3]
 8006ea4:	f003 020f 	and.w	r2, r3, #15
 8006ea8:	6879      	ldr	r1, [r7, #4]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	440b      	add	r3, r1
 8006eb4:	3318      	adds	r3, #24
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006eba:	78f9      	ldrb	r1, [r7, #3]
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f002 f98e 	bl	80091e2 <USBD_LL_Transmit>
 8006ec6:	e01f      	b.n	8006f08 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	33b0      	adds	r3, #176	@ 0xb0
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d010      	beq.n	8006f08 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	33b0      	adds	r3, #176	@ 0xb0
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006f04:	78fa      	ldrb	r2, [r7, #3]
 8006f06:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b084      	sub	sp, #16
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	32b0      	adds	r2, #176	@ 0xb0
 8006f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f2c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	32b0      	adds	r2, #176	@ 0xb0
 8006f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e01a      	b.n	8006f7a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f44:	78fb      	ldrb	r3, [r7, #3]
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f002 f98c 	bl	8009266 <USBD_LL_GetRxDataSize>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	33b0      	adds	r3, #176	@ 0xb0
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006f74:	4611      	mov	r1, r2
 8006f76:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b084      	sub	sp, #16
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	32b0      	adds	r2, #176	@ 0xb0
 8006f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f98:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d101      	bne.n	8006fa4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e024      	b.n	8006fee <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	33b0      	adds	r3, #176	@ 0xb0
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d019      	beq.n	8006fec <USBD_CDC_EP0_RxReady+0x6a>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006fbe:	2bff      	cmp	r3, #255	@ 0xff
 8006fc0:	d014      	beq.n	8006fec <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	33b0      	adds	r3, #176	@ 0xb0
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006fda:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006fe2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	22ff      	movs	r2, #255	@ 0xff
 8006fe8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
	...

08006ff8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007000:	2182      	movs	r1, #130	@ 0x82
 8007002:	4818      	ldr	r0, [pc, #96]	@ (8007064 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007004:	f000 fd4f 	bl	8007aa6 <USBD_GetEpDesc>
 8007008:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800700a:	2101      	movs	r1, #1
 800700c:	4815      	ldr	r0, [pc, #84]	@ (8007064 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800700e:	f000 fd4a 	bl	8007aa6 <USBD_GetEpDesc>
 8007012:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007014:	2181      	movs	r1, #129	@ 0x81
 8007016:	4813      	ldr	r0, [pc, #76]	@ (8007064 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007018:	f000 fd45 	bl	8007aa6 <USBD_GetEpDesc>
 800701c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d002      	beq.n	800702a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	2210      	movs	r2, #16
 8007028:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d006      	beq.n	800703e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	2200      	movs	r2, #0
 8007034:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007038:	711a      	strb	r2, [r3, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d006      	beq.n	8007052 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800704c:	711a      	strb	r2, [r3, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2243      	movs	r2, #67	@ 0x43
 8007056:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007058:	4b02      	ldr	r3, [pc, #8]	@ (8007064 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800705a:	4618      	mov	r0, r3
 800705c:	3718      	adds	r7, #24
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	20000050 	.word	0x20000050

08007068 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b086      	sub	sp, #24
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007070:	2182      	movs	r1, #130	@ 0x82
 8007072:	4818      	ldr	r0, [pc, #96]	@ (80070d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007074:	f000 fd17 	bl	8007aa6 <USBD_GetEpDesc>
 8007078:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800707a:	2101      	movs	r1, #1
 800707c:	4815      	ldr	r0, [pc, #84]	@ (80070d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800707e:	f000 fd12 	bl	8007aa6 <USBD_GetEpDesc>
 8007082:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007084:	2181      	movs	r1, #129	@ 0x81
 8007086:	4813      	ldr	r0, [pc, #76]	@ (80070d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007088:	f000 fd0d 	bl	8007aa6 <USBD_GetEpDesc>
 800708c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d002      	beq.n	800709a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	2210      	movs	r2, #16
 8007098:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d006      	beq.n	80070ae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	2200      	movs	r2, #0
 80070a4:	711a      	strb	r2, [r3, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f042 0202 	orr.w	r2, r2, #2
 80070ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d006      	beq.n	80070c2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	711a      	strb	r2, [r3, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f042 0202 	orr.w	r2, r2, #2
 80070c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2243      	movs	r2, #67	@ 0x43
 80070c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80070c8:	4b02      	ldr	r3, [pc, #8]	@ (80070d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3718      	adds	r7, #24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20000050 	.word	0x20000050

080070d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80070e0:	2182      	movs	r1, #130	@ 0x82
 80070e2:	4818      	ldr	r0, [pc, #96]	@ (8007144 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070e4:	f000 fcdf 	bl	8007aa6 <USBD_GetEpDesc>
 80070e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80070ea:	2101      	movs	r1, #1
 80070ec:	4815      	ldr	r0, [pc, #84]	@ (8007144 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070ee:	f000 fcda 	bl	8007aa6 <USBD_GetEpDesc>
 80070f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80070f4:	2181      	movs	r1, #129	@ 0x81
 80070f6:	4813      	ldr	r0, [pc, #76]	@ (8007144 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070f8:	f000 fcd5 	bl	8007aa6 <USBD_GetEpDesc>
 80070fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	2210      	movs	r2, #16
 8007108:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d006      	beq.n	800711e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	2200      	movs	r2, #0
 8007114:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007118:	711a      	strb	r2, [r3, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d006      	beq.n	8007132 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800712c:	711a      	strb	r2, [r3, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2243      	movs	r2, #67	@ 0x43
 8007136:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007138:	4b02      	ldr	r3, [pc, #8]	@ (8007144 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800713a:	4618      	mov	r0, r3
 800713c:	3718      	adds	r7, #24
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	20000050 	.word	0x20000050

08007148 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	220a      	movs	r2, #10
 8007154:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007156:	4b03      	ldr	r3, [pc, #12]	@ (8007164 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007158:	4618      	mov	r0, r3
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr
 8007164:	2000000c 	.word	0x2000000c

08007168 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007178:	2303      	movs	r3, #3
 800717a:	e009      	b.n	8007190 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	33b0      	adds	r3, #176	@ 0xb0
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800719c:	b480      	push	{r7}
 800719e:	b087      	sub	sp, #28
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	32b0      	adds	r2, #176	@ 0xb0
 80071b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80071be:	2303      	movs	r3, #3
 80071c0:	e008      	b.n	80071d4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	371c      	adds	r7, #28
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	32b0      	adds	r2, #176	@ 0xb0
 80071f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007200:	2303      	movs	r3, #3
 8007202:	e004      	b.n	800720e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
	...

0800721c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	32b0      	adds	r2, #176	@ 0xb0
 800722e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007232:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007234:	2301      	movs	r3, #1
 8007236:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	32b0      	adds	r2, #176	@ 0xb0
 8007242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800724a:	2303      	movs	r3, #3
 800724c:	e025      	b.n	800729a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007254:	2b00      	cmp	r3, #0
 8007256:	d11f      	bne.n	8007298 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	2201      	movs	r2, #1
 800725c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007260:	4b10      	ldr	r3, [pc, #64]	@ (80072a4 <USBD_CDC_TransmitPacket+0x88>)
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	f003 020f 	and.w	r2, r3, #15
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	4613      	mov	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4403      	add	r3, r0
 800727a:	3318      	adds	r3, #24
 800727c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800727e:	4b09      	ldr	r3, [pc, #36]	@ (80072a4 <USBD_CDC_TransmitPacket+0x88>)
 8007280:	7819      	ldrb	r1, [r3, #0]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f001 ffa7 	bl	80091e2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007294:	2300      	movs	r3, #0
 8007296:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007298:	7bfb      	ldrb	r3, [r7, #15]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	20000093 	.word	0x20000093

080072a8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	32b0      	adds	r2, #176	@ 0xb0
 80072ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072be:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	32b0      	adds	r2, #176	@ 0xb0
 80072ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e018      	b.n	8007308 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	7c1b      	ldrb	r3, [r3, #16]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10a      	bne.n	80072f4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072de:	4b0c      	ldr	r3, [pc, #48]	@ (8007310 <USBD_CDC_ReceivePacket+0x68>)
 80072e0:	7819      	ldrb	r1, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80072e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f001 ff99 	bl	8009224 <USBD_LL_PrepareReceive>
 80072f2:	e008      	b.n	8007306 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072f4:	4b06      	ldr	r3, [pc, #24]	@ (8007310 <USBD_CDC_ReceivePacket+0x68>)
 80072f6:	7819      	ldrb	r1, [r3, #0]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80072fe:	2340      	movs	r3, #64	@ 0x40
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f001 ff8f 	bl	8009224 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	20000094 	.word	0x20000094

08007314 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	4613      	mov	r3, r2
 8007320:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d101      	bne.n	800732c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007328:	2303      	movs	r3, #3
 800732a:	e01f      	b.n	800736c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	79fa      	ldrb	r2, [r7, #7]
 800735e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f001 fe09 	bl	8008f78 <USBD_LL_Init>
 8007366:	4603      	mov	r3, r0
 8007368:	75fb      	strb	r3, [r7, #23]

  return ret;
 800736a:	7dfb      	ldrb	r3, [r7, #23]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3718      	adds	r7, #24
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800737e:	2300      	movs	r3, #0
 8007380:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d101      	bne.n	800738c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007388:	2303      	movs	r3, #3
 800738a:	e025      	b.n	80073d8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	32ae      	adds	r2, #174	@ 0xae
 800739e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00f      	beq.n	80073c8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	32ae      	adds	r2, #174	@ 0xae
 80073b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b8:	f107 020e 	add.w	r2, r7, #14
 80073bc:	4610      	mov	r0, r2
 80073be:	4798      	blx	r3
 80073c0:	4602      	mov	r2, r0
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80073ce:	1c5a      	adds	r2, r3, #1
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f001 fe11 	bl	8009010 <USBD_LL_Start>
 80073ee:	4603      	mov	r3, r0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007400:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007402:	4618      	mov	r0, r3
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b084      	sub	sp, #16
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	460b      	mov	r3, r1
 8007418:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800741a:	2300      	movs	r3, #0
 800741c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007424:	2b00      	cmp	r3, #0
 8007426:	d009      	beq.n	800743c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	78fa      	ldrb	r2, [r7, #3]
 8007432:	4611      	mov	r1, r2
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	4798      	blx	r3
 8007438:	4603      	mov	r3, r0
 800743a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800743c:	7bfb      	ldrb	r3, [r7, #15]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b084      	sub	sp, #16
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	460b      	mov	r3, r1
 8007450:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	78fa      	ldrb	r2, [r7, #3]
 8007460:	4611      	mov	r1, r2
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	4798      	blx	r3
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800746c:	2303      	movs	r3, #3
 800746e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007470:	7bfb      	ldrb	r3, [r7, #15]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b084      	sub	sp, #16
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800748a:	6839      	ldr	r1, [r7, #0]
 800748c:	4618      	mov	r0, r3
 800748e:	f001 f906 	bl	800869e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80074a0:	461a      	mov	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80074ae:	f003 031f 	and.w	r3, r3, #31
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d01a      	beq.n	80074ec <USBD_LL_SetupStage+0x72>
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d822      	bhi.n	8007500 <USBD_LL_SetupStage+0x86>
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d002      	beq.n	80074c4 <USBD_LL_SetupStage+0x4a>
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d00a      	beq.n	80074d8 <USBD_LL_SetupStage+0x5e>
 80074c2:	e01d      	b.n	8007500 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fb5d 	bl	8007b8c <USBD_StdDevReq>
 80074d2:	4603      	mov	r3, r0
 80074d4:	73fb      	strb	r3, [r7, #15]
      break;
 80074d6:	e020      	b.n	800751a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fbc5 	bl	8007c70 <USBD_StdItfReq>
 80074e6:	4603      	mov	r3, r0
 80074e8:	73fb      	strb	r3, [r7, #15]
      break;
 80074ea:	e016      	b.n	800751a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80074f2:	4619      	mov	r1, r3
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fc27 	bl	8007d48 <USBD_StdEPReq>
 80074fa:	4603      	mov	r3, r0
 80074fc:	73fb      	strb	r3, [r7, #15]
      break;
 80074fe:	e00c      	b.n	800751a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007506:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800750a:	b2db      	uxtb	r3, r3
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f001 fdde 	bl	80090d0 <USBD_LL_StallEP>
 8007514:	4603      	mov	r3, r0
 8007516:	73fb      	strb	r3, [r7, #15]
      break;
 8007518:	bf00      	nop
  }

  return ret;
 800751a:	7bfb      	ldrb	r3, [r7, #15]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b086      	sub	sp, #24
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	460b      	mov	r3, r1
 800752e:	607a      	str	r2, [r7, #4]
 8007530:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007536:	7afb      	ldrb	r3, [r7, #11]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d16e      	bne.n	800761a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007542:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800754a:	2b03      	cmp	r3, #3
 800754c:	f040 8098 	bne.w	8007680 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	429a      	cmp	r2, r3
 800755a:	d913      	bls.n	8007584 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	689a      	ldr	r2, [r3, #8]
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	1ad2      	subs	r2, r2, r3
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	68da      	ldr	r2, [r3, #12]
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	4293      	cmp	r3, r2
 8007574:	bf28      	it	cs
 8007576:	4613      	movcs	r3, r2
 8007578:	461a      	mov	r2, r3
 800757a:	6879      	ldr	r1, [r7, #4]
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f001 f982 	bl	8008886 <USBD_CtlContinueRx>
 8007582:	e07d      	b.n	8007680 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800758a:	f003 031f 	and.w	r3, r3, #31
 800758e:	2b02      	cmp	r3, #2
 8007590:	d014      	beq.n	80075bc <USBD_LL_DataOutStage+0x98>
 8007592:	2b02      	cmp	r3, #2
 8007594:	d81d      	bhi.n	80075d2 <USBD_LL_DataOutStage+0xae>
 8007596:	2b00      	cmp	r3, #0
 8007598:	d002      	beq.n	80075a0 <USBD_LL_DataOutStage+0x7c>
 800759a:	2b01      	cmp	r3, #1
 800759c:	d003      	beq.n	80075a6 <USBD_LL_DataOutStage+0x82>
 800759e:	e018      	b.n	80075d2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80075a0:	2300      	movs	r3, #0
 80075a2:	75bb      	strb	r3, [r7, #22]
            break;
 80075a4:	e018      	b.n	80075d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	4619      	mov	r1, r3
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f000 fa5e 	bl	8007a72 <USBD_CoreFindIF>
 80075b6:	4603      	mov	r3, r0
 80075b8:	75bb      	strb	r3, [r7, #22]
            break;
 80075ba:	e00d      	b.n	80075d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	4619      	mov	r1, r3
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 fa60 	bl	8007a8c <USBD_CoreFindEP>
 80075cc:	4603      	mov	r3, r0
 80075ce:	75bb      	strb	r3, [r7, #22]
            break;
 80075d0:	e002      	b.n	80075d8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80075d2:	2300      	movs	r3, #0
 80075d4:	75bb      	strb	r3, [r7, #22]
            break;
 80075d6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80075d8:	7dbb      	ldrb	r3, [r7, #22]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d119      	bne.n	8007612 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	d113      	bne.n	8007612 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80075ea:	7dba      	ldrb	r2, [r7, #22]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	32ae      	adds	r2, #174	@ 0xae
 80075f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00b      	beq.n	8007612 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80075fa:	7dba      	ldrb	r2, [r7, #22]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007602:	7dba      	ldrb	r2, [r7, #22]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	32ae      	adds	r2, #174	@ 0xae
 8007608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f001 f948 	bl	80088a8 <USBD_CtlSendStatus>
 8007618:	e032      	b.n	8007680 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800761a:	7afb      	ldrb	r3, [r7, #11]
 800761c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007620:	b2db      	uxtb	r3, r3
 8007622:	4619      	mov	r1, r3
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f000 fa31 	bl	8007a8c <USBD_CoreFindEP>
 800762a:	4603      	mov	r3, r0
 800762c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800762e:	7dbb      	ldrb	r3, [r7, #22]
 8007630:	2bff      	cmp	r3, #255	@ 0xff
 8007632:	d025      	beq.n	8007680 <USBD_LL_DataOutStage+0x15c>
 8007634:	7dbb      	ldrb	r3, [r7, #22]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d122      	bne.n	8007680 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b03      	cmp	r3, #3
 8007644:	d117      	bne.n	8007676 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007646:	7dba      	ldrb	r2, [r7, #22]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	32ae      	adds	r2, #174	@ 0xae
 800764c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00f      	beq.n	8007676 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007656:	7dba      	ldrb	r2, [r7, #22]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800765e:	7dba      	ldrb	r2, [r7, #22]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	32ae      	adds	r2, #174	@ 0xae
 8007664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	7afa      	ldrb	r2, [r7, #11]
 800766c:	4611      	mov	r1, r2
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	4798      	blx	r3
 8007672:	4603      	mov	r3, r0
 8007674:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007676:	7dfb      	ldrb	r3, [r7, #23]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800767c:	7dfb      	ldrb	r3, [r7, #23]
 800767e:	e000      	b.n	8007682 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3718      	adds	r7, #24
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b086      	sub	sp, #24
 800768e:	af00      	add	r7, sp, #0
 8007690:	60f8      	str	r0, [r7, #12]
 8007692:	460b      	mov	r3, r1
 8007694:	607a      	str	r2, [r7, #4]
 8007696:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007698:	7afb      	ldrb	r3, [r7, #11]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d16f      	bne.n	800777e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	3314      	adds	r3, #20
 80076a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d15a      	bne.n	8007764 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	689a      	ldr	r2, [r3, #8]
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d914      	bls.n	80076e4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	689a      	ldr	r2, [r3, #8]
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	1ad2      	subs	r2, r2, r3
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	461a      	mov	r2, r3
 80076ce:	6879      	ldr	r1, [r7, #4]
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f001 f8aa 	bl	800882a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076d6:	2300      	movs	r3, #0
 80076d8:	2200      	movs	r2, #0
 80076da:	2100      	movs	r1, #0
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f001 fda1 	bl	8009224 <USBD_LL_PrepareReceive>
 80076e2:	e03f      	b.n	8007764 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	68da      	ldr	r2, [r3, #12]
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d11c      	bne.n	800772a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d316      	bcc.n	800772a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007706:	429a      	cmp	r2, r3
 8007708:	d20f      	bcs.n	800772a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800770a:	2200      	movs	r2, #0
 800770c:	2100      	movs	r1, #0
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f001 f88b 	bl	800882a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800771c:	2300      	movs	r3, #0
 800771e:	2200      	movs	r2, #0
 8007720:	2100      	movs	r1, #0
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f001 fd7e 	bl	8009224 <USBD_LL_PrepareReceive>
 8007728:	e01c      	b.n	8007764 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007730:	b2db      	uxtb	r3, r3
 8007732:	2b03      	cmp	r3, #3
 8007734:	d10f      	bne.n	8007756 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d009      	beq.n	8007756 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007756:	2180      	movs	r1, #128	@ 0x80
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f001 fcb9 	bl	80090d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f001 f8b5 	bl	80088ce <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d03a      	beq.n	80077e4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f7ff fe42 	bl	80073f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800777c:	e032      	b.n	80077e4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800777e:	7afb      	ldrb	r3, [r7, #11]
 8007780:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007784:	b2db      	uxtb	r3, r3
 8007786:	4619      	mov	r1, r3
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f000 f97f 	bl	8007a8c <USBD_CoreFindEP>
 800778e:	4603      	mov	r3, r0
 8007790:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007792:	7dfb      	ldrb	r3, [r7, #23]
 8007794:	2bff      	cmp	r3, #255	@ 0xff
 8007796:	d025      	beq.n	80077e4 <USBD_LL_DataInStage+0x15a>
 8007798:	7dfb      	ldrb	r3, [r7, #23]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d122      	bne.n	80077e4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d11c      	bne.n	80077e4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80077aa:	7dfa      	ldrb	r2, [r7, #23]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	32ae      	adds	r2, #174	@ 0xae
 80077b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d014      	beq.n	80077e4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80077ba:	7dfa      	ldrb	r2, [r7, #23]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80077c2:	7dfa      	ldrb	r2, [r7, #23]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	32ae      	adds	r2, #174	@ 0xae
 80077c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	7afa      	ldrb	r2, [r7, #11]
 80077d0:	4611      	mov	r1, r2
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	4798      	blx	r3
 80077d6:	4603      	mov	r3, r0
 80077d8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80077da:	7dbb      	ldrb	r3, [r7, #22]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d001      	beq.n	80077e4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80077e0:	7dbb      	ldrb	r3, [r7, #22]
 80077e2:	e000      	b.n	80077e6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3718      	adds	r7, #24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b084      	sub	sp, #16
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007826:	2b00      	cmp	r3, #0
 8007828:	d014      	beq.n	8007854 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00e      	beq.n	8007854 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	6852      	ldr	r2, [r2, #4]
 8007842:	b2d2      	uxtb	r2, r2
 8007844:	4611      	mov	r1, r2
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	4798      	blx	r3
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d001      	beq.n	8007854 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007850:	2303      	movs	r3, #3
 8007852:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007854:	2340      	movs	r3, #64	@ 0x40
 8007856:	2200      	movs	r2, #0
 8007858:	2100      	movs	r1, #0
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 fbf3 	bl	8009046 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2240      	movs	r2, #64	@ 0x40
 800786c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007870:	2340      	movs	r3, #64	@ 0x40
 8007872:	2200      	movs	r2, #0
 8007874:	2180      	movs	r1, #128	@ 0x80
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f001 fbe5 	bl	8009046 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2240      	movs	r2, #64	@ 0x40
 8007886:	621a      	str	r2, [r3, #32]

  return ret;
 8007888:	7bfb      	ldrb	r3, [r7, #15]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	460b      	mov	r3, r1
 800789c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	78fa      	ldrb	r2, [r7, #3]
 80078a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b083      	sub	sp, #12
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2204      	movs	r2, #4
 80078cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d106      	bne.n	8007900 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b082      	sub	sp, #8
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b03      	cmp	r3, #3
 8007920:	d110      	bne.n	8007944 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00b      	beq.n	8007944 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007932:	69db      	ldr	r3, [r3, #28]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d005      	beq.n	8007944 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b082      	sub	sp, #8
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	460b      	mov	r3, r1
 8007958:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	32ae      	adds	r2, #174	@ 0xae
 8007964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d101      	bne.n	8007970 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800796c:	2303      	movs	r3, #3
 800796e:	e01c      	b.n	80079aa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b03      	cmp	r3, #3
 800797a:	d115      	bne.n	80079a8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	32ae      	adds	r2, #174	@ 0xae
 8007986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798a:	6a1b      	ldr	r3, [r3, #32]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00b      	beq.n	80079a8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	32ae      	adds	r2, #174	@ 0xae
 800799a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799e:	6a1b      	ldr	r3, [r3, #32]
 80079a0:	78fa      	ldrb	r2, [r7, #3]
 80079a2:	4611      	mov	r1, r2
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b082      	sub	sp, #8
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
 80079ba:	460b      	mov	r3, r1
 80079bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	32ae      	adds	r2, #174	@ 0xae
 80079c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e01c      	b.n	8007a0e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d115      	bne.n	8007a0c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	32ae      	adds	r2, #174	@ 0xae
 80079ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00b      	beq.n	8007a0c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	32ae      	adds	r2, #174	@ 0xae
 80079fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a04:	78fa      	ldrb	r2, [r7, #3]
 8007a06:	4611      	mov	r1, r2
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b083      	sub	sp, #12
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00e      	beq.n	8007a68 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	6852      	ldr	r2, [r2, #4]
 8007a56:	b2d2      	uxtb	r2, r2
 8007a58:	4611      	mov	r1, r2
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	4798      	blx	r3
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d001      	beq.n	8007a68 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007a64:	2303      	movs	r3, #3
 8007a66:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b083      	sub	sp, #12
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a7e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a98:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b086      	sub	sp, #24
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	460b      	mov	r3, r1
 8007ab0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007aba:	2300      	movs	r3, #0
 8007abc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	885b      	ldrh	r3, [r3, #2]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	7812      	ldrb	r2, [r2, #0]
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d91f      	bls.n	8007b0c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007ad2:	e013      	b.n	8007afc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007ad4:	f107 030a 	add.w	r3, r7, #10
 8007ad8:	4619      	mov	r1, r3
 8007ada:	6978      	ldr	r0, [r7, #20]
 8007adc:	f000 f81b 	bl	8007b16 <USBD_GetNextDesc>
 8007ae0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	785b      	ldrb	r3, [r3, #1]
 8007ae6:	2b05      	cmp	r3, #5
 8007ae8:	d108      	bne.n	8007afc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	789b      	ldrb	r3, [r3, #2]
 8007af2:	78fa      	ldrb	r2, [r7, #3]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d008      	beq.n	8007b0a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007af8:	2300      	movs	r3, #0
 8007afa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	885b      	ldrh	r3, [r3, #2]
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	897b      	ldrh	r3, [r7, #10]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d8e5      	bhi.n	8007ad4 <USBD_GetEpDesc+0x2e>
 8007b08:	e000      	b.n	8007b0c <USBD_GetEpDesc+0x66>
          break;
 8007b0a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007b0c:	693b      	ldr	r3, [r7, #16]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3718      	adds	r7, #24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b085      	sub	sp, #20
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
 8007b1e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	7812      	ldrb	r2, [r2, #0]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	461a      	mov	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007b40:	68fb      	ldr	r3, [r7, #12]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b087      	sub	sp, #28
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	3301      	adds	r3, #1
 8007b64:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007b6c:	8a3b      	ldrh	r3, [r7, #16]
 8007b6e:	021b      	lsls	r3, r3, #8
 8007b70:	b21a      	sxth	r2, r3
 8007b72:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	b21b      	sxth	r3, r3
 8007b7a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007b7c:	89fb      	ldrh	r3, [r7, #14]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	371c      	adds	r7, #28
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
	...

08007b8c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ba2:	2b40      	cmp	r3, #64	@ 0x40
 8007ba4:	d005      	beq.n	8007bb2 <USBD_StdDevReq+0x26>
 8007ba6:	2b40      	cmp	r3, #64	@ 0x40
 8007ba8:	d857      	bhi.n	8007c5a <USBD_StdDevReq+0xce>
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00f      	beq.n	8007bce <USBD_StdDevReq+0x42>
 8007bae:	2b20      	cmp	r3, #32
 8007bb0:	d153      	bne.n	8007c5a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	32ae      	adds	r2, #174	@ 0xae
 8007bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	4798      	blx	r3
 8007bc8:	4603      	mov	r3, r0
 8007bca:	73fb      	strb	r3, [r7, #15]
      break;
 8007bcc:	e04a      	b.n	8007c64 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	785b      	ldrb	r3, [r3, #1]
 8007bd2:	2b09      	cmp	r3, #9
 8007bd4:	d83b      	bhi.n	8007c4e <USBD_StdDevReq+0xc2>
 8007bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bdc <USBD_StdDevReq+0x50>)
 8007bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bdc:	08007c31 	.word	0x08007c31
 8007be0:	08007c45 	.word	0x08007c45
 8007be4:	08007c4f 	.word	0x08007c4f
 8007be8:	08007c3b 	.word	0x08007c3b
 8007bec:	08007c4f 	.word	0x08007c4f
 8007bf0:	08007c0f 	.word	0x08007c0f
 8007bf4:	08007c05 	.word	0x08007c05
 8007bf8:	08007c4f 	.word	0x08007c4f
 8007bfc:	08007c27 	.word	0x08007c27
 8007c00:	08007c19 	.word	0x08007c19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fa3c 	bl	8008084 <USBD_GetDescriptor>
          break;
 8007c0c:	e024      	b.n	8007c58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fba1 	bl	8008358 <USBD_SetAddress>
          break;
 8007c16:	e01f      	b.n	8007c58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fbe0 	bl	80083e0 <USBD_SetConfig>
 8007c20:	4603      	mov	r3, r0
 8007c22:	73fb      	strb	r3, [r7, #15]
          break;
 8007c24:	e018      	b.n	8007c58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fc83 	bl	8008534 <USBD_GetConfig>
          break;
 8007c2e:	e013      	b.n	8007c58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fcb4 	bl	80085a0 <USBD_GetStatus>
          break;
 8007c38:	e00e      	b.n	8007c58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c3a:	6839      	ldr	r1, [r7, #0]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 fce3 	bl	8008608 <USBD_SetFeature>
          break;
 8007c42:	e009      	b.n	8007c58 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c44:	6839      	ldr	r1, [r7, #0]
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fd07 	bl	800865a <USBD_ClrFeature>
          break;
 8007c4c:	e004      	b.n	8007c58 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007c4e:	6839      	ldr	r1, [r7, #0]
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fd5e 	bl	8008712 <USBD_CtlError>
          break;
 8007c56:	bf00      	nop
      }
      break;
 8007c58:	e004      	b.n	8007c64 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007c5a:	6839      	ldr	r1, [r7, #0]
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fd58 	bl	8008712 <USBD_CtlError>
      break;
 8007c62:	bf00      	nop
  }

  return ret;
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop

08007c70 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c86:	2b40      	cmp	r3, #64	@ 0x40
 8007c88:	d005      	beq.n	8007c96 <USBD_StdItfReq+0x26>
 8007c8a:	2b40      	cmp	r3, #64	@ 0x40
 8007c8c:	d852      	bhi.n	8007d34 <USBD_StdItfReq+0xc4>
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d001      	beq.n	8007c96 <USBD_StdItfReq+0x26>
 8007c92:	2b20      	cmp	r3, #32
 8007c94:	d14e      	bne.n	8007d34 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d840      	bhi.n	8007d26 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	889b      	ldrh	r3, [r3, #4]
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d836      	bhi.n	8007d1c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	889b      	ldrh	r3, [r3, #4]
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7ff fedb 	bl	8007a72 <USBD_CoreFindIF>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007cc0:	7bbb      	ldrb	r3, [r7, #14]
 8007cc2:	2bff      	cmp	r3, #255	@ 0xff
 8007cc4:	d01d      	beq.n	8007d02 <USBD_StdItfReq+0x92>
 8007cc6:	7bbb      	ldrb	r3, [r7, #14]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d11a      	bne.n	8007d02 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007ccc:	7bba      	ldrb	r2, [r7, #14]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	32ae      	adds	r2, #174	@ 0xae
 8007cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00f      	beq.n	8007cfc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007cdc:	7bba      	ldrb	r2, [r7, #14]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ce4:	7bba      	ldrb	r2, [r7, #14]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	32ae      	adds	r2, #174	@ 0xae
 8007cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	6839      	ldr	r1, [r7, #0]
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	4798      	blx	r3
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007cfa:	e004      	b.n	8007d06 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007d00:	e001      	b.n	8007d06 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007d02:	2303      	movs	r3, #3
 8007d04:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	88db      	ldrh	r3, [r3, #6]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d110      	bne.n	8007d30 <USBD_StdItfReq+0xc0>
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10d      	bne.n	8007d30 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fdc7 	bl	80088a8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d1a:	e009      	b.n	8007d30 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007d1c:	6839      	ldr	r1, [r7, #0]
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fcf7 	bl	8008712 <USBD_CtlError>
          break;
 8007d24:	e004      	b.n	8007d30 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007d26:	6839      	ldr	r1, [r7, #0]
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fcf2 	bl	8008712 <USBD_CtlError>
          break;
 8007d2e:	e000      	b.n	8007d32 <USBD_StdItfReq+0xc2>
          break;
 8007d30:	bf00      	nop
      }
      break;
 8007d32:	e004      	b.n	8007d3e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fceb 	bl	8008712 <USBD_CtlError>
      break;
 8007d3c:	bf00      	nop
  }

  return ret;
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	889b      	ldrh	r3, [r3, #4]
 8007d5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d64:	2b40      	cmp	r3, #64	@ 0x40
 8007d66:	d007      	beq.n	8007d78 <USBD_StdEPReq+0x30>
 8007d68:	2b40      	cmp	r3, #64	@ 0x40
 8007d6a:	f200 817f 	bhi.w	800806c <USBD_StdEPReq+0x324>
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d02a      	beq.n	8007dc8 <USBD_StdEPReq+0x80>
 8007d72:	2b20      	cmp	r3, #32
 8007d74:	f040 817a 	bne.w	800806c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d78:	7bbb      	ldrb	r3, [r7, #14]
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7ff fe85 	bl	8007a8c <USBD_CoreFindEP>
 8007d82:	4603      	mov	r3, r0
 8007d84:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d86:	7b7b      	ldrb	r3, [r7, #13]
 8007d88:	2bff      	cmp	r3, #255	@ 0xff
 8007d8a:	f000 8174 	beq.w	8008076 <USBD_StdEPReq+0x32e>
 8007d8e:	7b7b      	ldrb	r3, [r7, #13]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f040 8170 	bne.w	8008076 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007d96:	7b7a      	ldrb	r2, [r7, #13]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007d9e:	7b7a      	ldrb	r2, [r7, #13]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	32ae      	adds	r2, #174	@ 0xae
 8007da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 8163 	beq.w	8008076 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007db0:	7b7a      	ldrb	r2, [r7, #13]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	32ae      	adds	r2, #174	@ 0xae
 8007db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	6839      	ldr	r1, [r7, #0]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	4798      	blx	r3
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007dc6:	e156      	b.n	8008076 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	785b      	ldrb	r3, [r3, #1]
 8007dcc:	2b03      	cmp	r3, #3
 8007dce:	d008      	beq.n	8007de2 <USBD_StdEPReq+0x9a>
 8007dd0:	2b03      	cmp	r3, #3
 8007dd2:	f300 8145 	bgt.w	8008060 <USBD_StdEPReq+0x318>
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 809b 	beq.w	8007f12 <USBD_StdEPReq+0x1ca>
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d03c      	beq.n	8007e5a <USBD_StdEPReq+0x112>
 8007de0:	e13e      	b.n	8008060 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d002      	beq.n	8007df4 <USBD_StdEPReq+0xac>
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	d016      	beq.n	8007e20 <USBD_StdEPReq+0xd8>
 8007df2:	e02c      	b.n	8007e4e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007df4:	7bbb      	ldrb	r3, [r7, #14]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00d      	beq.n	8007e16 <USBD_StdEPReq+0xce>
 8007dfa:	7bbb      	ldrb	r3, [r7, #14]
 8007dfc:	2b80      	cmp	r3, #128	@ 0x80
 8007dfe:	d00a      	beq.n	8007e16 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e00:	7bbb      	ldrb	r3, [r7, #14]
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f001 f963 	bl	80090d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e0a:	2180      	movs	r1, #128	@ 0x80
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f001 f95f 	bl	80090d0 <USBD_LL_StallEP>
 8007e12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e14:	e020      	b.n	8007e58 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 fc7a 	bl	8008712 <USBD_CtlError>
              break;
 8007e1e:	e01b      	b.n	8007e58 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	885b      	ldrh	r3, [r3, #2]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d10e      	bne.n	8007e46 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e28:	7bbb      	ldrb	r3, [r7, #14]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00b      	beq.n	8007e46 <USBD_StdEPReq+0xfe>
 8007e2e:	7bbb      	ldrb	r3, [r7, #14]
 8007e30:	2b80      	cmp	r3, #128	@ 0x80
 8007e32:	d008      	beq.n	8007e46 <USBD_StdEPReq+0xfe>
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	88db      	ldrh	r3, [r3, #6]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d104      	bne.n	8007e46 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
 8007e3e:	4619      	mov	r1, r3
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f001 f945 	bl	80090d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fd2e 	bl	80088a8 <USBD_CtlSendStatus>

              break;
 8007e4c:	e004      	b.n	8007e58 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fc5e 	bl	8008712 <USBD_CtlError>
              break;
 8007e56:	bf00      	nop
          }
          break;
 8007e58:	e107      	b.n	800806a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d002      	beq.n	8007e6c <USBD_StdEPReq+0x124>
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d016      	beq.n	8007e98 <USBD_StdEPReq+0x150>
 8007e6a:	e04b      	b.n	8007f04 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e6c:	7bbb      	ldrb	r3, [r7, #14]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00d      	beq.n	8007e8e <USBD_StdEPReq+0x146>
 8007e72:	7bbb      	ldrb	r3, [r7, #14]
 8007e74:	2b80      	cmp	r3, #128	@ 0x80
 8007e76:	d00a      	beq.n	8007e8e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e78:	7bbb      	ldrb	r3, [r7, #14]
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f001 f927 	bl	80090d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e82:	2180      	movs	r1, #128	@ 0x80
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f001 f923 	bl	80090d0 <USBD_LL_StallEP>
 8007e8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e8c:	e040      	b.n	8007f10 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fc3e 	bl	8008712 <USBD_CtlError>
              break;
 8007e96:	e03b      	b.n	8007f10 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	885b      	ldrh	r3, [r3, #2]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d136      	bne.n	8007f0e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
 8007ea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d004      	beq.n	8007eb4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007eaa:	7bbb      	ldrb	r3, [r7, #14]
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f001 f92d 	bl	800910e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fcf7 	bl	80088a8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007eba:	7bbb      	ldrb	r3, [r7, #14]
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7ff fde4 	bl	8007a8c <USBD_CoreFindEP>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ec8:	7b7b      	ldrb	r3, [r7, #13]
 8007eca:	2bff      	cmp	r3, #255	@ 0xff
 8007ecc:	d01f      	beq.n	8007f0e <USBD_StdEPReq+0x1c6>
 8007ece:	7b7b      	ldrb	r3, [r7, #13]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d11c      	bne.n	8007f0e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ed4:	7b7a      	ldrb	r2, [r7, #13]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007edc:	7b7a      	ldrb	r2, [r7, #13]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	32ae      	adds	r2, #174	@ 0xae
 8007ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d010      	beq.n	8007f0e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007eec:	7b7a      	ldrb	r2, [r7, #13]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	32ae      	adds	r2, #174	@ 0xae
 8007ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	4798      	blx	r3
 8007efe:	4603      	mov	r3, r0
 8007f00:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007f02:	e004      	b.n	8007f0e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007f04:	6839      	ldr	r1, [r7, #0]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fc03 	bl	8008712 <USBD_CtlError>
              break;
 8007f0c:	e000      	b.n	8007f10 <USBD_StdEPReq+0x1c8>
              break;
 8007f0e:	bf00      	nop
          }
          break;
 8007f10:	e0ab      	b.n	800806a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d002      	beq.n	8007f24 <USBD_StdEPReq+0x1dc>
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d032      	beq.n	8007f88 <USBD_StdEPReq+0x240>
 8007f22:	e097      	b.n	8008054 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f24:	7bbb      	ldrb	r3, [r7, #14]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d007      	beq.n	8007f3a <USBD_StdEPReq+0x1f2>
 8007f2a:	7bbb      	ldrb	r3, [r7, #14]
 8007f2c:	2b80      	cmp	r3, #128	@ 0x80
 8007f2e:	d004      	beq.n	8007f3a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fbed 	bl	8008712 <USBD_CtlError>
                break;
 8007f38:	e091      	b.n	800805e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	da0b      	bge.n	8007f5a <USBD_StdEPReq+0x212>
 8007f42:	7bbb      	ldrb	r3, [r7, #14]
 8007f44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f48:	4613      	mov	r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	4413      	add	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	3310      	adds	r3, #16
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	4413      	add	r3, r2
 8007f56:	3304      	adds	r3, #4
 8007f58:	e00b      	b.n	8007f72 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f5a:	7bbb      	ldrb	r3, [r7, #14]
 8007f5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f60:	4613      	mov	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4413      	add	r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	4413      	add	r3, r2
 8007f70:	3304      	adds	r3, #4
 8007f72:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2200      	movs	r2, #0
 8007f78:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	4619      	mov	r1, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fc37 	bl	80087f4 <USBD_CtlSendData>
              break;
 8007f86:	e06a      	b.n	800805e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	da11      	bge.n	8007fb4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f90:	7bbb      	ldrb	r3, [r7, #14]
 8007f92:	f003 020f 	and.w	r2, r3, #15
 8007f96:	6879      	ldr	r1, [r7, #4]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4413      	add	r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	440b      	add	r3, r1
 8007fa2:	3324      	adds	r3, #36	@ 0x24
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d117      	bne.n	8007fda <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fbb0 	bl	8008712 <USBD_CtlError>
                  break;
 8007fb2:	e054      	b.n	800805e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007fb4:	7bbb      	ldrb	r3, [r7, #14]
 8007fb6:	f003 020f 	and.w	r2, r3, #15
 8007fba:	6879      	ldr	r1, [r7, #4]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4413      	add	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	440b      	add	r3, r1
 8007fc6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007fca:	881b      	ldrh	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d104      	bne.n	8007fda <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007fd0:	6839      	ldr	r1, [r7, #0]
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 fb9d 	bl	8008712 <USBD_CtlError>
                  break;
 8007fd8:	e041      	b.n	800805e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	da0b      	bge.n	8007ffa <USBD_StdEPReq+0x2b2>
 8007fe2:	7bbb      	ldrb	r3, [r7, #14]
 8007fe4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fe8:	4613      	mov	r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	3310      	adds	r3, #16
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	3304      	adds	r3, #4
 8007ff8:	e00b      	b.n	8008012 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ffa:	7bbb      	ldrb	r3, [r7, #14]
 8007ffc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008000:	4613      	mov	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4413      	add	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	4413      	add	r3, r2
 8008010:	3304      	adds	r3, #4
 8008012:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008014:	7bbb      	ldrb	r3, [r7, #14]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d002      	beq.n	8008020 <USBD_StdEPReq+0x2d8>
 800801a:	7bbb      	ldrb	r3, [r7, #14]
 800801c:	2b80      	cmp	r3, #128	@ 0x80
 800801e:	d103      	bne.n	8008028 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	2200      	movs	r2, #0
 8008024:	601a      	str	r2, [r3, #0]
 8008026:	e00e      	b.n	8008046 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008028:	7bbb      	ldrb	r3, [r7, #14]
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f001 f88d 	bl	800914c <USBD_LL_IsStallEP>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d003      	beq.n	8008040 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	2201      	movs	r2, #1
 800803c:	601a      	str	r2, [r3, #0]
 800803e:	e002      	b.n	8008046 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2200      	movs	r2, #0
 8008044:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	2202      	movs	r2, #2
 800804a:	4619      	mov	r1, r3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fbd1 	bl	80087f4 <USBD_CtlSendData>
              break;
 8008052:	e004      	b.n	800805e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fb5b 	bl	8008712 <USBD_CtlError>
              break;
 800805c:	bf00      	nop
          }
          break;
 800805e:	e004      	b.n	800806a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fb55 	bl	8008712 <USBD_CtlError>
          break;
 8008068:	bf00      	nop
      }
      break;
 800806a:	e005      	b.n	8008078 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 fb4f 	bl	8008712 <USBD_CtlError>
      break;
 8008074:	e000      	b.n	8008078 <USBD_StdEPReq+0x330>
      break;
 8008076:	bf00      	nop
  }

  return ret;
 8008078:	7bfb      	ldrb	r3, [r7, #15]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
	...

08008084 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800808e:	2300      	movs	r3, #0
 8008090:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008092:	2300      	movs	r3, #0
 8008094:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008096:	2300      	movs	r3, #0
 8008098:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	885b      	ldrh	r3, [r3, #2]
 800809e:	0a1b      	lsrs	r3, r3, #8
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	3b01      	subs	r3, #1
 80080a4:	2b06      	cmp	r3, #6
 80080a6:	f200 8128 	bhi.w	80082fa <USBD_GetDescriptor+0x276>
 80080aa:	a201      	add	r2, pc, #4	@ (adr r2, 80080b0 <USBD_GetDescriptor+0x2c>)
 80080ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b0:	080080cd 	.word	0x080080cd
 80080b4:	080080e5 	.word	0x080080e5
 80080b8:	08008125 	.word	0x08008125
 80080bc:	080082fb 	.word	0x080082fb
 80080c0:	080082fb 	.word	0x080082fb
 80080c4:	0800829b 	.word	0x0800829b
 80080c8:	080082c7 	.word	0x080082c7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	7c12      	ldrb	r2, [r2, #16]
 80080d8:	f107 0108 	add.w	r1, r7, #8
 80080dc:	4610      	mov	r0, r2
 80080de:	4798      	blx	r3
 80080e0:	60f8      	str	r0, [r7, #12]
      break;
 80080e2:	e112      	b.n	800830a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	7c1b      	ldrb	r3, [r3, #16]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10d      	bne.n	8008108 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f4:	f107 0208 	add.w	r2, r7, #8
 80080f8:	4610      	mov	r0, r2
 80080fa:	4798      	blx	r3
 80080fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3301      	adds	r3, #1
 8008102:	2202      	movs	r2, #2
 8008104:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008106:	e100      	b.n	800830a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800810e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008110:	f107 0208 	add.w	r2, r7, #8
 8008114:	4610      	mov	r0, r2
 8008116:	4798      	blx	r3
 8008118:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3301      	adds	r3, #1
 800811e:	2202      	movs	r2, #2
 8008120:	701a      	strb	r2, [r3, #0]
      break;
 8008122:	e0f2      	b.n	800830a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	885b      	ldrh	r3, [r3, #2]
 8008128:	b2db      	uxtb	r3, r3
 800812a:	2b05      	cmp	r3, #5
 800812c:	f200 80ac 	bhi.w	8008288 <USBD_GetDescriptor+0x204>
 8008130:	a201      	add	r2, pc, #4	@ (adr r2, 8008138 <USBD_GetDescriptor+0xb4>)
 8008132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008136:	bf00      	nop
 8008138:	08008151 	.word	0x08008151
 800813c:	08008185 	.word	0x08008185
 8008140:	080081b9 	.word	0x080081b9
 8008144:	080081ed 	.word	0x080081ed
 8008148:	08008221 	.word	0x08008221
 800814c:	08008255 	.word	0x08008255
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00b      	beq.n	8008174 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	7c12      	ldrb	r2, [r2, #16]
 8008168:	f107 0108 	add.w	r1, r7, #8
 800816c:	4610      	mov	r0, r2
 800816e:	4798      	blx	r3
 8008170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008172:	e091      	b.n	8008298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 facb 	bl	8008712 <USBD_CtlError>
            err++;
 800817c:	7afb      	ldrb	r3, [r7, #11]
 800817e:	3301      	adds	r3, #1
 8008180:	72fb      	strb	r3, [r7, #11]
          break;
 8008182:	e089      	b.n	8008298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00b      	beq.n	80081a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	7c12      	ldrb	r2, [r2, #16]
 800819c:	f107 0108 	add.w	r1, r7, #8
 80081a0:	4610      	mov	r0, r2
 80081a2:	4798      	blx	r3
 80081a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081a6:	e077      	b.n	8008298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fab1 	bl	8008712 <USBD_CtlError>
            err++;
 80081b0:	7afb      	ldrb	r3, [r7, #11]
 80081b2:	3301      	adds	r3, #1
 80081b4:	72fb      	strb	r3, [r7, #11]
          break;
 80081b6:	e06f      	b.n	8008298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00b      	beq.n	80081dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	7c12      	ldrb	r2, [r2, #16]
 80081d0:	f107 0108 	add.w	r1, r7, #8
 80081d4:	4610      	mov	r0, r2
 80081d6:	4798      	blx	r3
 80081d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081da:	e05d      	b.n	8008298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fa97 	bl	8008712 <USBD_CtlError>
            err++;
 80081e4:	7afb      	ldrb	r3, [r7, #11]
 80081e6:	3301      	adds	r3, #1
 80081e8:	72fb      	strb	r3, [r7, #11]
          break;
 80081ea:	e055      	b.n	8008298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00b      	beq.n	8008210 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	7c12      	ldrb	r2, [r2, #16]
 8008204:	f107 0108 	add.w	r1, r7, #8
 8008208:	4610      	mov	r0, r2
 800820a:	4798      	blx	r3
 800820c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800820e:	e043      	b.n	8008298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fa7d 	bl	8008712 <USBD_CtlError>
            err++;
 8008218:	7afb      	ldrb	r3, [r7, #11]
 800821a:	3301      	adds	r3, #1
 800821c:	72fb      	strb	r3, [r7, #11]
          break;
 800821e:	e03b      	b.n	8008298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00b      	beq.n	8008244 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008232:	695b      	ldr	r3, [r3, #20]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	7c12      	ldrb	r2, [r2, #16]
 8008238:	f107 0108 	add.w	r1, r7, #8
 800823c:	4610      	mov	r0, r2
 800823e:	4798      	blx	r3
 8008240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008242:	e029      	b.n	8008298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fa63 	bl	8008712 <USBD_CtlError>
            err++;
 800824c:	7afb      	ldrb	r3, [r7, #11]
 800824e:	3301      	adds	r3, #1
 8008250:	72fb      	strb	r3, [r7, #11]
          break;
 8008252:	e021      	b.n	8008298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00b      	beq.n	8008278 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	7c12      	ldrb	r2, [r2, #16]
 800826c:	f107 0108 	add.w	r1, r7, #8
 8008270:	4610      	mov	r0, r2
 8008272:	4798      	blx	r3
 8008274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008276:	e00f      	b.n	8008298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fa49 	bl	8008712 <USBD_CtlError>
            err++;
 8008280:	7afb      	ldrb	r3, [r7, #11]
 8008282:	3301      	adds	r3, #1
 8008284:	72fb      	strb	r3, [r7, #11]
          break;
 8008286:	e007      	b.n	8008298 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 fa41 	bl	8008712 <USBD_CtlError>
          err++;
 8008290:	7afb      	ldrb	r3, [r7, #11]
 8008292:	3301      	adds	r3, #1
 8008294:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008296:	bf00      	nop
      }
      break;
 8008298:	e037      	b.n	800830a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	7c1b      	ldrb	r3, [r3, #16]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d109      	bne.n	80082b6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082aa:	f107 0208 	add.w	r2, r7, #8
 80082ae:	4610      	mov	r0, r2
 80082b0:	4798      	blx	r3
 80082b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082b4:	e029      	b.n	800830a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fa2a 	bl	8008712 <USBD_CtlError>
        err++;
 80082be:	7afb      	ldrb	r3, [r7, #11]
 80082c0:	3301      	adds	r3, #1
 80082c2:	72fb      	strb	r3, [r7, #11]
      break;
 80082c4:	e021      	b.n	800830a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	7c1b      	ldrb	r3, [r3, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10d      	bne.n	80082ea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082d6:	f107 0208 	add.w	r2, r7, #8
 80082da:	4610      	mov	r0, r2
 80082dc:	4798      	blx	r3
 80082de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	3301      	adds	r3, #1
 80082e4:	2207      	movs	r2, #7
 80082e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082e8:	e00f      	b.n	800830a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fa10 	bl	8008712 <USBD_CtlError>
        err++;
 80082f2:	7afb      	ldrb	r3, [r7, #11]
 80082f4:	3301      	adds	r3, #1
 80082f6:	72fb      	strb	r3, [r7, #11]
      break;
 80082f8:	e007      	b.n	800830a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fa08 	bl	8008712 <USBD_CtlError>
      err++;
 8008302:	7afb      	ldrb	r3, [r7, #11]
 8008304:	3301      	adds	r3, #1
 8008306:	72fb      	strb	r3, [r7, #11]
      break;
 8008308:	bf00      	nop
  }

  if (err != 0U)
 800830a:	7afb      	ldrb	r3, [r7, #11]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d11e      	bne.n	800834e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	88db      	ldrh	r3, [r3, #6]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d016      	beq.n	8008346 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008318:	893b      	ldrh	r3, [r7, #8]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00e      	beq.n	800833c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	88da      	ldrh	r2, [r3, #6]
 8008322:	893b      	ldrh	r3, [r7, #8]
 8008324:	4293      	cmp	r3, r2
 8008326:	bf28      	it	cs
 8008328:	4613      	movcs	r3, r2
 800832a:	b29b      	uxth	r3, r3
 800832c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800832e:	893b      	ldrh	r3, [r7, #8]
 8008330:	461a      	mov	r2, r3
 8008332:	68f9      	ldr	r1, [r7, #12]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fa5d 	bl	80087f4 <USBD_CtlSendData>
 800833a:	e009      	b.n	8008350 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f9e7 	bl	8008712 <USBD_CtlError>
 8008344:	e004      	b.n	8008350 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 faae 	bl	80088a8 <USBD_CtlSendStatus>
 800834c:	e000      	b.n	8008350 <USBD_GetDescriptor+0x2cc>
    return;
 800834e:	bf00      	nop
  }
}
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop

08008358 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	889b      	ldrh	r3, [r3, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d131      	bne.n	80083ce <USBD_SetAddress+0x76>
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	88db      	ldrh	r3, [r3, #6]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d12d      	bne.n	80083ce <USBD_SetAddress+0x76>
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	885b      	ldrh	r3, [r3, #2]
 8008376:	2b7f      	cmp	r3, #127	@ 0x7f
 8008378:	d829      	bhi.n	80083ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	885b      	ldrh	r3, [r3, #2]
 800837e:	b2db      	uxtb	r3, r3
 8008380:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008384:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b03      	cmp	r3, #3
 8008390:	d104      	bne.n	800839c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008392:	6839      	ldr	r1, [r7, #0]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f9bc 	bl	8008712 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800839a:	e01d      	b.n	80083d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	7bfa      	ldrb	r2, [r7, #15]
 80083a0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fefb 	bl	80091a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fa7a 	bl	80088a8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d004      	beq.n	80083c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2202      	movs	r2, #2
 80083be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083c2:	e009      	b.n	80083d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083cc:	e004      	b.n	80083d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f99e 	bl	8008712 <USBD_CtlError>
  }
}
 80083d6:	bf00      	nop
 80083d8:	bf00      	nop
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083ea:	2300      	movs	r3, #0
 80083ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	885b      	ldrh	r3, [r3, #2]
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	4b4e      	ldr	r3, [pc, #312]	@ (8008530 <USBD_SetConfig+0x150>)
 80083f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083f8:	4b4d      	ldr	r3, [pc, #308]	@ (8008530 <USBD_SetConfig+0x150>)
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d905      	bls.n	800840c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f985 	bl	8008712 <USBD_CtlError>
    return USBD_FAIL;
 8008408:	2303      	movs	r3, #3
 800840a:	e08c      	b.n	8008526 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b02      	cmp	r3, #2
 8008416:	d002      	beq.n	800841e <USBD_SetConfig+0x3e>
 8008418:	2b03      	cmp	r3, #3
 800841a:	d029      	beq.n	8008470 <USBD_SetConfig+0x90>
 800841c:	e075      	b.n	800850a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800841e:	4b44      	ldr	r3, [pc, #272]	@ (8008530 <USBD_SetConfig+0x150>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d020      	beq.n	8008468 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008426:	4b42      	ldr	r3, [pc, #264]	@ (8008530 <USBD_SetConfig+0x150>)
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	461a      	mov	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008430:	4b3f      	ldr	r3, [pc, #252]	@ (8008530 <USBD_SetConfig+0x150>)
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	4619      	mov	r1, r3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7fe ffe9 	bl	800740e <USBD_SetClassConfig>
 800843c:	4603      	mov	r3, r0
 800843e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008440:	7bfb      	ldrb	r3, [r7, #15]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d008      	beq.n	8008458 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f962 	bl	8008712 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2202      	movs	r2, #2
 8008452:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008456:	e065      	b.n	8008524 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fa25 	bl	80088a8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2203      	movs	r2, #3
 8008462:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008466:	e05d      	b.n	8008524 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fa1d 	bl	80088a8 <USBD_CtlSendStatus>
      break;
 800846e:	e059      	b.n	8008524 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008470:	4b2f      	ldr	r3, [pc, #188]	@ (8008530 <USBD_SetConfig+0x150>)
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d112      	bne.n	800849e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008480:	4b2b      	ldr	r3, [pc, #172]	@ (8008530 <USBD_SetConfig+0x150>)
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	461a      	mov	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800848a:	4b29      	ldr	r3, [pc, #164]	@ (8008530 <USBD_SetConfig+0x150>)
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	4619      	mov	r1, r3
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f7fe ffd8 	bl	8007446 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fa06 	bl	80088a8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800849c:	e042      	b.n	8008524 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800849e:	4b24      	ldr	r3, [pc, #144]	@ (8008530 <USBD_SetConfig+0x150>)
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	461a      	mov	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d02a      	beq.n	8008502 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	4619      	mov	r1, r3
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7fe ffc6 	bl	8007446 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80084ba:	4b1d      	ldr	r3, [pc, #116]	@ (8008530 <USBD_SetConfig+0x150>)
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	461a      	mov	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80084c4:	4b1a      	ldr	r3, [pc, #104]	@ (8008530 <USBD_SetConfig+0x150>)
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	4619      	mov	r1, r3
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f7fe ff9f 	bl	800740e <USBD_SetClassConfig>
 80084d0:	4603      	mov	r3, r0
 80084d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00f      	beq.n	80084fa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 f918 	bl	8008712 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	4619      	mov	r1, r3
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f7fe ffab 	bl	8007446 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2202      	movs	r2, #2
 80084f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80084f8:	e014      	b.n	8008524 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f9d4 	bl	80088a8 <USBD_CtlSendStatus>
      break;
 8008500:	e010      	b.n	8008524 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f9d0 	bl	80088a8 <USBD_CtlSendStatus>
      break;
 8008508:	e00c      	b.n	8008524 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f900 	bl	8008712 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008512:	4b07      	ldr	r3, [pc, #28]	@ (8008530 <USBD_SetConfig+0x150>)
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	4619      	mov	r1, r3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f7fe ff94 	bl	8007446 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800851e:	2303      	movs	r3, #3
 8008520:	73fb      	strb	r3, [r7, #15]
      break;
 8008522:	bf00      	nop
  }

  return ret;
 8008524:	7bfb      	ldrb	r3, [r7, #15]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	20000520 	.word	0x20000520

08008534 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	88db      	ldrh	r3, [r3, #6]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d004      	beq.n	8008550 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f8e2 	bl	8008712 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800854e:	e023      	b.n	8008598 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008556:	b2db      	uxtb	r3, r3
 8008558:	2b02      	cmp	r3, #2
 800855a:	dc02      	bgt.n	8008562 <USBD_GetConfig+0x2e>
 800855c:	2b00      	cmp	r3, #0
 800855e:	dc03      	bgt.n	8008568 <USBD_GetConfig+0x34>
 8008560:	e015      	b.n	800858e <USBD_GetConfig+0x5a>
 8008562:	2b03      	cmp	r3, #3
 8008564:	d00b      	beq.n	800857e <USBD_GetConfig+0x4a>
 8008566:	e012      	b.n	800858e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	3308      	adds	r3, #8
 8008572:	2201      	movs	r2, #1
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f93c 	bl	80087f4 <USBD_CtlSendData>
        break;
 800857c:	e00c      	b.n	8008598 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	3304      	adds	r3, #4
 8008582:	2201      	movs	r2, #1
 8008584:	4619      	mov	r1, r3
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f934 	bl	80087f4 <USBD_CtlSendData>
        break;
 800858c:	e004      	b.n	8008598 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800858e:	6839      	ldr	r1, [r7, #0]
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 f8be 	bl	8008712 <USBD_CtlError>
        break;
 8008596:	bf00      	nop
}
 8008598:	bf00      	nop
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	3b01      	subs	r3, #1
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d81e      	bhi.n	80085f6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	88db      	ldrh	r3, [r3, #6]
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d004      	beq.n	80085ca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f8a5 	bl	8008712 <USBD_CtlError>
        break;
 80085c8:	e01a      	b.n	8008600 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d005      	beq.n	80085e6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	f043 0202 	orr.w	r2, r3, #2
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	330c      	adds	r3, #12
 80085ea:	2202      	movs	r2, #2
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f900 	bl	80087f4 <USBD_CtlSendData>
      break;
 80085f4:	e004      	b.n	8008600 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f88a 	bl	8008712 <USBD_CtlError>
      break;
 80085fe:	bf00      	nop
  }
}
 8008600:	bf00      	nop
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	885b      	ldrh	r3, [r3, #2]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d107      	bne.n	800862a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f940 	bl	80088a8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008628:	e013      	b.n	8008652 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	885b      	ldrh	r3, [r3, #2]
 800862e:	2b02      	cmp	r3, #2
 8008630:	d10b      	bne.n	800864a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	889b      	ldrh	r3, [r3, #4]
 8008636:	0a1b      	lsrs	r3, r3, #8
 8008638:	b29b      	uxth	r3, r3
 800863a:	b2da      	uxtb	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 f930 	bl	80088a8 <USBD_CtlSendStatus>
}
 8008648:	e003      	b.n	8008652 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800864a:	6839      	ldr	r1, [r7, #0]
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f860 	bl	8008712 <USBD_CtlError>
}
 8008652:	bf00      	nop
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b082      	sub	sp, #8
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800866a:	b2db      	uxtb	r3, r3
 800866c:	3b01      	subs	r3, #1
 800866e:	2b02      	cmp	r3, #2
 8008670:	d80b      	bhi.n	800868a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	885b      	ldrh	r3, [r3, #2]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d10c      	bne.n	8008694 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f910 	bl	80088a8 <USBD_CtlSendStatus>
      }
      break;
 8008688:	e004      	b.n	8008694 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f840 	bl	8008712 <USBD_CtlError>
      break;
 8008692:	e000      	b.n	8008696 <USBD_ClrFeature+0x3c>
      break;
 8008694:	bf00      	nop
  }
}
 8008696:	bf00      	nop
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b084      	sub	sp, #16
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	781a      	ldrb	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	3301      	adds	r3, #1
 80086b8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	781a      	ldrb	r2, [r3, #0]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3301      	adds	r3, #1
 80086c6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f7ff fa40 	bl	8007b4e <SWAPBYTE>
 80086ce:	4603      	mov	r3, r0
 80086d0:	461a      	mov	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	3301      	adds	r3, #1
 80086da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	3301      	adds	r3, #1
 80086e0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f7ff fa33 	bl	8007b4e <SWAPBYTE>
 80086e8:	4603      	mov	r3, r0
 80086ea:	461a      	mov	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	3301      	adds	r3, #1
 80086f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	3301      	adds	r3, #1
 80086fa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f7ff fa26 	bl	8007b4e <SWAPBYTE>
 8008702:	4603      	mov	r3, r0
 8008704:	461a      	mov	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	80da      	strh	r2, [r3, #6]
}
 800870a:	bf00      	nop
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b082      	sub	sp, #8
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800871c:	2180      	movs	r1, #128	@ 0x80
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fcd6 	bl	80090d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008724:	2100      	movs	r1, #0
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fcd2 	bl	80090d0 <USBD_LL_StallEP>
}
 800872c:	bf00      	nop
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b086      	sub	sp, #24
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008740:	2300      	movs	r3, #0
 8008742:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d036      	beq.n	80087b8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800874e:	6938      	ldr	r0, [r7, #16]
 8008750:	f000 f836 	bl	80087c0 <USBD_GetLen>
 8008754:	4603      	mov	r3, r0
 8008756:	3301      	adds	r3, #1
 8008758:	b29b      	uxth	r3, r3
 800875a:	005b      	lsls	r3, r3, #1
 800875c:	b29a      	uxth	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008762:	7dfb      	ldrb	r3, [r7, #23]
 8008764:	68ba      	ldr	r2, [r7, #8]
 8008766:	4413      	add	r3, r2
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	7812      	ldrb	r2, [r2, #0]
 800876c:	701a      	strb	r2, [r3, #0]
  idx++;
 800876e:	7dfb      	ldrb	r3, [r7, #23]
 8008770:	3301      	adds	r3, #1
 8008772:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008774:	7dfb      	ldrb	r3, [r7, #23]
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	4413      	add	r3, r2
 800877a:	2203      	movs	r2, #3
 800877c:	701a      	strb	r2, [r3, #0]
  idx++;
 800877e:	7dfb      	ldrb	r3, [r7, #23]
 8008780:	3301      	adds	r3, #1
 8008782:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008784:	e013      	b.n	80087ae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008786:	7dfb      	ldrb	r3, [r7, #23]
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	4413      	add	r3, r2
 800878c:	693a      	ldr	r2, [r7, #16]
 800878e:	7812      	ldrb	r2, [r2, #0]
 8008790:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	3301      	adds	r3, #1
 8008796:	613b      	str	r3, [r7, #16]
    idx++;
 8008798:	7dfb      	ldrb	r3, [r7, #23]
 800879a:	3301      	adds	r3, #1
 800879c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800879e:	7dfb      	ldrb	r3, [r7, #23]
 80087a0:	68ba      	ldr	r2, [r7, #8]
 80087a2:	4413      	add	r3, r2
 80087a4:	2200      	movs	r2, #0
 80087a6:	701a      	strb	r2, [r3, #0]
    idx++;
 80087a8:	7dfb      	ldrb	r3, [r7, #23]
 80087aa:	3301      	adds	r3, #1
 80087ac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1e7      	bne.n	8008786 <USBD_GetString+0x52>
 80087b6:	e000      	b.n	80087ba <USBD_GetString+0x86>
    return;
 80087b8:	bf00      	nop
  }
}
 80087ba:	3718      	adds	r7, #24
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80087c8:	2300      	movs	r3, #0
 80087ca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80087d0:	e005      	b.n	80087de <USBD_GetLen+0x1e>
  {
    len++;
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
 80087d4:	3301      	adds	r3, #1
 80087d6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	3301      	adds	r3, #1
 80087dc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1f5      	bne.n	80087d2 <USBD_GetLen+0x12>
  }

  return len;
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2202      	movs	r2, #2
 8008804:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	2100      	movs	r1, #0
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f000 fce1 	bl	80091e2 <USBD_LL_Transmit>

  return USBD_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	60f8      	str	r0, [r7, #12]
 8008832:	60b9      	str	r1, [r7, #8]
 8008834:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	68ba      	ldr	r2, [r7, #8]
 800883a:	2100      	movs	r1, #0
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f000 fcd0 	bl	80091e2 <USBD_LL_Transmit>

  return USBD_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2203      	movs	r2, #3
 800885c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	2100      	movs	r1, #0
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f000 fcd4 	bl	8009224 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b084      	sub	sp, #16
 800888a:	af00      	add	r7, sp, #0
 800888c:	60f8      	str	r0, [r7, #12]
 800888e:	60b9      	str	r1, [r7, #8]
 8008890:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	2100      	movs	r1, #0
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f000 fcc3 	bl	8009224 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2204      	movs	r2, #4
 80088b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80088b8:	2300      	movs	r3, #0
 80088ba:	2200      	movs	r2, #0
 80088bc:	2100      	movs	r1, #0
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fc8f 	bl	80091e2 <USBD_LL_Transmit>

  return USBD_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b082      	sub	sp, #8
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2205      	movs	r2, #5
 80088da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088de:	2300      	movs	r3, #0
 80088e0:	2200      	movs	r2, #0
 80088e2:	2100      	movs	r1, #0
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 fc9d 	bl	8009224 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80088f8:	2200      	movs	r2, #0
 80088fa:	4912      	ldr	r1, [pc, #72]	@ (8008944 <MX_USB_DEVICE_Init+0x50>)
 80088fc:	4812      	ldr	r0, [pc, #72]	@ (8008948 <MX_USB_DEVICE_Init+0x54>)
 80088fe:	f7fe fd09 	bl	8007314 <USBD_Init>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008908:	f7f8 fef8 	bl	80016fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800890c:	490f      	ldr	r1, [pc, #60]	@ (800894c <MX_USB_DEVICE_Init+0x58>)
 800890e:	480e      	ldr	r0, [pc, #56]	@ (8008948 <MX_USB_DEVICE_Init+0x54>)
 8008910:	f7fe fd30 	bl	8007374 <USBD_RegisterClass>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d001      	beq.n	800891e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800891a:	f7f8 feef 	bl	80016fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800891e:	490c      	ldr	r1, [pc, #48]	@ (8008950 <MX_USB_DEVICE_Init+0x5c>)
 8008920:	4809      	ldr	r0, [pc, #36]	@ (8008948 <MX_USB_DEVICE_Init+0x54>)
 8008922:	f7fe fc21 	bl	8007168 <USBD_CDC_RegisterInterface>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d001      	beq.n	8008930 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800892c:	f7f8 fee6 	bl	80016fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008930:	4805      	ldr	r0, [pc, #20]	@ (8008948 <MX_USB_DEVICE_Init+0x54>)
 8008932:	f7fe fd55 	bl	80073e0 <USBD_Start>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d001      	beq.n	8008940 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800893c:	f7f8 fede 	bl	80016fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008940:	bf00      	nop
 8008942:	bd80      	pop	{r7, pc}
 8008944:	200000ac 	.word	0x200000ac
 8008948:	20000524 	.word	0x20000524
 800894c:	20000018 	.word	0x20000018
 8008950:	20000098 	.word	0x20000098

08008954 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008958:	2200      	movs	r2, #0
 800895a:	4905      	ldr	r1, [pc, #20]	@ (8008970 <CDC_Init_FS+0x1c>)
 800895c:	4805      	ldr	r0, [pc, #20]	@ (8008974 <CDC_Init_FS+0x20>)
 800895e:	f7fe fc1d 	bl	800719c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008962:	4905      	ldr	r1, [pc, #20]	@ (8008978 <CDC_Init_FS+0x24>)
 8008964:	4803      	ldr	r0, [pc, #12]	@ (8008974 <CDC_Init_FS+0x20>)
 8008966:	f7fe fc3b 	bl	80071e0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800896a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800896c:	4618      	mov	r0, r3
 800896e:	bd80      	pop	{r7, pc}
 8008970:	20001000 	.word	0x20001000
 8008974:	20000524 	.word	0x20000524
 8008978:	20000800 	.word	0x20000800

0800897c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800897c:	b480      	push	{r7}
 800897e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008980:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008982:	4618      	mov	r0, r3
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	4603      	mov	r3, r0
 8008994:	6039      	str	r1, [r7, #0]
 8008996:	71fb      	strb	r3, [r7, #7]
 8008998:	4613      	mov	r3, r2
 800899a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800899c:	79fb      	ldrb	r3, [r7, #7]
 800899e:	2b23      	cmp	r3, #35	@ 0x23
 80089a0:	d84a      	bhi.n	8008a38 <CDC_Control_FS+0xac>
 80089a2:	a201      	add	r2, pc, #4	@ (adr r2, 80089a8 <CDC_Control_FS+0x1c>)
 80089a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a8:	08008a39 	.word	0x08008a39
 80089ac:	08008a39 	.word	0x08008a39
 80089b0:	08008a39 	.word	0x08008a39
 80089b4:	08008a39 	.word	0x08008a39
 80089b8:	08008a39 	.word	0x08008a39
 80089bc:	08008a39 	.word	0x08008a39
 80089c0:	08008a39 	.word	0x08008a39
 80089c4:	08008a39 	.word	0x08008a39
 80089c8:	08008a39 	.word	0x08008a39
 80089cc:	08008a39 	.word	0x08008a39
 80089d0:	08008a39 	.word	0x08008a39
 80089d4:	08008a39 	.word	0x08008a39
 80089d8:	08008a39 	.word	0x08008a39
 80089dc:	08008a39 	.word	0x08008a39
 80089e0:	08008a39 	.word	0x08008a39
 80089e4:	08008a39 	.word	0x08008a39
 80089e8:	08008a39 	.word	0x08008a39
 80089ec:	08008a39 	.word	0x08008a39
 80089f0:	08008a39 	.word	0x08008a39
 80089f4:	08008a39 	.word	0x08008a39
 80089f8:	08008a39 	.word	0x08008a39
 80089fc:	08008a39 	.word	0x08008a39
 8008a00:	08008a39 	.word	0x08008a39
 8008a04:	08008a39 	.word	0x08008a39
 8008a08:	08008a39 	.word	0x08008a39
 8008a0c:	08008a39 	.word	0x08008a39
 8008a10:	08008a39 	.word	0x08008a39
 8008a14:	08008a39 	.word	0x08008a39
 8008a18:	08008a39 	.word	0x08008a39
 8008a1c:	08008a39 	.word	0x08008a39
 8008a20:	08008a39 	.word	0x08008a39
 8008a24:	08008a39 	.word	0x08008a39
 8008a28:	08008a39 	.word	0x08008a39
 8008a2c:	08008a39 	.word	0x08008a39
 8008a30:	08008a39 	.word	0x08008a39
 8008a34:	08008a39 	.word	0x08008a39
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008a38:	bf00      	nop
  }

  return (USBD_OK);
 8008a3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008a52:	6879      	ldr	r1, [r7, #4]
 8008a54:	4805      	ldr	r0, [pc, #20]	@ (8008a6c <CDC_Receive_FS+0x24>)
 8008a56:	f7fe fbc3 	bl	80071e0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a5a:	4804      	ldr	r0, [pc, #16]	@ (8008a6c <CDC_Receive_FS+0x24>)
 8008a5c:	f7fe fc24 	bl	80072a8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008a60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	20000524 	.word	0x20000524

08008a70 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008a80:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab8 <CDC_Transmit_FS+0x48>)
 8008a82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a86:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e00b      	b.n	8008aae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008a96:	887b      	ldrh	r3, [r7, #2]
 8008a98:	461a      	mov	r2, r3
 8008a9a:	6879      	ldr	r1, [r7, #4]
 8008a9c:	4806      	ldr	r0, [pc, #24]	@ (8008ab8 <CDC_Transmit_FS+0x48>)
 8008a9e:	f7fe fb7d 	bl	800719c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008aa2:	4805      	ldr	r0, [pc, #20]	@ (8008ab8 <CDC_Transmit_FS+0x48>)
 8008aa4:	f7fe fbba 	bl	800721c <USBD_CDC_TransmitPacket>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	20000524 	.word	0x20000524

08008abc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b087      	sub	sp, #28
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008aca:	2300      	movs	r3, #0
 8008acc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008ace:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	371c      	adds	r7, #28
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
	...

08008ae0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	6039      	str	r1, [r7, #0]
 8008aea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	2212      	movs	r2, #18
 8008af0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008af2:	4b03      	ldr	r3, [pc, #12]	@ (8008b00 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	200000c8 	.word	0x200000c8

08008b04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	6039      	str	r1, [r7, #0]
 8008b0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	2204      	movs	r2, #4
 8008b14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b16:	4b03      	ldr	r3, [pc, #12]	@ (8008b24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr
 8008b24:	200000dc 	.word	0x200000dc

08008b28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	4603      	mov	r3, r0
 8008b30:	6039      	str	r1, [r7, #0]
 8008b32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b34:	79fb      	ldrb	r3, [r7, #7]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d105      	bne.n	8008b46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	4907      	ldr	r1, [pc, #28]	@ (8008b5c <USBD_FS_ProductStrDescriptor+0x34>)
 8008b3e:	4808      	ldr	r0, [pc, #32]	@ (8008b60 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b40:	f7ff fdf8 	bl	8008734 <USBD_GetString>
 8008b44:	e004      	b.n	8008b50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	4904      	ldr	r1, [pc, #16]	@ (8008b5c <USBD_FS_ProductStrDescriptor+0x34>)
 8008b4a:	4805      	ldr	r0, [pc, #20]	@ (8008b60 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b4c:	f7ff fdf2 	bl	8008734 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b50:	4b02      	ldr	r3, [pc, #8]	@ (8008b5c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	20001800 	.word	0x20001800
 8008b60:	0800bff8 	.word	0x0800bff8

08008b64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	6039      	str	r1, [r7, #0]
 8008b6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	4904      	ldr	r1, [pc, #16]	@ (8008b84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008b74:	4804      	ldr	r0, [pc, #16]	@ (8008b88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008b76:	f7ff fddd 	bl	8008734 <USBD_GetString>
  return USBD_StrDesc;
 8008b7a:	4b02      	ldr	r3, [pc, #8]	@ (8008b84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	20001800 	.word	0x20001800
 8008b88:	0800c010 	.word	0x0800c010

08008b8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	4603      	mov	r3, r0
 8008b94:	6039      	str	r1, [r7, #0]
 8008b96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	221a      	movs	r2, #26
 8008b9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b9e:	f000 f843 	bl	8008c28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008ba2:	4b02      	ldr	r3, [pc, #8]	@ (8008bac <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3708      	adds	r7, #8
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	200000e0 	.word	0x200000e0

08008bb0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	6039      	str	r1, [r7, #0]
 8008bba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008bbc:	79fb      	ldrb	r3, [r7, #7]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d105      	bne.n	8008bce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008bc2:	683a      	ldr	r2, [r7, #0]
 8008bc4:	4907      	ldr	r1, [pc, #28]	@ (8008be4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008bc6:	4808      	ldr	r0, [pc, #32]	@ (8008be8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bc8:	f7ff fdb4 	bl	8008734 <USBD_GetString>
 8008bcc:	e004      	b.n	8008bd8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008bce:	683a      	ldr	r2, [r7, #0]
 8008bd0:	4904      	ldr	r1, [pc, #16]	@ (8008be4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008bd2:	4805      	ldr	r0, [pc, #20]	@ (8008be8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bd4:	f7ff fdae 	bl	8008734 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bd8:	4b02      	ldr	r3, [pc, #8]	@ (8008be4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	20001800 	.word	0x20001800
 8008be8:	0800c024 	.word	0x0800c024

08008bec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	6039      	str	r1, [r7, #0]
 8008bf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bf8:	79fb      	ldrb	r3, [r7, #7]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d105      	bne.n	8008c0a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bfe:	683a      	ldr	r2, [r7, #0]
 8008c00:	4907      	ldr	r1, [pc, #28]	@ (8008c20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c02:	4808      	ldr	r0, [pc, #32]	@ (8008c24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c04:	f7ff fd96 	bl	8008734 <USBD_GetString>
 8008c08:	e004      	b.n	8008c14 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c0a:	683a      	ldr	r2, [r7, #0]
 8008c0c:	4904      	ldr	r1, [pc, #16]	@ (8008c20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c0e:	4805      	ldr	r0, [pc, #20]	@ (8008c24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c10:	f7ff fd90 	bl	8008734 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c14:	4b02      	ldr	r3, [pc, #8]	@ (8008c20 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	20001800 	.word	0x20001800
 8008c24:	0800c030 	.word	0x0800c030

08008c28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8008c6c <Get_SerialNum+0x44>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c34:	4b0e      	ldr	r3, [pc, #56]	@ (8008c70 <Get_SerialNum+0x48>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8008c74 <Get_SerialNum+0x4c>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4413      	add	r3, r2
 8008c46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d009      	beq.n	8008c62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c4e:	2208      	movs	r2, #8
 8008c50:	4909      	ldr	r1, [pc, #36]	@ (8008c78 <Get_SerialNum+0x50>)
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f000 f814 	bl	8008c80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c58:	2204      	movs	r2, #4
 8008c5a:	4908      	ldr	r1, [pc, #32]	@ (8008c7c <Get_SerialNum+0x54>)
 8008c5c:	68b8      	ldr	r0, [r7, #8]
 8008c5e:	f000 f80f 	bl	8008c80 <IntToUnicode>
  }
}
 8008c62:	bf00      	nop
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	1fff7a10 	.word	0x1fff7a10
 8008c70:	1fff7a14 	.word	0x1fff7a14
 8008c74:	1fff7a18 	.word	0x1fff7a18
 8008c78:	200000e2 	.word	0x200000e2
 8008c7c:	200000f2 	.word	0x200000f2

08008c80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b087      	sub	sp, #28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c92:	2300      	movs	r3, #0
 8008c94:	75fb      	strb	r3, [r7, #23]
 8008c96:	e027      	b.n	8008ce8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	0f1b      	lsrs	r3, r3, #28
 8008c9c:	2b09      	cmp	r3, #9
 8008c9e:	d80b      	bhi.n	8008cb8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	0f1b      	lsrs	r3, r3, #28
 8008ca4:	b2da      	uxtb	r2, r3
 8008ca6:	7dfb      	ldrb	r3, [r7, #23]
 8008ca8:	005b      	lsls	r3, r3, #1
 8008caa:	4619      	mov	r1, r3
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	440b      	add	r3, r1
 8008cb0:	3230      	adds	r2, #48	@ 0x30
 8008cb2:	b2d2      	uxtb	r2, r2
 8008cb4:	701a      	strb	r2, [r3, #0]
 8008cb6:	e00a      	b.n	8008cce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	0f1b      	lsrs	r3, r3, #28
 8008cbc:	b2da      	uxtb	r2, r3
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
 8008cc0:	005b      	lsls	r3, r3, #1
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	440b      	add	r3, r1
 8008cc8:	3237      	adds	r2, #55	@ 0x37
 8008cca:	b2d2      	uxtb	r2, r2
 8008ccc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	011b      	lsls	r3, r3, #4
 8008cd2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008cd4:	7dfb      	ldrb	r3, [r7, #23]
 8008cd6:	005b      	lsls	r3, r3, #1
 8008cd8:	3301      	adds	r3, #1
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	4413      	add	r3, r2
 8008cde:	2200      	movs	r2, #0
 8008ce0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008ce2:	7dfb      	ldrb	r3, [r7, #23]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	75fb      	strb	r3, [r7, #23]
 8008ce8:	7dfa      	ldrb	r2, [r7, #23]
 8008cea:	79fb      	ldrb	r3, [r7, #7]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d3d3      	bcc.n	8008c98 <IntToUnicode+0x18>
  }
}
 8008cf0:	bf00      	nop
 8008cf2:	bf00      	nop
 8008cf4:	371c      	adds	r7, #28
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
	...

08008d00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b08a      	sub	sp, #40	@ 0x28
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d08:	f107 0314 	add.w	r3, r7, #20
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	601a      	str	r2, [r3, #0]
 8008d10:	605a      	str	r2, [r3, #4]
 8008d12:	609a      	str	r2, [r3, #8]
 8008d14:	60da      	str	r2, [r3, #12]
 8008d16:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d20:	d13a      	bne.n	8008d98 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d22:	2300      	movs	r3, #0
 8008d24:	613b      	str	r3, [r7, #16]
 8008d26:	4b1e      	ldr	r3, [pc, #120]	@ (8008da0 <HAL_PCD_MspInit+0xa0>)
 8008d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8008da0 <HAL_PCD_MspInit+0xa0>)
 8008d2c:	f043 0301 	orr.w	r3, r3, #1
 8008d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d32:	4b1b      	ldr	r3, [pc, #108]	@ (8008da0 <HAL_PCD_MspInit+0xa0>)
 8008d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d36:	f003 0301 	and.w	r3, r3, #1
 8008d3a:	613b      	str	r3, [r7, #16]
 8008d3c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008d3e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d44:	2302      	movs	r3, #2
 8008d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d50:	230a      	movs	r3, #10
 8008d52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d54:	f107 0314 	add.w	r3, r7, #20
 8008d58:	4619      	mov	r1, r3
 8008d5a:	4812      	ldr	r0, [pc, #72]	@ (8008da4 <HAL_PCD_MspInit+0xa4>)
 8008d5c:	f7f9 f8cc 	bl	8001ef8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d60:	4b0f      	ldr	r3, [pc, #60]	@ (8008da0 <HAL_PCD_MspInit+0xa0>)
 8008d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d64:	4a0e      	ldr	r2, [pc, #56]	@ (8008da0 <HAL_PCD_MspInit+0xa0>)
 8008d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d6a:	6353      	str	r3, [r2, #52]	@ 0x34
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	60fb      	str	r3, [r7, #12]
 8008d70:	4b0b      	ldr	r3, [pc, #44]	@ (8008da0 <HAL_PCD_MspInit+0xa0>)
 8008d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d74:	4a0a      	ldr	r2, [pc, #40]	@ (8008da0 <HAL_PCD_MspInit+0xa0>)
 8008d76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008d7a:	6453      	str	r3, [r2, #68]	@ 0x44
 8008d7c:	4b08      	ldr	r3, [pc, #32]	@ (8008da0 <HAL_PCD_MspInit+0xa0>)
 8008d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d84:	60fb      	str	r3, [r7, #12]
 8008d86:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d88:	2200      	movs	r2, #0
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	2043      	movs	r0, #67	@ 0x43
 8008d8e:	f7f8 ffea 	bl	8001d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d92:	2043      	movs	r0, #67	@ 0x43
 8008d94:	f7f9 f803 	bl	8001d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d98:	bf00      	nop
 8008d9a:	3728      	adds	r7, #40	@ 0x28
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	40023800 	.word	0x40023800
 8008da4:	40020000 	.word	0x40020000

08008da8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	4610      	mov	r0, r2
 8008dc0:	f7fe fb5b 	bl	800747a <USBD_LL_SetupStage>
}
 8008dc4:	bf00      	nop
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8008dde:	78fa      	ldrb	r2, [r7, #3]
 8008de0:	6879      	ldr	r1, [r7, #4]
 8008de2:	4613      	mov	r3, r2
 8008de4:	00db      	lsls	r3, r3, #3
 8008de6:	4413      	add	r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	440b      	add	r3, r1
 8008dec:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	78fb      	ldrb	r3, [r7, #3]
 8008df4:	4619      	mov	r1, r3
 8008df6:	f7fe fb95 	bl	8007524 <USBD_LL_DataOutStage>
}
 8008dfa:	bf00      	nop
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b082      	sub	sp, #8
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8008e14:	78fa      	ldrb	r2, [r7, #3]
 8008e16:	6879      	ldr	r1, [r7, #4]
 8008e18:	4613      	mov	r3, r2
 8008e1a:	00db      	lsls	r3, r3, #3
 8008e1c:	4413      	add	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	440b      	add	r3, r1
 8008e22:	334c      	adds	r3, #76	@ 0x4c
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	78fb      	ldrb	r3, [r7, #3]
 8008e28:	4619      	mov	r1, r3
 8008e2a:	f7fe fc2e 	bl	800768a <USBD_LL_DataInStage>
}
 8008e2e:	bf00      	nop
 8008e30:	3708      	adds	r7, #8
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b082      	sub	sp, #8
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7fe fd62 	bl	800790e <USBD_LL_SOF>
}
 8008e4a:	bf00      	nop
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b084      	sub	sp, #16
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d001      	beq.n	8008e6a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e66:	f7f8 fc49 	bl	80016fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008e70:	7bfa      	ldrb	r2, [r7, #15]
 8008e72:	4611      	mov	r1, r2
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7fe fd0c 	bl	8007892 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7fe fcb4 	bl	80077ee <USBD_LL_Reset>
}
 8008e86:	bf00      	nop
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
	...

08008e90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fe fd07 	bl	80078b2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	6812      	ldr	r2, [r2, #0]
 8008eb2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008eb6:	f043 0301 	orr.w	r3, r3, #1
 8008eba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6a1b      	ldr	r3, [r3, #32]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d005      	beq.n	8008ed0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ec4:	4b04      	ldr	r3, [pc, #16]	@ (8008ed8 <HAL_PCD_SuspendCallback+0x48>)
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	4a03      	ldr	r2, [pc, #12]	@ (8008ed8 <HAL_PCD_SuspendCallback+0x48>)
 8008eca:	f043 0306 	orr.w	r3, r3, #6
 8008ece:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ed0:	bf00      	nop
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	e000ed00 	.word	0xe000ed00

08008edc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fe fcf7 	bl	80078de <USBD_LL_Resume>
}
 8008ef0:	bf00      	nop
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	460b      	mov	r3, r1
 8008f02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008f0a:	78fa      	ldrb	r2, [r7, #3]
 8008f0c:	4611      	mov	r1, r2
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fe fd4f 	bl	80079b2 <USBD_LL_IsoOUTIncomplete>
}
 8008f14:	bf00      	nop
 8008f16:	3708      	adds	r7, #8
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	460b      	mov	r3, r1
 8008f26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008f2e:	78fa      	ldrb	r2, [r7, #3]
 8008f30:	4611      	mov	r1, r2
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7fe fd0b 	bl	800794e <USBD_LL_IsoINIncomplete>
}
 8008f38:	bf00      	nop
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fe fd61 	bl	8007a16 <USBD_LL_DevConnected>
}
 8008f54:	bf00      	nop
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fe fd5e 	bl	8007a2c <USBD_LL_DevDisconnected>
}
 8008f70:	bf00      	nop
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d13c      	bne.n	8009002 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008f88:	4a20      	ldr	r2, [pc, #128]	@ (800900c <USBD_LL_Init+0x94>)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a1e      	ldr	r2, [pc, #120]	@ (800900c <USBD_LL_Init+0x94>)
 8008f94:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f98:	4b1c      	ldr	r3, [pc, #112]	@ (800900c <USBD_LL_Init+0x94>)
 8008f9a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008f9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800900c <USBD_LL_Init+0x94>)
 8008fa2:	2204      	movs	r2, #4
 8008fa4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008fa6:	4b19      	ldr	r3, [pc, #100]	@ (800900c <USBD_LL_Init+0x94>)
 8008fa8:	2202      	movs	r2, #2
 8008faa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008fac:	4b17      	ldr	r3, [pc, #92]	@ (800900c <USBD_LL_Init+0x94>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008fb2:	4b16      	ldr	r3, [pc, #88]	@ (800900c <USBD_LL_Init+0x94>)
 8008fb4:	2202      	movs	r2, #2
 8008fb6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008fb8:	4b14      	ldr	r3, [pc, #80]	@ (800900c <USBD_LL_Init+0x94>)
 8008fba:	2200      	movs	r2, #0
 8008fbc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008fbe:	4b13      	ldr	r3, [pc, #76]	@ (800900c <USBD_LL_Init+0x94>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008fc4:	4b11      	ldr	r3, [pc, #68]	@ (800900c <USBD_LL_Init+0x94>)
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008fca:	4b10      	ldr	r3, [pc, #64]	@ (800900c <USBD_LL_Init+0x94>)
 8008fcc:	2200      	movs	r2, #0
 8008fce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800900c <USBD_LL_Init+0x94>)
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008fd6:	480d      	ldr	r0, [pc, #52]	@ (800900c <USBD_LL_Init+0x94>)
 8008fd8:	f7f9 f92b 	bl	8002232 <HAL_PCD_Init>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d001      	beq.n	8008fe6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008fe2:	f7f8 fb8b 	bl	80016fc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008fe6:	2180      	movs	r1, #128	@ 0x80
 8008fe8:	4808      	ldr	r0, [pc, #32]	@ (800900c <USBD_LL_Init+0x94>)
 8008fea:	f7fa fb82 	bl	80036f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008fee:	2240      	movs	r2, #64	@ 0x40
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	4806      	ldr	r0, [pc, #24]	@ (800900c <USBD_LL_Init+0x94>)
 8008ff4:	f7fa fb36 	bl	8003664 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008ff8:	2280      	movs	r2, #128	@ 0x80
 8008ffa:	2101      	movs	r1, #1
 8008ffc:	4803      	ldr	r0, [pc, #12]	@ (800900c <USBD_LL_Init+0x94>)
 8008ffe:	f7fa fb31 	bl	8003664 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3708      	adds	r7, #8
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	20001a00 	.word	0x20001a00

08009010 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009018:	2300      	movs	r3, #0
 800901a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800901c:	2300      	movs	r3, #0
 800901e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009026:	4618      	mov	r0, r3
 8009028:	f7f9 fa20 	bl	800246c <HAL_PCD_Start>
 800902c:	4603      	mov	r3, r0
 800902e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009030:	7bfb      	ldrb	r3, [r7, #15]
 8009032:	4618      	mov	r0, r3
 8009034:	f000 f942 	bl	80092bc <USBD_Get_USB_Status>
 8009038:	4603      	mov	r3, r0
 800903a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800903c:	7bbb      	ldrb	r3, [r7, #14]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b084      	sub	sp, #16
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
 800904e:	4608      	mov	r0, r1
 8009050:	4611      	mov	r1, r2
 8009052:	461a      	mov	r2, r3
 8009054:	4603      	mov	r3, r0
 8009056:	70fb      	strb	r3, [r7, #3]
 8009058:	460b      	mov	r3, r1
 800905a:	70bb      	strb	r3, [r7, #2]
 800905c:	4613      	mov	r3, r2
 800905e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009060:	2300      	movs	r3, #0
 8009062:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009064:	2300      	movs	r3, #0
 8009066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800906e:	78bb      	ldrb	r3, [r7, #2]
 8009070:	883a      	ldrh	r2, [r7, #0]
 8009072:	78f9      	ldrb	r1, [r7, #3]
 8009074:	f7f9 fef1 	bl	8002e5a <HAL_PCD_EP_Open>
 8009078:	4603      	mov	r3, r0
 800907a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800907c:	7bfb      	ldrb	r3, [r7, #15]
 800907e:	4618      	mov	r0, r3
 8009080:	f000 f91c 	bl	80092bc <USBD_Get_USB_Status>
 8009084:	4603      	mov	r3, r0
 8009086:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009088:	7bbb      	ldrb	r3, [r7, #14]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b084      	sub	sp, #16
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	460b      	mov	r3, r1
 800909c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800909e:	2300      	movs	r3, #0
 80090a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090ac:	78fa      	ldrb	r2, [r7, #3]
 80090ae:	4611      	mov	r1, r2
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7f9 ff3a 	bl	8002f2a <HAL_PCD_EP_Close>
 80090b6:	4603      	mov	r3, r0
 80090b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090ba:	7bfb      	ldrb	r3, [r7, #15]
 80090bc:	4618      	mov	r0, r3
 80090be:	f000 f8fd 	bl	80092bc <USBD_Get_USB_Status>
 80090c2:	4603      	mov	r3, r0
 80090c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	460b      	mov	r3, r1
 80090da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090dc:	2300      	movs	r3, #0
 80090de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090e0:	2300      	movs	r3, #0
 80090e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090ea:	78fa      	ldrb	r2, [r7, #3]
 80090ec:	4611      	mov	r1, r2
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fa f812 	bl	8003118 <HAL_PCD_EP_SetStall>
 80090f4:	4603      	mov	r3, r0
 80090f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
 80090fa:	4618      	mov	r0, r3
 80090fc:	f000 f8de 	bl	80092bc <USBD_Get_USB_Status>
 8009100:	4603      	mov	r3, r0
 8009102:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009104:	7bbb      	ldrb	r3, [r7, #14]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b084      	sub	sp, #16
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
 8009116:	460b      	mov	r3, r1
 8009118:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800911a:	2300      	movs	r3, #0
 800911c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800911e:	2300      	movs	r3, #0
 8009120:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009128:	78fa      	ldrb	r2, [r7, #3]
 800912a:	4611      	mov	r1, r2
 800912c:	4618      	mov	r0, r3
 800912e:	f7fa f857 	bl	80031e0 <HAL_PCD_EP_ClrStall>
 8009132:	4603      	mov	r3, r0
 8009134:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009136:	7bfb      	ldrb	r3, [r7, #15]
 8009138:	4618      	mov	r0, r3
 800913a:	f000 f8bf 	bl	80092bc <USBD_Get_USB_Status>
 800913e:	4603      	mov	r3, r0
 8009140:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009142:	7bbb      	ldrb	r3, [r7, #14]
}
 8009144:	4618      	mov	r0, r3
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800914c:	b480      	push	{r7}
 800914e:	b085      	sub	sp, #20
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	460b      	mov	r3, r1
 8009156:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800915e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009160:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009164:	2b00      	cmp	r3, #0
 8009166:	da0b      	bge.n	8009180 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009168:	78fb      	ldrb	r3, [r7, #3]
 800916a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800916e:	68f9      	ldr	r1, [r7, #12]
 8009170:	4613      	mov	r3, r2
 8009172:	00db      	lsls	r3, r3, #3
 8009174:	4413      	add	r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	440b      	add	r3, r1
 800917a:	333e      	adds	r3, #62	@ 0x3e
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	e00b      	b.n	8009198 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009180:	78fb      	ldrb	r3, [r7, #3]
 8009182:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009186:	68f9      	ldr	r1, [r7, #12]
 8009188:	4613      	mov	r3, r2
 800918a:	00db      	lsls	r3, r3, #3
 800918c:	4413      	add	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	440b      	add	r3, r1
 8009192:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 8009196:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009198:	4618      	mov	r0, r3
 800919a:	3714      	adds	r7, #20
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	460b      	mov	r3, r1
 80091ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091b4:	2300      	movs	r3, #0
 80091b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80091be:	78fa      	ldrb	r2, [r7, #3]
 80091c0:	4611      	mov	r1, r2
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7f9 fe24 	bl	8002e10 <HAL_PCD_SetAddress>
 80091c8:	4603      	mov	r3, r0
 80091ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 f874 	bl	80092bc <USBD_Get_USB_Status>
 80091d4:	4603      	mov	r3, r0
 80091d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b086      	sub	sp, #24
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	60f8      	str	r0, [r7, #12]
 80091ea:	607a      	str	r2, [r7, #4]
 80091ec:	603b      	str	r3, [r7, #0]
 80091ee:	460b      	mov	r3, r1
 80091f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009200:	7af9      	ldrb	r1, [r7, #11]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	f7f9 ff3d 	bl	8003084 <HAL_PCD_EP_Transmit>
 800920a:	4603      	mov	r3, r0
 800920c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800920e:	7dfb      	ldrb	r3, [r7, #23]
 8009210:	4618      	mov	r0, r3
 8009212:	f000 f853 	bl	80092bc <USBD_Get_USB_Status>
 8009216:	4603      	mov	r3, r0
 8009218:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800921a:	7dbb      	ldrb	r3, [r7, #22]
}
 800921c:	4618      	mov	r0, r3
 800921e:	3718      	adds	r7, #24
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	607a      	str	r2, [r7, #4]
 800922e:	603b      	str	r3, [r7, #0]
 8009230:	460b      	mov	r3, r1
 8009232:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009234:	2300      	movs	r3, #0
 8009236:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009242:	7af9      	ldrb	r1, [r7, #11]
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	f7f9 feb9 	bl	8002fbe <HAL_PCD_EP_Receive>
 800924c:	4603      	mov	r3, r0
 800924e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009250:	7dfb      	ldrb	r3, [r7, #23]
 8009252:	4618      	mov	r0, r3
 8009254:	f000 f832 	bl	80092bc <USBD_Get_USB_Status>
 8009258:	4603      	mov	r3, r0
 800925a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800925c:	7dbb      	ldrb	r3, [r7, #22]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3718      	adds	r7, #24
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b082      	sub	sp, #8
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	460b      	mov	r3, r1
 8009270:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009278:	78fa      	ldrb	r2, [r7, #3]
 800927a:	4611      	mov	r1, r2
 800927c:	4618      	mov	r0, r3
 800927e:	f7f9 fee9 	bl	8003054 <HAL_PCD_EP_GetRxCount>
 8009282:	4603      	mov	r3, r0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009294:	4b03      	ldr	r3, [pc, #12]	@ (80092a4 <USBD_static_malloc+0x18>)
}
 8009296:	4618      	mov	r0, r3
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	20001f0c 	.word	0x20001f0c

080092a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]

}
 80092b0:	bf00      	nop
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	4603      	mov	r3, r0
 80092c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092ca:	79fb      	ldrb	r3, [r7, #7]
 80092cc:	2b03      	cmp	r3, #3
 80092ce:	d817      	bhi.n	8009300 <USBD_Get_USB_Status+0x44>
 80092d0:	a201      	add	r2, pc, #4	@ (adr r2, 80092d8 <USBD_Get_USB_Status+0x1c>)
 80092d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d6:	bf00      	nop
 80092d8:	080092e9 	.word	0x080092e9
 80092dc:	080092ef 	.word	0x080092ef
 80092e0:	080092f5 	.word	0x080092f5
 80092e4:	080092fb 	.word	0x080092fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80092e8:	2300      	movs	r3, #0
 80092ea:	73fb      	strb	r3, [r7, #15]
    break;
 80092ec:	e00b      	b.n	8009306 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092ee:	2303      	movs	r3, #3
 80092f0:	73fb      	strb	r3, [r7, #15]
    break;
 80092f2:	e008      	b.n	8009306 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80092f4:	2301      	movs	r3, #1
 80092f6:	73fb      	strb	r3, [r7, #15]
    break;
 80092f8:	e005      	b.n	8009306 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80092fa:	2303      	movs	r3, #3
 80092fc:	73fb      	strb	r3, [r7, #15]
    break;
 80092fe:	e002      	b.n	8009306 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009300:	2303      	movs	r3, #3
 8009302:	73fb      	strb	r3, [r7, #15]
    break;
 8009304:	bf00      	nop
  }
  return usb_status;
 8009306:	7bfb      	ldrb	r3, [r7, #15]
}
 8009308:	4618      	mov	r0, r3
 800930a:	3714      	adds	r7, #20
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <__cvt>:
 8009314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009318:	ec57 6b10 	vmov	r6, r7, d0
 800931c:	2f00      	cmp	r7, #0
 800931e:	460c      	mov	r4, r1
 8009320:	4619      	mov	r1, r3
 8009322:	463b      	mov	r3, r7
 8009324:	bfbb      	ittet	lt
 8009326:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800932a:	461f      	movlt	r7, r3
 800932c:	2300      	movge	r3, #0
 800932e:	232d      	movlt	r3, #45	@ 0x2d
 8009330:	700b      	strb	r3, [r1, #0]
 8009332:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009334:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009338:	4691      	mov	r9, r2
 800933a:	f023 0820 	bic.w	r8, r3, #32
 800933e:	bfbc      	itt	lt
 8009340:	4632      	movlt	r2, r6
 8009342:	4616      	movlt	r6, r2
 8009344:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009348:	d005      	beq.n	8009356 <__cvt+0x42>
 800934a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800934e:	d100      	bne.n	8009352 <__cvt+0x3e>
 8009350:	3401      	adds	r4, #1
 8009352:	2102      	movs	r1, #2
 8009354:	e000      	b.n	8009358 <__cvt+0x44>
 8009356:	2103      	movs	r1, #3
 8009358:	ab03      	add	r3, sp, #12
 800935a:	9301      	str	r3, [sp, #4]
 800935c:	ab02      	add	r3, sp, #8
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	ec47 6b10 	vmov	d0, r6, r7
 8009364:	4653      	mov	r3, sl
 8009366:	4622      	mov	r2, r4
 8009368:	f000 fe6e 	bl	800a048 <_dtoa_r>
 800936c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009370:	4605      	mov	r5, r0
 8009372:	d119      	bne.n	80093a8 <__cvt+0x94>
 8009374:	f019 0f01 	tst.w	r9, #1
 8009378:	d00e      	beq.n	8009398 <__cvt+0x84>
 800937a:	eb00 0904 	add.w	r9, r0, r4
 800937e:	2200      	movs	r2, #0
 8009380:	2300      	movs	r3, #0
 8009382:	4630      	mov	r0, r6
 8009384:	4639      	mov	r1, r7
 8009386:	f7f7 fba7 	bl	8000ad8 <__aeabi_dcmpeq>
 800938a:	b108      	cbz	r0, 8009390 <__cvt+0x7c>
 800938c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009390:	2230      	movs	r2, #48	@ 0x30
 8009392:	9b03      	ldr	r3, [sp, #12]
 8009394:	454b      	cmp	r3, r9
 8009396:	d31e      	bcc.n	80093d6 <__cvt+0xc2>
 8009398:	9b03      	ldr	r3, [sp, #12]
 800939a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800939c:	1b5b      	subs	r3, r3, r5
 800939e:	4628      	mov	r0, r5
 80093a0:	6013      	str	r3, [r2, #0]
 80093a2:	b004      	add	sp, #16
 80093a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80093ac:	eb00 0904 	add.w	r9, r0, r4
 80093b0:	d1e5      	bne.n	800937e <__cvt+0x6a>
 80093b2:	7803      	ldrb	r3, [r0, #0]
 80093b4:	2b30      	cmp	r3, #48	@ 0x30
 80093b6:	d10a      	bne.n	80093ce <__cvt+0xba>
 80093b8:	2200      	movs	r2, #0
 80093ba:	2300      	movs	r3, #0
 80093bc:	4630      	mov	r0, r6
 80093be:	4639      	mov	r1, r7
 80093c0:	f7f7 fb8a 	bl	8000ad8 <__aeabi_dcmpeq>
 80093c4:	b918      	cbnz	r0, 80093ce <__cvt+0xba>
 80093c6:	f1c4 0401 	rsb	r4, r4, #1
 80093ca:	f8ca 4000 	str.w	r4, [sl]
 80093ce:	f8da 3000 	ldr.w	r3, [sl]
 80093d2:	4499      	add	r9, r3
 80093d4:	e7d3      	b.n	800937e <__cvt+0x6a>
 80093d6:	1c59      	adds	r1, r3, #1
 80093d8:	9103      	str	r1, [sp, #12]
 80093da:	701a      	strb	r2, [r3, #0]
 80093dc:	e7d9      	b.n	8009392 <__cvt+0x7e>

080093de <__exponent>:
 80093de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093e0:	2900      	cmp	r1, #0
 80093e2:	bfba      	itte	lt
 80093e4:	4249      	neglt	r1, r1
 80093e6:	232d      	movlt	r3, #45	@ 0x2d
 80093e8:	232b      	movge	r3, #43	@ 0x2b
 80093ea:	2909      	cmp	r1, #9
 80093ec:	7002      	strb	r2, [r0, #0]
 80093ee:	7043      	strb	r3, [r0, #1]
 80093f0:	dd29      	ble.n	8009446 <__exponent+0x68>
 80093f2:	f10d 0307 	add.w	r3, sp, #7
 80093f6:	461d      	mov	r5, r3
 80093f8:	270a      	movs	r7, #10
 80093fa:	461a      	mov	r2, r3
 80093fc:	fbb1 f6f7 	udiv	r6, r1, r7
 8009400:	fb07 1416 	mls	r4, r7, r6, r1
 8009404:	3430      	adds	r4, #48	@ 0x30
 8009406:	f802 4c01 	strb.w	r4, [r2, #-1]
 800940a:	460c      	mov	r4, r1
 800940c:	2c63      	cmp	r4, #99	@ 0x63
 800940e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009412:	4631      	mov	r1, r6
 8009414:	dcf1      	bgt.n	80093fa <__exponent+0x1c>
 8009416:	3130      	adds	r1, #48	@ 0x30
 8009418:	1e94      	subs	r4, r2, #2
 800941a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800941e:	1c41      	adds	r1, r0, #1
 8009420:	4623      	mov	r3, r4
 8009422:	42ab      	cmp	r3, r5
 8009424:	d30a      	bcc.n	800943c <__exponent+0x5e>
 8009426:	f10d 0309 	add.w	r3, sp, #9
 800942a:	1a9b      	subs	r3, r3, r2
 800942c:	42ac      	cmp	r4, r5
 800942e:	bf88      	it	hi
 8009430:	2300      	movhi	r3, #0
 8009432:	3302      	adds	r3, #2
 8009434:	4403      	add	r3, r0
 8009436:	1a18      	subs	r0, r3, r0
 8009438:	b003      	add	sp, #12
 800943a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800943c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009440:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009444:	e7ed      	b.n	8009422 <__exponent+0x44>
 8009446:	2330      	movs	r3, #48	@ 0x30
 8009448:	3130      	adds	r1, #48	@ 0x30
 800944a:	7083      	strb	r3, [r0, #2]
 800944c:	70c1      	strb	r1, [r0, #3]
 800944e:	1d03      	adds	r3, r0, #4
 8009450:	e7f1      	b.n	8009436 <__exponent+0x58>
	...

08009454 <_printf_float>:
 8009454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009458:	b08d      	sub	sp, #52	@ 0x34
 800945a:	460c      	mov	r4, r1
 800945c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009460:	4616      	mov	r6, r2
 8009462:	461f      	mov	r7, r3
 8009464:	4605      	mov	r5, r0
 8009466:	f000 fcef 	bl	8009e48 <_localeconv_r>
 800946a:	6803      	ldr	r3, [r0, #0]
 800946c:	9304      	str	r3, [sp, #16]
 800946e:	4618      	mov	r0, r3
 8009470:	f7f6 ff06 	bl	8000280 <strlen>
 8009474:	2300      	movs	r3, #0
 8009476:	930a      	str	r3, [sp, #40]	@ 0x28
 8009478:	f8d8 3000 	ldr.w	r3, [r8]
 800947c:	9005      	str	r0, [sp, #20]
 800947e:	3307      	adds	r3, #7
 8009480:	f023 0307 	bic.w	r3, r3, #7
 8009484:	f103 0208 	add.w	r2, r3, #8
 8009488:	f894 a018 	ldrb.w	sl, [r4, #24]
 800948c:	f8d4 b000 	ldr.w	fp, [r4]
 8009490:	f8c8 2000 	str.w	r2, [r8]
 8009494:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009498:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800949c:	9307      	str	r3, [sp, #28]
 800949e:	f8cd 8018 	str.w	r8, [sp, #24]
 80094a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80094a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094aa:	4b9c      	ldr	r3, [pc, #624]	@ (800971c <_printf_float+0x2c8>)
 80094ac:	f04f 32ff 	mov.w	r2, #4294967295
 80094b0:	f7f7 fb44 	bl	8000b3c <__aeabi_dcmpun>
 80094b4:	bb70      	cbnz	r0, 8009514 <_printf_float+0xc0>
 80094b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094ba:	4b98      	ldr	r3, [pc, #608]	@ (800971c <_printf_float+0x2c8>)
 80094bc:	f04f 32ff 	mov.w	r2, #4294967295
 80094c0:	f7f7 fb1e 	bl	8000b00 <__aeabi_dcmple>
 80094c4:	bb30      	cbnz	r0, 8009514 <_printf_float+0xc0>
 80094c6:	2200      	movs	r2, #0
 80094c8:	2300      	movs	r3, #0
 80094ca:	4640      	mov	r0, r8
 80094cc:	4649      	mov	r1, r9
 80094ce:	f7f7 fb0d 	bl	8000aec <__aeabi_dcmplt>
 80094d2:	b110      	cbz	r0, 80094da <_printf_float+0x86>
 80094d4:	232d      	movs	r3, #45	@ 0x2d
 80094d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094da:	4a91      	ldr	r2, [pc, #580]	@ (8009720 <_printf_float+0x2cc>)
 80094dc:	4b91      	ldr	r3, [pc, #580]	@ (8009724 <_printf_float+0x2d0>)
 80094de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80094e2:	bf94      	ite	ls
 80094e4:	4690      	movls	r8, r2
 80094e6:	4698      	movhi	r8, r3
 80094e8:	2303      	movs	r3, #3
 80094ea:	6123      	str	r3, [r4, #16]
 80094ec:	f02b 0304 	bic.w	r3, fp, #4
 80094f0:	6023      	str	r3, [r4, #0]
 80094f2:	f04f 0900 	mov.w	r9, #0
 80094f6:	9700      	str	r7, [sp, #0]
 80094f8:	4633      	mov	r3, r6
 80094fa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80094fc:	4621      	mov	r1, r4
 80094fe:	4628      	mov	r0, r5
 8009500:	f000 f9d2 	bl	80098a8 <_printf_common>
 8009504:	3001      	adds	r0, #1
 8009506:	f040 808d 	bne.w	8009624 <_printf_float+0x1d0>
 800950a:	f04f 30ff 	mov.w	r0, #4294967295
 800950e:	b00d      	add	sp, #52	@ 0x34
 8009510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009514:	4642      	mov	r2, r8
 8009516:	464b      	mov	r3, r9
 8009518:	4640      	mov	r0, r8
 800951a:	4649      	mov	r1, r9
 800951c:	f7f7 fb0e 	bl	8000b3c <__aeabi_dcmpun>
 8009520:	b140      	cbz	r0, 8009534 <_printf_float+0xe0>
 8009522:	464b      	mov	r3, r9
 8009524:	2b00      	cmp	r3, #0
 8009526:	bfbc      	itt	lt
 8009528:	232d      	movlt	r3, #45	@ 0x2d
 800952a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800952e:	4a7e      	ldr	r2, [pc, #504]	@ (8009728 <_printf_float+0x2d4>)
 8009530:	4b7e      	ldr	r3, [pc, #504]	@ (800972c <_printf_float+0x2d8>)
 8009532:	e7d4      	b.n	80094de <_printf_float+0x8a>
 8009534:	6863      	ldr	r3, [r4, #4]
 8009536:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800953a:	9206      	str	r2, [sp, #24]
 800953c:	1c5a      	adds	r2, r3, #1
 800953e:	d13b      	bne.n	80095b8 <_printf_float+0x164>
 8009540:	2306      	movs	r3, #6
 8009542:	6063      	str	r3, [r4, #4]
 8009544:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009548:	2300      	movs	r3, #0
 800954a:	6022      	str	r2, [r4, #0]
 800954c:	9303      	str	r3, [sp, #12]
 800954e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009550:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009554:	ab09      	add	r3, sp, #36	@ 0x24
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	6861      	ldr	r1, [r4, #4]
 800955a:	ec49 8b10 	vmov	d0, r8, r9
 800955e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009562:	4628      	mov	r0, r5
 8009564:	f7ff fed6 	bl	8009314 <__cvt>
 8009568:	9b06      	ldr	r3, [sp, #24]
 800956a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800956c:	2b47      	cmp	r3, #71	@ 0x47
 800956e:	4680      	mov	r8, r0
 8009570:	d129      	bne.n	80095c6 <_printf_float+0x172>
 8009572:	1cc8      	adds	r0, r1, #3
 8009574:	db02      	blt.n	800957c <_printf_float+0x128>
 8009576:	6863      	ldr	r3, [r4, #4]
 8009578:	4299      	cmp	r1, r3
 800957a:	dd41      	ble.n	8009600 <_printf_float+0x1ac>
 800957c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009580:	fa5f fa8a 	uxtb.w	sl, sl
 8009584:	3901      	subs	r1, #1
 8009586:	4652      	mov	r2, sl
 8009588:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800958c:	9109      	str	r1, [sp, #36]	@ 0x24
 800958e:	f7ff ff26 	bl	80093de <__exponent>
 8009592:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009594:	1813      	adds	r3, r2, r0
 8009596:	2a01      	cmp	r2, #1
 8009598:	4681      	mov	r9, r0
 800959a:	6123      	str	r3, [r4, #16]
 800959c:	dc02      	bgt.n	80095a4 <_printf_float+0x150>
 800959e:	6822      	ldr	r2, [r4, #0]
 80095a0:	07d2      	lsls	r2, r2, #31
 80095a2:	d501      	bpl.n	80095a8 <_printf_float+0x154>
 80095a4:	3301      	adds	r3, #1
 80095a6:	6123      	str	r3, [r4, #16]
 80095a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d0a2      	beq.n	80094f6 <_printf_float+0xa2>
 80095b0:	232d      	movs	r3, #45	@ 0x2d
 80095b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095b6:	e79e      	b.n	80094f6 <_printf_float+0xa2>
 80095b8:	9a06      	ldr	r2, [sp, #24]
 80095ba:	2a47      	cmp	r2, #71	@ 0x47
 80095bc:	d1c2      	bne.n	8009544 <_printf_float+0xf0>
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1c0      	bne.n	8009544 <_printf_float+0xf0>
 80095c2:	2301      	movs	r3, #1
 80095c4:	e7bd      	b.n	8009542 <_printf_float+0xee>
 80095c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80095ca:	d9db      	bls.n	8009584 <_printf_float+0x130>
 80095cc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80095d0:	d118      	bne.n	8009604 <_printf_float+0x1b0>
 80095d2:	2900      	cmp	r1, #0
 80095d4:	6863      	ldr	r3, [r4, #4]
 80095d6:	dd0b      	ble.n	80095f0 <_printf_float+0x19c>
 80095d8:	6121      	str	r1, [r4, #16]
 80095da:	b913      	cbnz	r3, 80095e2 <_printf_float+0x18e>
 80095dc:	6822      	ldr	r2, [r4, #0]
 80095de:	07d0      	lsls	r0, r2, #31
 80095e0:	d502      	bpl.n	80095e8 <_printf_float+0x194>
 80095e2:	3301      	adds	r3, #1
 80095e4:	440b      	add	r3, r1
 80095e6:	6123      	str	r3, [r4, #16]
 80095e8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80095ea:	f04f 0900 	mov.w	r9, #0
 80095ee:	e7db      	b.n	80095a8 <_printf_float+0x154>
 80095f0:	b913      	cbnz	r3, 80095f8 <_printf_float+0x1a4>
 80095f2:	6822      	ldr	r2, [r4, #0]
 80095f4:	07d2      	lsls	r2, r2, #31
 80095f6:	d501      	bpl.n	80095fc <_printf_float+0x1a8>
 80095f8:	3302      	adds	r3, #2
 80095fa:	e7f4      	b.n	80095e6 <_printf_float+0x192>
 80095fc:	2301      	movs	r3, #1
 80095fe:	e7f2      	b.n	80095e6 <_printf_float+0x192>
 8009600:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009606:	4299      	cmp	r1, r3
 8009608:	db05      	blt.n	8009616 <_printf_float+0x1c2>
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	6121      	str	r1, [r4, #16]
 800960e:	07d8      	lsls	r0, r3, #31
 8009610:	d5ea      	bpl.n	80095e8 <_printf_float+0x194>
 8009612:	1c4b      	adds	r3, r1, #1
 8009614:	e7e7      	b.n	80095e6 <_printf_float+0x192>
 8009616:	2900      	cmp	r1, #0
 8009618:	bfd4      	ite	le
 800961a:	f1c1 0202 	rsble	r2, r1, #2
 800961e:	2201      	movgt	r2, #1
 8009620:	4413      	add	r3, r2
 8009622:	e7e0      	b.n	80095e6 <_printf_float+0x192>
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	055a      	lsls	r2, r3, #21
 8009628:	d407      	bmi.n	800963a <_printf_float+0x1e6>
 800962a:	6923      	ldr	r3, [r4, #16]
 800962c:	4642      	mov	r2, r8
 800962e:	4631      	mov	r1, r6
 8009630:	4628      	mov	r0, r5
 8009632:	47b8      	blx	r7
 8009634:	3001      	adds	r0, #1
 8009636:	d12b      	bne.n	8009690 <_printf_float+0x23c>
 8009638:	e767      	b.n	800950a <_printf_float+0xb6>
 800963a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800963e:	f240 80dd 	bls.w	80097fc <_printf_float+0x3a8>
 8009642:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009646:	2200      	movs	r2, #0
 8009648:	2300      	movs	r3, #0
 800964a:	f7f7 fa45 	bl	8000ad8 <__aeabi_dcmpeq>
 800964e:	2800      	cmp	r0, #0
 8009650:	d033      	beq.n	80096ba <_printf_float+0x266>
 8009652:	4a37      	ldr	r2, [pc, #220]	@ (8009730 <_printf_float+0x2dc>)
 8009654:	2301      	movs	r3, #1
 8009656:	4631      	mov	r1, r6
 8009658:	4628      	mov	r0, r5
 800965a:	47b8      	blx	r7
 800965c:	3001      	adds	r0, #1
 800965e:	f43f af54 	beq.w	800950a <_printf_float+0xb6>
 8009662:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009666:	4543      	cmp	r3, r8
 8009668:	db02      	blt.n	8009670 <_printf_float+0x21c>
 800966a:	6823      	ldr	r3, [r4, #0]
 800966c:	07d8      	lsls	r0, r3, #31
 800966e:	d50f      	bpl.n	8009690 <_printf_float+0x23c>
 8009670:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009674:	4631      	mov	r1, r6
 8009676:	4628      	mov	r0, r5
 8009678:	47b8      	blx	r7
 800967a:	3001      	adds	r0, #1
 800967c:	f43f af45 	beq.w	800950a <_printf_float+0xb6>
 8009680:	f04f 0900 	mov.w	r9, #0
 8009684:	f108 38ff 	add.w	r8, r8, #4294967295
 8009688:	f104 0a1a 	add.w	sl, r4, #26
 800968c:	45c8      	cmp	r8, r9
 800968e:	dc09      	bgt.n	80096a4 <_printf_float+0x250>
 8009690:	6823      	ldr	r3, [r4, #0]
 8009692:	079b      	lsls	r3, r3, #30
 8009694:	f100 8103 	bmi.w	800989e <_printf_float+0x44a>
 8009698:	68e0      	ldr	r0, [r4, #12]
 800969a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800969c:	4298      	cmp	r0, r3
 800969e:	bfb8      	it	lt
 80096a0:	4618      	movlt	r0, r3
 80096a2:	e734      	b.n	800950e <_printf_float+0xba>
 80096a4:	2301      	movs	r3, #1
 80096a6:	4652      	mov	r2, sl
 80096a8:	4631      	mov	r1, r6
 80096aa:	4628      	mov	r0, r5
 80096ac:	47b8      	blx	r7
 80096ae:	3001      	adds	r0, #1
 80096b0:	f43f af2b 	beq.w	800950a <_printf_float+0xb6>
 80096b4:	f109 0901 	add.w	r9, r9, #1
 80096b8:	e7e8      	b.n	800968c <_printf_float+0x238>
 80096ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096bc:	2b00      	cmp	r3, #0
 80096be:	dc39      	bgt.n	8009734 <_printf_float+0x2e0>
 80096c0:	4a1b      	ldr	r2, [pc, #108]	@ (8009730 <_printf_float+0x2dc>)
 80096c2:	2301      	movs	r3, #1
 80096c4:	4631      	mov	r1, r6
 80096c6:	4628      	mov	r0, r5
 80096c8:	47b8      	blx	r7
 80096ca:	3001      	adds	r0, #1
 80096cc:	f43f af1d 	beq.w	800950a <_printf_float+0xb6>
 80096d0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80096d4:	ea59 0303 	orrs.w	r3, r9, r3
 80096d8:	d102      	bne.n	80096e0 <_printf_float+0x28c>
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	07d9      	lsls	r1, r3, #31
 80096de:	d5d7      	bpl.n	8009690 <_printf_float+0x23c>
 80096e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096e4:	4631      	mov	r1, r6
 80096e6:	4628      	mov	r0, r5
 80096e8:	47b8      	blx	r7
 80096ea:	3001      	adds	r0, #1
 80096ec:	f43f af0d 	beq.w	800950a <_printf_float+0xb6>
 80096f0:	f04f 0a00 	mov.w	sl, #0
 80096f4:	f104 0b1a 	add.w	fp, r4, #26
 80096f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096fa:	425b      	negs	r3, r3
 80096fc:	4553      	cmp	r3, sl
 80096fe:	dc01      	bgt.n	8009704 <_printf_float+0x2b0>
 8009700:	464b      	mov	r3, r9
 8009702:	e793      	b.n	800962c <_printf_float+0x1d8>
 8009704:	2301      	movs	r3, #1
 8009706:	465a      	mov	r2, fp
 8009708:	4631      	mov	r1, r6
 800970a:	4628      	mov	r0, r5
 800970c:	47b8      	blx	r7
 800970e:	3001      	adds	r0, #1
 8009710:	f43f aefb 	beq.w	800950a <_printf_float+0xb6>
 8009714:	f10a 0a01 	add.w	sl, sl, #1
 8009718:	e7ee      	b.n	80096f8 <_printf_float+0x2a4>
 800971a:	bf00      	nop
 800971c:	7fefffff 	.word	0x7fefffff
 8009720:	0800c058 	.word	0x0800c058
 8009724:	0800c05c 	.word	0x0800c05c
 8009728:	0800c060 	.word	0x0800c060
 800972c:	0800c064 	.word	0x0800c064
 8009730:	0800c068 	.word	0x0800c068
 8009734:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009736:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800973a:	4553      	cmp	r3, sl
 800973c:	bfa8      	it	ge
 800973e:	4653      	movge	r3, sl
 8009740:	2b00      	cmp	r3, #0
 8009742:	4699      	mov	r9, r3
 8009744:	dc36      	bgt.n	80097b4 <_printf_float+0x360>
 8009746:	f04f 0b00 	mov.w	fp, #0
 800974a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800974e:	f104 021a 	add.w	r2, r4, #26
 8009752:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009754:	9306      	str	r3, [sp, #24]
 8009756:	eba3 0309 	sub.w	r3, r3, r9
 800975a:	455b      	cmp	r3, fp
 800975c:	dc31      	bgt.n	80097c2 <_printf_float+0x36e>
 800975e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009760:	459a      	cmp	sl, r3
 8009762:	dc3a      	bgt.n	80097da <_printf_float+0x386>
 8009764:	6823      	ldr	r3, [r4, #0]
 8009766:	07da      	lsls	r2, r3, #31
 8009768:	d437      	bmi.n	80097da <_printf_float+0x386>
 800976a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800976c:	ebaa 0903 	sub.w	r9, sl, r3
 8009770:	9b06      	ldr	r3, [sp, #24]
 8009772:	ebaa 0303 	sub.w	r3, sl, r3
 8009776:	4599      	cmp	r9, r3
 8009778:	bfa8      	it	ge
 800977a:	4699      	movge	r9, r3
 800977c:	f1b9 0f00 	cmp.w	r9, #0
 8009780:	dc33      	bgt.n	80097ea <_printf_float+0x396>
 8009782:	f04f 0800 	mov.w	r8, #0
 8009786:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800978a:	f104 0b1a 	add.w	fp, r4, #26
 800978e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009790:	ebaa 0303 	sub.w	r3, sl, r3
 8009794:	eba3 0309 	sub.w	r3, r3, r9
 8009798:	4543      	cmp	r3, r8
 800979a:	f77f af79 	ble.w	8009690 <_printf_float+0x23c>
 800979e:	2301      	movs	r3, #1
 80097a0:	465a      	mov	r2, fp
 80097a2:	4631      	mov	r1, r6
 80097a4:	4628      	mov	r0, r5
 80097a6:	47b8      	blx	r7
 80097a8:	3001      	adds	r0, #1
 80097aa:	f43f aeae 	beq.w	800950a <_printf_float+0xb6>
 80097ae:	f108 0801 	add.w	r8, r8, #1
 80097b2:	e7ec      	b.n	800978e <_printf_float+0x33a>
 80097b4:	4642      	mov	r2, r8
 80097b6:	4631      	mov	r1, r6
 80097b8:	4628      	mov	r0, r5
 80097ba:	47b8      	blx	r7
 80097bc:	3001      	adds	r0, #1
 80097be:	d1c2      	bne.n	8009746 <_printf_float+0x2f2>
 80097c0:	e6a3      	b.n	800950a <_printf_float+0xb6>
 80097c2:	2301      	movs	r3, #1
 80097c4:	4631      	mov	r1, r6
 80097c6:	4628      	mov	r0, r5
 80097c8:	9206      	str	r2, [sp, #24]
 80097ca:	47b8      	blx	r7
 80097cc:	3001      	adds	r0, #1
 80097ce:	f43f ae9c 	beq.w	800950a <_printf_float+0xb6>
 80097d2:	9a06      	ldr	r2, [sp, #24]
 80097d4:	f10b 0b01 	add.w	fp, fp, #1
 80097d8:	e7bb      	b.n	8009752 <_printf_float+0x2fe>
 80097da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097de:	4631      	mov	r1, r6
 80097e0:	4628      	mov	r0, r5
 80097e2:	47b8      	blx	r7
 80097e4:	3001      	adds	r0, #1
 80097e6:	d1c0      	bne.n	800976a <_printf_float+0x316>
 80097e8:	e68f      	b.n	800950a <_printf_float+0xb6>
 80097ea:	9a06      	ldr	r2, [sp, #24]
 80097ec:	464b      	mov	r3, r9
 80097ee:	4442      	add	r2, r8
 80097f0:	4631      	mov	r1, r6
 80097f2:	4628      	mov	r0, r5
 80097f4:	47b8      	blx	r7
 80097f6:	3001      	adds	r0, #1
 80097f8:	d1c3      	bne.n	8009782 <_printf_float+0x32e>
 80097fa:	e686      	b.n	800950a <_printf_float+0xb6>
 80097fc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009800:	f1ba 0f01 	cmp.w	sl, #1
 8009804:	dc01      	bgt.n	800980a <_printf_float+0x3b6>
 8009806:	07db      	lsls	r3, r3, #31
 8009808:	d536      	bpl.n	8009878 <_printf_float+0x424>
 800980a:	2301      	movs	r3, #1
 800980c:	4642      	mov	r2, r8
 800980e:	4631      	mov	r1, r6
 8009810:	4628      	mov	r0, r5
 8009812:	47b8      	blx	r7
 8009814:	3001      	adds	r0, #1
 8009816:	f43f ae78 	beq.w	800950a <_printf_float+0xb6>
 800981a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800981e:	4631      	mov	r1, r6
 8009820:	4628      	mov	r0, r5
 8009822:	47b8      	blx	r7
 8009824:	3001      	adds	r0, #1
 8009826:	f43f ae70 	beq.w	800950a <_printf_float+0xb6>
 800982a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800982e:	2200      	movs	r2, #0
 8009830:	2300      	movs	r3, #0
 8009832:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009836:	f7f7 f94f 	bl	8000ad8 <__aeabi_dcmpeq>
 800983a:	b9c0      	cbnz	r0, 800986e <_printf_float+0x41a>
 800983c:	4653      	mov	r3, sl
 800983e:	f108 0201 	add.w	r2, r8, #1
 8009842:	4631      	mov	r1, r6
 8009844:	4628      	mov	r0, r5
 8009846:	47b8      	blx	r7
 8009848:	3001      	adds	r0, #1
 800984a:	d10c      	bne.n	8009866 <_printf_float+0x412>
 800984c:	e65d      	b.n	800950a <_printf_float+0xb6>
 800984e:	2301      	movs	r3, #1
 8009850:	465a      	mov	r2, fp
 8009852:	4631      	mov	r1, r6
 8009854:	4628      	mov	r0, r5
 8009856:	47b8      	blx	r7
 8009858:	3001      	adds	r0, #1
 800985a:	f43f ae56 	beq.w	800950a <_printf_float+0xb6>
 800985e:	f108 0801 	add.w	r8, r8, #1
 8009862:	45d0      	cmp	r8, sl
 8009864:	dbf3      	blt.n	800984e <_printf_float+0x3fa>
 8009866:	464b      	mov	r3, r9
 8009868:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800986c:	e6df      	b.n	800962e <_printf_float+0x1da>
 800986e:	f04f 0800 	mov.w	r8, #0
 8009872:	f104 0b1a 	add.w	fp, r4, #26
 8009876:	e7f4      	b.n	8009862 <_printf_float+0x40e>
 8009878:	2301      	movs	r3, #1
 800987a:	4642      	mov	r2, r8
 800987c:	e7e1      	b.n	8009842 <_printf_float+0x3ee>
 800987e:	2301      	movs	r3, #1
 8009880:	464a      	mov	r2, r9
 8009882:	4631      	mov	r1, r6
 8009884:	4628      	mov	r0, r5
 8009886:	47b8      	blx	r7
 8009888:	3001      	adds	r0, #1
 800988a:	f43f ae3e 	beq.w	800950a <_printf_float+0xb6>
 800988e:	f108 0801 	add.w	r8, r8, #1
 8009892:	68e3      	ldr	r3, [r4, #12]
 8009894:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009896:	1a5b      	subs	r3, r3, r1
 8009898:	4543      	cmp	r3, r8
 800989a:	dcf0      	bgt.n	800987e <_printf_float+0x42a>
 800989c:	e6fc      	b.n	8009698 <_printf_float+0x244>
 800989e:	f04f 0800 	mov.w	r8, #0
 80098a2:	f104 0919 	add.w	r9, r4, #25
 80098a6:	e7f4      	b.n	8009892 <_printf_float+0x43e>

080098a8 <_printf_common>:
 80098a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098ac:	4616      	mov	r6, r2
 80098ae:	4698      	mov	r8, r3
 80098b0:	688a      	ldr	r2, [r1, #8]
 80098b2:	690b      	ldr	r3, [r1, #16]
 80098b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80098b8:	4293      	cmp	r3, r2
 80098ba:	bfb8      	it	lt
 80098bc:	4613      	movlt	r3, r2
 80098be:	6033      	str	r3, [r6, #0]
 80098c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80098c4:	4607      	mov	r7, r0
 80098c6:	460c      	mov	r4, r1
 80098c8:	b10a      	cbz	r2, 80098ce <_printf_common+0x26>
 80098ca:	3301      	adds	r3, #1
 80098cc:	6033      	str	r3, [r6, #0]
 80098ce:	6823      	ldr	r3, [r4, #0]
 80098d0:	0699      	lsls	r1, r3, #26
 80098d2:	bf42      	ittt	mi
 80098d4:	6833      	ldrmi	r3, [r6, #0]
 80098d6:	3302      	addmi	r3, #2
 80098d8:	6033      	strmi	r3, [r6, #0]
 80098da:	6825      	ldr	r5, [r4, #0]
 80098dc:	f015 0506 	ands.w	r5, r5, #6
 80098e0:	d106      	bne.n	80098f0 <_printf_common+0x48>
 80098e2:	f104 0a19 	add.w	sl, r4, #25
 80098e6:	68e3      	ldr	r3, [r4, #12]
 80098e8:	6832      	ldr	r2, [r6, #0]
 80098ea:	1a9b      	subs	r3, r3, r2
 80098ec:	42ab      	cmp	r3, r5
 80098ee:	dc26      	bgt.n	800993e <_printf_common+0x96>
 80098f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80098f4:	6822      	ldr	r2, [r4, #0]
 80098f6:	3b00      	subs	r3, #0
 80098f8:	bf18      	it	ne
 80098fa:	2301      	movne	r3, #1
 80098fc:	0692      	lsls	r2, r2, #26
 80098fe:	d42b      	bmi.n	8009958 <_printf_common+0xb0>
 8009900:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009904:	4641      	mov	r1, r8
 8009906:	4638      	mov	r0, r7
 8009908:	47c8      	blx	r9
 800990a:	3001      	adds	r0, #1
 800990c:	d01e      	beq.n	800994c <_printf_common+0xa4>
 800990e:	6823      	ldr	r3, [r4, #0]
 8009910:	6922      	ldr	r2, [r4, #16]
 8009912:	f003 0306 	and.w	r3, r3, #6
 8009916:	2b04      	cmp	r3, #4
 8009918:	bf02      	ittt	eq
 800991a:	68e5      	ldreq	r5, [r4, #12]
 800991c:	6833      	ldreq	r3, [r6, #0]
 800991e:	1aed      	subeq	r5, r5, r3
 8009920:	68a3      	ldr	r3, [r4, #8]
 8009922:	bf0c      	ite	eq
 8009924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009928:	2500      	movne	r5, #0
 800992a:	4293      	cmp	r3, r2
 800992c:	bfc4      	itt	gt
 800992e:	1a9b      	subgt	r3, r3, r2
 8009930:	18ed      	addgt	r5, r5, r3
 8009932:	2600      	movs	r6, #0
 8009934:	341a      	adds	r4, #26
 8009936:	42b5      	cmp	r5, r6
 8009938:	d11a      	bne.n	8009970 <_printf_common+0xc8>
 800993a:	2000      	movs	r0, #0
 800993c:	e008      	b.n	8009950 <_printf_common+0xa8>
 800993e:	2301      	movs	r3, #1
 8009940:	4652      	mov	r2, sl
 8009942:	4641      	mov	r1, r8
 8009944:	4638      	mov	r0, r7
 8009946:	47c8      	blx	r9
 8009948:	3001      	adds	r0, #1
 800994a:	d103      	bne.n	8009954 <_printf_common+0xac>
 800994c:	f04f 30ff 	mov.w	r0, #4294967295
 8009950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009954:	3501      	adds	r5, #1
 8009956:	e7c6      	b.n	80098e6 <_printf_common+0x3e>
 8009958:	18e1      	adds	r1, r4, r3
 800995a:	1c5a      	adds	r2, r3, #1
 800995c:	2030      	movs	r0, #48	@ 0x30
 800995e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009962:	4422      	add	r2, r4
 8009964:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009968:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800996c:	3302      	adds	r3, #2
 800996e:	e7c7      	b.n	8009900 <_printf_common+0x58>
 8009970:	2301      	movs	r3, #1
 8009972:	4622      	mov	r2, r4
 8009974:	4641      	mov	r1, r8
 8009976:	4638      	mov	r0, r7
 8009978:	47c8      	blx	r9
 800997a:	3001      	adds	r0, #1
 800997c:	d0e6      	beq.n	800994c <_printf_common+0xa4>
 800997e:	3601      	adds	r6, #1
 8009980:	e7d9      	b.n	8009936 <_printf_common+0x8e>
	...

08009984 <_printf_i>:
 8009984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009988:	7e0f      	ldrb	r7, [r1, #24]
 800998a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800998c:	2f78      	cmp	r7, #120	@ 0x78
 800998e:	4691      	mov	r9, r2
 8009990:	4680      	mov	r8, r0
 8009992:	460c      	mov	r4, r1
 8009994:	469a      	mov	sl, r3
 8009996:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800999a:	d807      	bhi.n	80099ac <_printf_i+0x28>
 800999c:	2f62      	cmp	r7, #98	@ 0x62
 800999e:	d80a      	bhi.n	80099b6 <_printf_i+0x32>
 80099a0:	2f00      	cmp	r7, #0
 80099a2:	f000 80d2 	beq.w	8009b4a <_printf_i+0x1c6>
 80099a6:	2f58      	cmp	r7, #88	@ 0x58
 80099a8:	f000 80b9 	beq.w	8009b1e <_printf_i+0x19a>
 80099ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80099b4:	e03a      	b.n	8009a2c <_printf_i+0xa8>
 80099b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80099ba:	2b15      	cmp	r3, #21
 80099bc:	d8f6      	bhi.n	80099ac <_printf_i+0x28>
 80099be:	a101      	add	r1, pc, #4	@ (adr r1, 80099c4 <_printf_i+0x40>)
 80099c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099c4:	08009a1d 	.word	0x08009a1d
 80099c8:	08009a31 	.word	0x08009a31
 80099cc:	080099ad 	.word	0x080099ad
 80099d0:	080099ad 	.word	0x080099ad
 80099d4:	080099ad 	.word	0x080099ad
 80099d8:	080099ad 	.word	0x080099ad
 80099dc:	08009a31 	.word	0x08009a31
 80099e0:	080099ad 	.word	0x080099ad
 80099e4:	080099ad 	.word	0x080099ad
 80099e8:	080099ad 	.word	0x080099ad
 80099ec:	080099ad 	.word	0x080099ad
 80099f0:	08009b31 	.word	0x08009b31
 80099f4:	08009a5b 	.word	0x08009a5b
 80099f8:	08009aeb 	.word	0x08009aeb
 80099fc:	080099ad 	.word	0x080099ad
 8009a00:	080099ad 	.word	0x080099ad
 8009a04:	08009b53 	.word	0x08009b53
 8009a08:	080099ad 	.word	0x080099ad
 8009a0c:	08009a5b 	.word	0x08009a5b
 8009a10:	080099ad 	.word	0x080099ad
 8009a14:	080099ad 	.word	0x080099ad
 8009a18:	08009af3 	.word	0x08009af3
 8009a1c:	6833      	ldr	r3, [r6, #0]
 8009a1e:	1d1a      	adds	r2, r3, #4
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	6032      	str	r2, [r6, #0]
 8009a24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e09d      	b.n	8009b6c <_printf_i+0x1e8>
 8009a30:	6833      	ldr	r3, [r6, #0]
 8009a32:	6820      	ldr	r0, [r4, #0]
 8009a34:	1d19      	adds	r1, r3, #4
 8009a36:	6031      	str	r1, [r6, #0]
 8009a38:	0606      	lsls	r6, r0, #24
 8009a3a:	d501      	bpl.n	8009a40 <_printf_i+0xbc>
 8009a3c:	681d      	ldr	r5, [r3, #0]
 8009a3e:	e003      	b.n	8009a48 <_printf_i+0xc4>
 8009a40:	0645      	lsls	r5, r0, #25
 8009a42:	d5fb      	bpl.n	8009a3c <_printf_i+0xb8>
 8009a44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a48:	2d00      	cmp	r5, #0
 8009a4a:	da03      	bge.n	8009a54 <_printf_i+0xd0>
 8009a4c:	232d      	movs	r3, #45	@ 0x2d
 8009a4e:	426d      	negs	r5, r5
 8009a50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a54:	4859      	ldr	r0, [pc, #356]	@ (8009bbc <_printf_i+0x238>)
 8009a56:	230a      	movs	r3, #10
 8009a58:	e011      	b.n	8009a7e <_printf_i+0xfa>
 8009a5a:	6821      	ldr	r1, [r4, #0]
 8009a5c:	6833      	ldr	r3, [r6, #0]
 8009a5e:	0608      	lsls	r0, r1, #24
 8009a60:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a64:	d402      	bmi.n	8009a6c <_printf_i+0xe8>
 8009a66:	0649      	lsls	r1, r1, #25
 8009a68:	bf48      	it	mi
 8009a6a:	b2ad      	uxthmi	r5, r5
 8009a6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a6e:	4853      	ldr	r0, [pc, #332]	@ (8009bbc <_printf_i+0x238>)
 8009a70:	6033      	str	r3, [r6, #0]
 8009a72:	bf14      	ite	ne
 8009a74:	230a      	movne	r3, #10
 8009a76:	2308      	moveq	r3, #8
 8009a78:	2100      	movs	r1, #0
 8009a7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009a7e:	6866      	ldr	r6, [r4, #4]
 8009a80:	60a6      	str	r6, [r4, #8]
 8009a82:	2e00      	cmp	r6, #0
 8009a84:	bfa2      	ittt	ge
 8009a86:	6821      	ldrge	r1, [r4, #0]
 8009a88:	f021 0104 	bicge.w	r1, r1, #4
 8009a8c:	6021      	strge	r1, [r4, #0]
 8009a8e:	b90d      	cbnz	r5, 8009a94 <_printf_i+0x110>
 8009a90:	2e00      	cmp	r6, #0
 8009a92:	d04b      	beq.n	8009b2c <_printf_i+0x1a8>
 8009a94:	4616      	mov	r6, r2
 8009a96:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a9a:	fb03 5711 	mls	r7, r3, r1, r5
 8009a9e:	5dc7      	ldrb	r7, [r0, r7]
 8009aa0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009aa4:	462f      	mov	r7, r5
 8009aa6:	42bb      	cmp	r3, r7
 8009aa8:	460d      	mov	r5, r1
 8009aaa:	d9f4      	bls.n	8009a96 <_printf_i+0x112>
 8009aac:	2b08      	cmp	r3, #8
 8009aae:	d10b      	bne.n	8009ac8 <_printf_i+0x144>
 8009ab0:	6823      	ldr	r3, [r4, #0]
 8009ab2:	07df      	lsls	r7, r3, #31
 8009ab4:	d508      	bpl.n	8009ac8 <_printf_i+0x144>
 8009ab6:	6923      	ldr	r3, [r4, #16]
 8009ab8:	6861      	ldr	r1, [r4, #4]
 8009aba:	4299      	cmp	r1, r3
 8009abc:	bfde      	ittt	le
 8009abe:	2330      	movle	r3, #48	@ 0x30
 8009ac0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009ac4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009ac8:	1b92      	subs	r2, r2, r6
 8009aca:	6122      	str	r2, [r4, #16]
 8009acc:	f8cd a000 	str.w	sl, [sp]
 8009ad0:	464b      	mov	r3, r9
 8009ad2:	aa03      	add	r2, sp, #12
 8009ad4:	4621      	mov	r1, r4
 8009ad6:	4640      	mov	r0, r8
 8009ad8:	f7ff fee6 	bl	80098a8 <_printf_common>
 8009adc:	3001      	adds	r0, #1
 8009ade:	d14a      	bne.n	8009b76 <_printf_i+0x1f2>
 8009ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae4:	b004      	add	sp, #16
 8009ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aea:	6823      	ldr	r3, [r4, #0]
 8009aec:	f043 0320 	orr.w	r3, r3, #32
 8009af0:	6023      	str	r3, [r4, #0]
 8009af2:	4833      	ldr	r0, [pc, #204]	@ (8009bc0 <_printf_i+0x23c>)
 8009af4:	2778      	movs	r7, #120	@ 0x78
 8009af6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	6831      	ldr	r1, [r6, #0]
 8009afe:	061f      	lsls	r7, r3, #24
 8009b00:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b04:	d402      	bmi.n	8009b0c <_printf_i+0x188>
 8009b06:	065f      	lsls	r7, r3, #25
 8009b08:	bf48      	it	mi
 8009b0a:	b2ad      	uxthmi	r5, r5
 8009b0c:	6031      	str	r1, [r6, #0]
 8009b0e:	07d9      	lsls	r1, r3, #31
 8009b10:	bf44      	itt	mi
 8009b12:	f043 0320 	orrmi.w	r3, r3, #32
 8009b16:	6023      	strmi	r3, [r4, #0]
 8009b18:	b11d      	cbz	r5, 8009b22 <_printf_i+0x19e>
 8009b1a:	2310      	movs	r3, #16
 8009b1c:	e7ac      	b.n	8009a78 <_printf_i+0xf4>
 8009b1e:	4827      	ldr	r0, [pc, #156]	@ (8009bbc <_printf_i+0x238>)
 8009b20:	e7e9      	b.n	8009af6 <_printf_i+0x172>
 8009b22:	6823      	ldr	r3, [r4, #0]
 8009b24:	f023 0320 	bic.w	r3, r3, #32
 8009b28:	6023      	str	r3, [r4, #0]
 8009b2a:	e7f6      	b.n	8009b1a <_printf_i+0x196>
 8009b2c:	4616      	mov	r6, r2
 8009b2e:	e7bd      	b.n	8009aac <_printf_i+0x128>
 8009b30:	6833      	ldr	r3, [r6, #0]
 8009b32:	6825      	ldr	r5, [r4, #0]
 8009b34:	6961      	ldr	r1, [r4, #20]
 8009b36:	1d18      	adds	r0, r3, #4
 8009b38:	6030      	str	r0, [r6, #0]
 8009b3a:	062e      	lsls	r6, r5, #24
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	d501      	bpl.n	8009b44 <_printf_i+0x1c0>
 8009b40:	6019      	str	r1, [r3, #0]
 8009b42:	e002      	b.n	8009b4a <_printf_i+0x1c6>
 8009b44:	0668      	lsls	r0, r5, #25
 8009b46:	d5fb      	bpl.n	8009b40 <_printf_i+0x1bc>
 8009b48:	8019      	strh	r1, [r3, #0]
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	6123      	str	r3, [r4, #16]
 8009b4e:	4616      	mov	r6, r2
 8009b50:	e7bc      	b.n	8009acc <_printf_i+0x148>
 8009b52:	6833      	ldr	r3, [r6, #0]
 8009b54:	1d1a      	adds	r2, r3, #4
 8009b56:	6032      	str	r2, [r6, #0]
 8009b58:	681e      	ldr	r6, [r3, #0]
 8009b5a:	6862      	ldr	r2, [r4, #4]
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	4630      	mov	r0, r6
 8009b60:	f7f6 fb3e 	bl	80001e0 <memchr>
 8009b64:	b108      	cbz	r0, 8009b6a <_printf_i+0x1e6>
 8009b66:	1b80      	subs	r0, r0, r6
 8009b68:	6060      	str	r0, [r4, #4]
 8009b6a:	6863      	ldr	r3, [r4, #4]
 8009b6c:	6123      	str	r3, [r4, #16]
 8009b6e:	2300      	movs	r3, #0
 8009b70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b74:	e7aa      	b.n	8009acc <_printf_i+0x148>
 8009b76:	6923      	ldr	r3, [r4, #16]
 8009b78:	4632      	mov	r2, r6
 8009b7a:	4649      	mov	r1, r9
 8009b7c:	4640      	mov	r0, r8
 8009b7e:	47d0      	blx	sl
 8009b80:	3001      	adds	r0, #1
 8009b82:	d0ad      	beq.n	8009ae0 <_printf_i+0x15c>
 8009b84:	6823      	ldr	r3, [r4, #0]
 8009b86:	079b      	lsls	r3, r3, #30
 8009b88:	d413      	bmi.n	8009bb2 <_printf_i+0x22e>
 8009b8a:	68e0      	ldr	r0, [r4, #12]
 8009b8c:	9b03      	ldr	r3, [sp, #12]
 8009b8e:	4298      	cmp	r0, r3
 8009b90:	bfb8      	it	lt
 8009b92:	4618      	movlt	r0, r3
 8009b94:	e7a6      	b.n	8009ae4 <_printf_i+0x160>
 8009b96:	2301      	movs	r3, #1
 8009b98:	4632      	mov	r2, r6
 8009b9a:	4649      	mov	r1, r9
 8009b9c:	4640      	mov	r0, r8
 8009b9e:	47d0      	blx	sl
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d09d      	beq.n	8009ae0 <_printf_i+0x15c>
 8009ba4:	3501      	adds	r5, #1
 8009ba6:	68e3      	ldr	r3, [r4, #12]
 8009ba8:	9903      	ldr	r1, [sp, #12]
 8009baa:	1a5b      	subs	r3, r3, r1
 8009bac:	42ab      	cmp	r3, r5
 8009bae:	dcf2      	bgt.n	8009b96 <_printf_i+0x212>
 8009bb0:	e7eb      	b.n	8009b8a <_printf_i+0x206>
 8009bb2:	2500      	movs	r5, #0
 8009bb4:	f104 0619 	add.w	r6, r4, #25
 8009bb8:	e7f5      	b.n	8009ba6 <_printf_i+0x222>
 8009bba:	bf00      	nop
 8009bbc:	0800c06a 	.word	0x0800c06a
 8009bc0:	0800c07b 	.word	0x0800c07b

08009bc4 <std>:
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	b510      	push	{r4, lr}
 8009bc8:	4604      	mov	r4, r0
 8009bca:	e9c0 3300 	strd	r3, r3, [r0]
 8009bce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bd2:	6083      	str	r3, [r0, #8]
 8009bd4:	8181      	strh	r1, [r0, #12]
 8009bd6:	6643      	str	r3, [r0, #100]	@ 0x64
 8009bd8:	81c2      	strh	r2, [r0, #14]
 8009bda:	6183      	str	r3, [r0, #24]
 8009bdc:	4619      	mov	r1, r3
 8009bde:	2208      	movs	r2, #8
 8009be0:	305c      	adds	r0, #92	@ 0x5c
 8009be2:	f000 f928 	bl	8009e36 <memset>
 8009be6:	4b0d      	ldr	r3, [pc, #52]	@ (8009c1c <std+0x58>)
 8009be8:	6263      	str	r3, [r4, #36]	@ 0x24
 8009bea:	4b0d      	ldr	r3, [pc, #52]	@ (8009c20 <std+0x5c>)
 8009bec:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009bee:	4b0d      	ldr	r3, [pc, #52]	@ (8009c24 <std+0x60>)
 8009bf0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8009c28 <std+0x64>)
 8009bf4:	6323      	str	r3, [r4, #48]	@ 0x30
 8009bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8009c2c <std+0x68>)
 8009bf8:	6224      	str	r4, [r4, #32]
 8009bfa:	429c      	cmp	r4, r3
 8009bfc:	d006      	beq.n	8009c0c <std+0x48>
 8009bfe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009c02:	4294      	cmp	r4, r2
 8009c04:	d002      	beq.n	8009c0c <std+0x48>
 8009c06:	33d0      	adds	r3, #208	@ 0xd0
 8009c08:	429c      	cmp	r4, r3
 8009c0a:	d105      	bne.n	8009c18 <std+0x54>
 8009c0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c14:	f000 b98c 	b.w	8009f30 <__retarget_lock_init_recursive>
 8009c18:	bd10      	pop	{r4, pc}
 8009c1a:	bf00      	nop
 8009c1c:	08009db1 	.word	0x08009db1
 8009c20:	08009dd3 	.word	0x08009dd3
 8009c24:	08009e0b 	.word	0x08009e0b
 8009c28:	08009e2f 	.word	0x08009e2f
 8009c2c:	2000212c 	.word	0x2000212c

08009c30 <stdio_exit_handler>:
 8009c30:	4a02      	ldr	r2, [pc, #8]	@ (8009c3c <stdio_exit_handler+0xc>)
 8009c32:	4903      	ldr	r1, [pc, #12]	@ (8009c40 <stdio_exit_handler+0x10>)
 8009c34:	4803      	ldr	r0, [pc, #12]	@ (8009c44 <stdio_exit_handler+0x14>)
 8009c36:	f000 b869 	b.w	8009d0c <_fwalk_sglue>
 8009c3a:	bf00      	nop
 8009c3c:	200000fc 	.word	0x200000fc
 8009c40:	0800b88d 	.word	0x0800b88d
 8009c44:	2000010c 	.word	0x2000010c

08009c48 <cleanup_stdio>:
 8009c48:	6841      	ldr	r1, [r0, #4]
 8009c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8009c7c <cleanup_stdio+0x34>)
 8009c4c:	4299      	cmp	r1, r3
 8009c4e:	b510      	push	{r4, lr}
 8009c50:	4604      	mov	r4, r0
 8009c52:	d001      	beq.n	8009c58 <cleanup_stdio+0x10>
 8009c54:	f001 fe1a 	bl	800b88c <_fflush_r>
 8009c58:	68a1      	ldr	r1, [r4, #8]
 8009c5a:	4b09      	ldr	r3, [pc, #36]	@ (8009c80 <cleanup_stdio+0x38>)
 8009c5c:	4299      	cmp	r1, r3
 8009c5e:	d002      	beq.n	8009c66 <cleanup_stdio+0x1e>
 8009c60:	4620      	mov	r0, r4
 8009c62:	f001 fe13 	bl	800b88c <_fflush_r>
 8009c66:	68e1      	ldr	r1, [r4, #12]
 8009c68:	4b06      	ldr	r3, [pc, #24]	@ (8009c84 <cleanup_stdio+0x3c>)
 8009c6a:	4299      	cmp	r1, r3
 8009c6c:	d004      	beq.n	8009c78 <cleanup_stdio+0x30>
 8009c6e:	4620      	mov	r0, r4
 8009c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c74:	f001 be0a 	b.w	800b88c <_fflush_r>
 8009c78:	bd10      	pop	{r4, pc}
 8009c7a:	bf00      	nop
 8009c7c:	2000212c 	.word	0x2000212c
 8009c80:	20002194 	.word	0x20002194
 8009c84:	200021fc 	.word	0x200021fc

08009c88 <global_stdio_init.part.0>:
 8009c88:	b510      	push	{r4, lr}
 8009c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8009cb8 <global_stdio_init.part.0+0x30>)
 8009c8c:	4c0b      	ldr	r4, [pc, #44]	@ (8009cbc <global_stdio_init.part.0+0x34>)
 8009c8e:	4a0c      	ldr	r2, [pc, #48]	@ (8009cc0 <global_stdio_init.part.0+0x38>)
 8009c90:	601a      	str	r2, [r3, #0]
 8009c92:	4620      	mov	r0, r4
 8009c94:	2200      	movs	r2, #0
 8009c96:	2104      	movs	r1, #4
 8009c98:	f7ff ff94 	bl	8009bc4 <std>
 8009c9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	2109      	movs	r1, #9
 8009ca4:	f7ff ff8e 	bl	8009bc4 <std>
 8009ca8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009cac:	2202      	movs	r2, #2
 8009cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cb2:	2112      	movs	r1, #18
 8009cb4:	f7ff bf86 	b.w	8009bc4 <std>
 8009cb8:	20002264 	.word	0x20002264
 8009cbc:	2000212c 	.word	0x2000212c
 8009cc0:	08009c31 	.word	0x08009c31

08009cc4 <__sfp_lock_acquire>:
 8009cc4:	4801      	ldr	r0, [pc, #4]	@ (8009ccc <__sfp_lock_acquire+0x8>)
 8009cc6:	f000 b934 	b.w	8009f32 <__retarget_lock_acquire_recursive>
 8009cca:	bf00      	nop
 8009ccc:	2000226d 	.word	0x2000226d

08009cd0 <__sfp_lock_release>:
 8009cd0:	4801      	ldr	r0, [pc, #4]	@ (8009cd8 <__sfp_lock_release+0x8>)
 8009cd2:	f000 b92f 	b.w	8009f34 <__retarget_lock_release_recursive>
 8009cd6:	bf00      	nop
 8009cd8:	2000226d 	.word	0x2000226d

08009cdc <__sinit>:
 8009cdc:	b510      	push	{r4, lr}
 8009cde:	4604      	mov	r4, r0
 8009ce0:	f7ff fff0 	bl	8009cc4 <__sfp_lock_acquire>
 8009ce4:	6a23      	ldr	r3, [r4, #32]
 8009ce6:	b11b      	cbz	r3, 8009cf0 <__sinit+0x14>
 8009ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cec:	f7ff bff0 	b.w	8009cd0 <__sfp_lock_release>
 8009cf0:	4b04      	ldr	r3, [pc, #16]	@ (8009d04 <__sinit+0x28>)
 8009cf2:	6223      	str	r3, [r4, #32]
 8009cf4:	4b04      	ldr	r3, [pc, #16]	@ (8009d08 <__sinit+0x2c>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d1f5      	bne.n	8009ce8 <__sinit+0xc>
 8009cfc:	f7ff ffc4 	bl	8009c88 <global_stdio_init.part.0>
 8009d00:	e7f2      	b.n	8009ce8 <__sinit+0xc>
 8009d02:	bf00      	nop
 8009d04:	08009c49 	.word	0x08009c49
 8009d08:	20002264 	.word	0x20002264

08009d0c <_fwalk_sglue>:
 8009d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d10:	4607      	mov	r7, r0
 8009d12:	4688      	mov	r8, r1
 8009d14:	4614      	mov	r4, r2
 8009d16:	2600      	movs	r6, #0
 8009d18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d1c:	f1b9 0901 	subs.w	r9, r9, #1
 8009d20:	d505      	bpl.n	8009d2e <_fwalk_sglue+0x22>
 8009d22:	6824      	ldr	r4, [r4, #0]
 8009d24:	2c00      	cmp	r4, #0
 8009d26:	d1f7      	bne.n	8009d18 <_fwalk_sglue+0xc>
 8009d28:	4630      	mov	r0, r6
 8009d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d2e:	89ab      	ldrh	r3, [r5, #12]
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d907      	bls.n	8009d44 <_fwalk_sglue+0x38>
 8009d34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	d003      	beq.n	8009d44 <_fwalk_sglue+0x38>
 8009d3c:	4629      	mov	r1, r5
 8009d3e:	4638      	mov	r0, r7
 8009d40:	47c0      	blx	r8
 8009d42:	4306      	orrs	r6, r0
 8009d44:	3568      	adds	r5, #104	@ 0x68
 8009d46:	e7e9      	b.n	8009d1c <_fwalk_sglue+0x10>

08009d48 <sniprintf>:
 8009d48:	b40c      	push	{r2, r3}
 8009d4a:	b530      	push	{r4, r5, lr}
 8009d4c:	4b17      	ldr	r3, [pc, #92]	@ (8009dac <sniprintf+0x64>)
 8009d4e:	1e0c      	subs	r4, r1, #0
 8009d50:	681d      	ldr	r5, [r3, #0]
 8009d52:	b09d      	sub	sp, #116	@ 0x74
 8009d54:	da08      	bge.n	8009d68 <sniprintf+0x20>
 8009d56:	238b      	movs	r3, #139	@ 0x8b
 8009d58:	602b      	str	r3, [r5, #0]
 8009d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d5e:	b01d      	add	sp, #116	@ 0x74
 8009d60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d64:	b002      	add	sp, #8
 8009d66:	4770      	bx	lr
 8009d68:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009d6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009d70:	bf14      	ite	ne
 8009d72:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009d76:	4623      	moveq	r3, r4
 8009d78:	9304      	str	r3, [sp, #16]
 8009d7a:	9307      	str	r3, [sp, #28]
 8009d7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009d80:	9002      	str	r0, [sp, #8]
 8009d82:	9006      	str	r0, [sp, #24]
 8009d84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009d88:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009d8a:	ab21      	add	r3, sp, #132	@ 0x84
 8009d8c:	a902      	add	r1, sp, #8
 8009d8e:	4628      	mov	r0, r5
 8009d90:	9301      	str	r3, [sp, #4]
 8009d92:	f001 fbfb 	bl	800b58c <_svfiprintf_r>
 8009d96:	1c43      	adds	r3, r0, #1
 8009d98:	bfbc      	itt	lt
 8009d9a:	238b      	movlt	r3, #139	@ 0x8b
 8009d9c:	602b      	strlt	r3, [r5, #0]
 8009d9e:	2c00      	cmp	r4, #0
 8009da0:	d0dd      	beq.n	8009d5e <sniprintf+0x16>
 8009da2:	9b02      	ldr	r3, [sp, #8]
 8009da4:	2200      	movs	r2, #0
 8009da6:	701a      	strb	r2, [r3, #0]
 8009da8:	e7d9      	b.n	8009d5e <sniprintf+0x16>
 8009daa:	bf00      	nop
 8009dac:	20000108 	.word	0x20000108

08009db0 <__sread>:
 8009db0:	b510      	push	{r4, lr}
 8009db2:	460c      	mov	r4, r1
 8009db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009db8:	f000 f86c 	bl	8009e94 <_read_r>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	bfab      	itete	ge
 8009dc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009dc2:	89a3      	ldrhlt	r3, [r4, #12]
 8009dc4:	181b      	addge	r3, r3, r0
 8009dc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009dca:	bfac      	ite	ge
 8009dcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009dce:	81a3      	strhlt	r3, [r4, #12]
 8009dd0:	bd10      	pop	{r4, pc}

08009dd2 <__swrite>:
 8009dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd6:	461f      	mov	r7, r3
 8009dd8:	898b      	ldrh	r3, [r1, #12]
 8009dda:	05db      	lsls	r3, r3, #23
 8009ddc:	4605      	mov	r5, r0
 8009dde:	460c      	mov	r4, r1
 8009de0:	4616      	mov	r6, r2
 8009de2:	d505      	bpl.n	8009df0 <__swrite+0x1e>
 8009de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de8:	2302      	movs	r3, #2
 8009dea:	2200      	movs	r2, #0
 8009dec:	f000 f840 	bl	8009e70 <_lseek_r>
 8009df0:	89a3      	ldrh	r3, [r4, #12]
 8009df2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009df6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009dfa:	81a3      	strh	r3, [r4, #12]
 8009dfc:	4632      	mov	r2, r6
 8009dfe:	463b      	mov	r3, r7
 8009e00:	4628      	mov	r0, r5
 8009e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e06:	f000 b857 	b.w	8009eb8 <_write_r>

08009e0a <__sseek>:
 8009e0a:	b510      	push	{r4, lr}
 8009e0c:	460c      	mov	r4, r1
 8009e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e12:	f000 f82d 	bl	8009e70 <_lseek_r>
 8009e16:	1c43      	adds	r3, r0, #1
 8009e18:	89a3      	ldrh	r3, [r4, #12]
 8009e1a:	bf15      	itete	ne
 8009e1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009e1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009e22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009e26:	81a3      	strheq	r3, [r4, #12]
 8009e28:	bf18      	it	ne
 8009e2a:	81a3      	strhne	r3, [r4, #12]
 8009e2c:	bd10      	pop	{r4, pc}

08009e2e <__sclose>:
 8009e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e32:	f000 b80d 	b.w	8009e50 <_close_r>

08009e36 <memset>:
 8009e36:	4402      	add	r2, r0
 8009e38:	4603      	mov	r3, r0
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d100      	bne.n	8009e40 <memset+0xa>
 8009e3e:	4770      	bx	lr
 8009e40:	f803 1b01 	strb.w	r1, [r3], #1
 8009e44:	e7f9      	b.n	8009e3a <memset+0x4>
	...

08009e48 <_localeconv_r>:
 8009e48:	4800      	ldr	r0, [pc, #0]	@ (8009e4c <_localeconv_r+0x4>)
 8009e4a:	4770      	bx	lr
 8009e4c:	20000248 	.word	0x20000248

08009e50 <_close_r>:
 8009e50:	b538      	push	{r3, r4, r5, lr}
 8009e52:	4d06      	ldr	r5, [pc, #24]	@ (8009e6c <_close_r+0x1c>)
 8009e54:	2300      	movs	r3, #0
 8009e56:	4604      	mov	r4, r0
 8009e58:	4608      	mov	r0, r1
 8009e5a:	602b      	str	r3, [r5, #0]
 8009e5c:	f7f7 fd6c 	bl	8001938 <_close>
 8009e60:	1c43      	adds	r3, r0, #1
 8009e62:	d102      	bne.n	8009e6a <_close_r+0x1a>
 8009e64:	682b      	ldr	r3, [r5, #0]
 8009e66:	b103      	cbz	r3, 8009e6a <_close_r+0x1a>
 8009e68:	6023      	str	r3, [r4, #0]
 8009e6a:	bd38      	pop	{r3, r4, r5, pc}
 8009e6c:	20002268 	.word	0x20002268

08009e70 <_lseek_r>:
 8009e70:	b538      	push	{r3, r4, r5, lr}
 8009e72:	4d07      	ldr	r5, [pc, #28]	@ (8009e90 <_lseek_r+0x20>)
 8009e74:	4604      	mov	r4, r0
 8009e76:	4608      	mov	r0, r1
 8009e78:	4611      	mov	r1, r2
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	602a      	str	r2, [r5, #0]
 8009e7e:	461a      	mov	r2, r3
 8009e80:	f7f7 fd81 	bl	8001986 <_lseek>
 8009e84:	1c43      	adds	r3, r0, #1
 8009e86:	d102      	bne.n	8009e8e <_lseek_r+0x1e>
 8009e88:	682b      	ldr	r3, [r5, #0]
 8009e8a:	b103      	cbz	r3, 8009e8e <_lseek_r+0x1e>
 8009e8c:	6023      	str	r3, [r4, #0]
 8009e8e:	bd38      	pop	{r3, r4, r5, pc}
 8009e90:	20002268 	.word	0x20002268

08009e94 <_read_r>:
 8009e94:	b538      	push	{r3, r4, r5, lr}
 8009e96:	4d07      	ldr	r5, [pc, #28]	@ (8009eb4 <_read_r+0x20>)
 8009e98:	4604      	mov	r4, r0
 8009e9a:	4608      	mov	r0, r1
 8009e9c:	4611      	mov	r1, r2
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	602a      	str	r2, [r5, #0]
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	f7f7 fd0f 	bl	80018c6 <_read>
 8009ea8:	1c43      	adds	r3, r0, #1
 8009eaa:	d102      	bne.n	8009eb2 <_read_r+0x1e>
 8009eac:	682b      	ldr	r3, [r5, #0]
 8009eae:	b103      	cbz	r3, 8009eb2 <_read_r+0x1e>
 8009eb0:	6023      	str	r3, [r4, #0]
 8009eb2:	bd38      	pop	{r3, r4, r5, pc}
 8009eb4:	20002268 	.word	0x20002268

08009eb8 <_write_r>:
 8009eb8:	b538      	push	{r3, r4, r5, lr}
 8009eba:	4d07      	ldr	r5, [pc, #28]	@ (8009ed8 <_write_r+0x20>)
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	4608      	mov	r0, r1
 8009ec0:	4611      	mov	r1, r2
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	602a      	str	r2, [r5, #0]
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	f7f7 fd1a 	bl	8001900 <_write>
 8009ecc:	1c43      	adds	r3, r0, #1
 8009ece:	d102      	bne.n	8009ed6 <_write_r+0x1e>
 8009ed0:	682b      	ldr	r3, [r5, #0]
 8009ed2:	b103      	cbz	r3, 8009ed6 <_write_r+0x1e>
 8009ed4:	6023      	str	r3, [r4, #0]
 8009ed6:	bd38      	pop	{r3, r4, r5, pc}
 8009ed8:	20002268 	.word	0x20002268

08009edc <__errno>:
 8009edc:	4b01      	ldr	r3, [pc, #4]	@ (8009ee4 <__errno+0x8>)
 8009ede:	6818      	ldr	r0, [r3, #0]
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	20000108 	.word	0x20000108

08009ee8 <__libc_init_array>:
 8009ee8:	b570      	push	{r4, r5, r6, lr}
 8009eea:	4d0d      	ldr	r5, [pc, #52]	@ (8009f20 <__libc_init_array+0x38>)
 8009eec:	4c0d      	ldr	r4, [pc, #52]	@ (8009f24 <__libc_init_array+0x3c>)
 8009eee:	1b64      	subs	r4, r4, r5
 8009ef0:	10a4      	asrs	r4, r4, #2
 8009ef2:	2600      	movs	r6, #0
 8009ef4:	42a6      	cmp	r6, r4
 8009ef6:	d109      	bne.n	8009f0c <__libc_init_array+0x24>
 8009ef8:	4d0b      	ldr	r5, [pc, #44]	@ (8009f28 <__libc_init_array+0x40>)
 8009efa:	4c0c      	ldr	r4, [pc, #48]	@ (8009f2c <__libc_init_array+0x44>)
 8009efc:	f002 f864 	bl	800bfc8 <_init>
 8009f00:	1b64      	subs	r4, r4, r5
 8009f02:	10a4      	asrs	r4, r4, #2
 8009f04:	2600      	movs	r6, #0
 8009f06:	42a6      	cmp	r6, r4
 8009f08:	d105      	bne.n	8009f16 <__libc_init_array+0x2e>
 8009f0a:	bd70      	pop	{r4, r5, r6, pc}
 8009f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f10:	4798      	blx	r3
 8009f12:	3601      	adds	r6, #1
 8009f14:	e7ee      	b.n	8009ef4 <__libc_init_array+0xc>
 8009f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f1a:	4798      	blx	r3
 8009f1c:	3601      	adds	r6, #1
 8009f1e:	e7f2      	b.n	8009f06 <__libc_init_array+0x1e>
 8009f20:	0800c3d0 	.word	0x0800c3d0
 8009f24:	0800c3d0 	.word	0x0800c3d0
 8009f28:	0800c3d0 	.word	0x0800c3d0
 8009f2c:	0800c3d4 	.word	0x0800c3d4

08009f30 <__retarget_lock_init_recursive>:
 8009f30:	4770      	bx	lr

08009f32 <__retarget_lock_acquire_recursive>:
 8009f32:	4770      	bx	lr

08009f34 <__retarget_lock_release_recursive>:
 8009f34:	4770      	bx	lr

08009f36 <quorem>:
 8009f36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f3a:	6903      	ldr	r3, [r0, #16]
 8009f3c:	690c      	ldr	r4, [r1, #16]
 8009f3e:	42a3      	cmp	r3, r4
 8009f40:	4607      	mov	r7, r0
 8009f42:	db7e      	blt.n	800a042 <quorem+0x10c>
 8009f44:	3c01      	subs	r4, #1
 8009f46:	f101 0814 	add.w	r8, r1, #20
 8009f4a:	00a3      	lsls	r3, r4, #2
 8009f4c:	f100 0514 	add.w	r5, r0, #20
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f56:	9301      	str	r3, [sp, #4]
 8009f58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f60:	3301      	adds	r3, #1
 8009f62:	429a      	cmp	r2, r3
 8009f64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f68:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f6c:	d32e      	bcc.n	8009fcc <quorem+0x96>
 8009f6e:	f04f 0a00 	mov.w	sl, #0
 8009f72:	46c4      	mov	ip, r8
 8009f74:	46ae      	mov	lr, r5
 8009f76:	46d3      	mov	fp, sl
 8009f78:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009f7c:	b298      	uxth	r0, r3
 8009f7e:	fb06 a000 	mla	r0, r6, r0, sl
 8009f82:	0c02      	lsrs	r2, r0, #16
 8009f84:	0c1b      	lsrs	r3, r3, #16
 8009f86:	fb06 2303 	mla	r3, r6, r3, r2
 8009f8a:	f8de 2000 	ldr.w	r2, [lr]
 8009f8e:	b280      	uxth	r0, r0
 8009f90:	b292      	uxth	r2, r2
 8009f92:	1a12      	subs	r2, r2, r0
 8009f94:	445a      	add	r2, fp
 8009f96:	f8de 0000 	ldr.w	r0, [lr]
 8009f9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009fa4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009fa8:	b292      	uxth	r2, r2
 8009faa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009fae:	45e1      	cmp	r9, ip
 8009fb0:	f84e 2b04 	str.w	r2, [lr], #4
 8009fb4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009fb8:	d2de      	bcs.n	8009f78 <quorem+0x42>
 8009fba:	9b00      	ldr	r3, [sp, #0]
 8009fbc:	58eb      	ldr	r3, [r5, r3]
 8009fbe:	b92b      	cbnz	r3, 8009fcc <quorem+0x96>
 8009fc0:	9b01      	ldr	r3, [sp, #4]
 8009fc2:	3b04      	subs	r3, #4
 8009fc4:	429d      	cmp	r5, r3
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	d32f      	bcc.n	800a02a <quorem+0xf4>
 8009fca:	613c      	str	r4, [r7, #16]
 8009fcc:	4638      	mov	r0, r7
 8009fce:	f001 f979 	bl	800b2c4 <__mcmp>
 8009fd2:	2800      	cmp	r0, #0
 8009fd4:	db25      	blt.n	800a022 <quorem+0xec>
 8009fd6:	4629      	mov	r1, r5
 8009fd8:	2000      	movs	r0, #0
 8009fda:	f858 2b04 	ldr.w	r2, [r8], #4
 8009fde:	f8d1 c000 	ldr.w	ip, [r1]
 8009fe2:	fa1f fe82 	uxth.w	lr, r2
 8009fe6:	fa1f f38c 	uxth.w	r3, ip
 8009fea:	eba3 030e 	sub.w	r3, r3, lr
 8009fee:	4403      	add	r3, r0
 8009ff0:	0c12      	lsrs	r2, r2, #16
 8009ff2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009ff6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a000:	45c1      	cmp	r9, r8
 800a002:	f841 3b04 	str.w	r3, [r1], #4
 800a006:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a00a:	d2e6      	bcs.n	8009fda <quorem+0xa4>
 800a00c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a010:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a014:	b922      	cbnz	r2, 800a020 <quorem+0xea>
 800a016:	3b04      	subs	r3, #4
 800a018:	429d      	cmp	r5, r3
 800a01a:	461a      	mov	r2, r3
 800a01c:	d30b      	bcc.n	800a036 <quorem+0x100>
 800a01e:	613c      	str	r4, [r7, #16]
 800a020:	3601      	adds	r6, #1
 800a022:	4630      	mov	r0, r6
 800a024:	b003      	add	sp, #12
 800a026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a02a:	6812      	ldr	r2, [r2, #0]
 800a02c:	3b04      	subs	r3, #4
 800a02e:	2a00      	cmp	r2, #0
 800a030:	d1cb      	bne.n	8009fca <quorem+0x94>
 800a032:	3c01      	subs	r4, #1
 800a034:	e7c6      	b.n	8009fc4 <quorem+0x8e>
 800a036:	6812      	ldr	r2, [r2, #0]
 800a038:	3b04      	subs	r3, #4
 800a03a:	2a00      	cmp	r2, #0
 800a03c:	d1ef      	bne.n	800a01e <quorem+0xe8>
 800a03e:	3c01      	subs	r4, #1
 800a040:	e7ea      	b.n	800a018 <quorem+0xe2>
 800a042:	2000      	movs	r0, #0
 800a044:	e7ee      	b.n	800a024 <quorem+0xee>
	...

0800a048 <_dtoa_r>:
 800a048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a04c:	69c7      	ldr	r7, [r0, #28]
 800a04e:	b099      	sub	sp, #100	@ 0x64
 800a050:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a054:	ec55 4b10 	vmov	r4, r5, d0
 800a058:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a05a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a05c:	4683      	mov	fp, r0
 800a05e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a060:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a062:	b97f      	cbnz	r7, 800a084 <_dtoa_r+0x3c>
 800a064:	2010      	movs	r0, #16
 800a066:	f000 fdfd 	bl	800ac64 <malloc>
 800a06a:	4602      	mov	r2, r0
 800a06c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a070:	b920      	cbnz	r0, 800a07c <_dtoa_r+0x34>
 800a072:	4ba7      	ldr	r3, [pc, #668]	@ (800a310 <_dtoa_r+0x2c8>)
 800a074:	21ef      	movs	r1, #239	@ 0xef
 800a076:	48a7      	ldr	r0, [pc, #668]	@ (800a314 <_dtoa_r+0x2cc>)
 800a078:	f001 fc68 	bl	800b94c <__assert_func>
 800a07c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a080:	6007      	str	r7, [r0, #0]
 800a082:	60c7      	str	r7, [r0, #12]
 800a084:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a088:	6819      	ldr	r1, [r3, #0]
 800a08a:	b159      	cbz	r1, 800a0a4 <_dtoa_r+0x5c>
 800a08c:	685a      	ldr	r2, [r3, #4]
 800a08e:	604a      	str	r2, [r1, #4]
 800a090:	2301      	movs	r3, #1
 800a092:	4093      	lsls	r3, r2
 800a094:	608b      	str	r3, [r1, #8]
 800a096:	4658      	mov	r0, fp
 800a098:	f000 feda 	bl	800ae50 <_Bfree>
 800a09c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	601a      	str	r2, [r3, #0]
 800a0a4:	1e2b      	subs	r3, r5, #0
 800a0a6:	bfb9      	ittee	lt
 800a0a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a0ac:	9303      	strlt	r3, [sp, #12]
 800a0ae:	2300      	movge	r3, #0
 800a0b0:	6033      	strge	r3, [r6, #0]
 800a0b2:	9f03      	ldr	r7, [sp, #12]
 800a0b4:	4b98      	ldr	r3, [pc, #608]	@ (800a318 <_dtoa_r+0x2d0>)
 800a0b6:	bfbc      	itt	lt
 800a0b8:	2201      	movlt	r2, #1
 800a0ba:	6032      	strlt	r2, [r6, #0]
 800a0bc:	43bb      	bics	r3, r7
 800a0be:	d112      	bne.n	800a0e6 <_dtoa_r+0x9e>
 800a0c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a0c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a0c6:	6013      	str	r3, [r2, #0]
 800a0c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a0cc:	4323      	orrs	r3, r4
 800a0ce:	f000 854d 	beq.w	800ab6c <_dtoa_r+0xb24>
 800a0d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a0d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a32c <_dtoa_r+0x2e4>
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f000 854f 	beq.w	800ab7c <_dtoa_r+0xb34>
 800a0de:	f10a 0303 	add.w	r3, sl, #3
 800a0e2:	f000 bd49 	b.w	800ab78 <_dtoa_r+0xb30>
 800a0e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	ec51 0b17 	vmov	r0, r1, d7
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a0f6:	f7f6 fcef 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0fa:	4680      	mov	r8, r0
 800a0fc:	b158      	cbz	r0, 800a116 <_dtoa_r+0xce>
 800a0fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a100:	2301      	movs	r3, #1
 800a102:	6013      	str	r3, [r2, #0]
 800a104:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a106:	b113      	cbz	r3, 800a10e <_dtoa_r+0xc6>
 800a108:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a10a:	4b84      	ldr	r3, [pc, #528]	@ (800a31c <_dtoa_r+0x2d4>)
 800a10c:	6013      	str	r3, [r2, #0]
 800a10e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a330 <_dtoa_r+0x2e8>
 800a112:	f000 bd33 	b.w	800ab7c <_dtoa_r+0xb34>
 800a116:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a11a:	aa16      	add	r2, sp, #88	@ 0x58
 800a11c:	a917      	add	r1, sp, #92	@ 0x5c
 800a11e:	4658      	mov	r0, fp
 800a120:	f001 f980 	bl	800b424 <__d2b>
 800a124:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a128:	4681      	mov	r9, r0
 800a12a:	2e00      	cmp	r6, #0
 800a12c:	d077      	beq.n	800a21e <_dtoa_r+0x1d6>
 800a12e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a130:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a13c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a140:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a144:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a148:	4619      	mov	r1, r3
 800a14a:	2200      	movs	r2, #0
 800a14c:	4b74      	ldr	r3, [pc, #464]	@ (800a320 <_dtoa_r+0x2d8>)
 800a14e:	f7f6 f8a3 	bl	8000298 <__aeabi_dsub>
 800a152:	a369      	add	r3, pc, #420	@ (adr r3, 800a2f8 <_dtoa_r+0x2b0>)
 800a154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a158:	f7f6 fa56 	bl	8000608 <__aeabi_dmul>
 800a15c:	a368      	add	r3, pc, #416	@ (adr r3, 800a300 <_dtoa_r+0x2b8>)
 800a15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a162:	f7f6 f89b 	bl	800029c <__adddf3>
 800a166:	4604      	mov	r4, r0
 800a168:	4630      	mov	r0, r6
 800a16a:	460d      	mov	r5, r1
 800a16c:	f7f6 f9e2 	bl	8000534 <__aeabi_i2d>
 800a170:	a365      	add	r3, pc, #404	@ (adr r3, 800a308 <_dtoa_r+0x2c0>)
 800a172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a176:	f7f6 fa47 	bl	8000608 <__aeabi_dmul>
 800a17a:	4602      	mov	r2, r0
 800a17c:	460b      	mov	r3, r1
 800a17e:	4620      	mov	r0, r4
 800a180:	4629      	mov	r1, r5
 800a182:	f7f6 f88b 	bl	800029c <__adddf3>
 800a186:	4604      	mov	r4, r0
 800a188:	460d      	mov	r5, r1
 800a18a:	f7f6 fced 	bl	8000b68 <__aeabi_d2iz>
 800a18e:	2200      	movs	r2, #0
 800a190:	4607      	mov	r7, r0
 800a192:	2300      	movs	r3, #0
 800a194:	4620      	mov	r0, r4
 800a196:	4629      	mov	r1, r5
 800a198:	f7f6 fca8 	bl	8000aec <__aeabi_dcmplt>
 800a19c:	b140      	cbz	r0, 800a1b0 <_dtoa_r+0x168>
 800a19e:	4638      	mov	r0, r7
 800a1a0:	f7f6 f9c8 	bl	8000534 <__aeabi_i2d>
 800a1a4:	4622      	mov	r2, r4
 800a1a6:	462b      	mov	r3, r5
 800a1a8:	f7f6 fc96 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1ac:	b900      	cbnz	r0, 800a1b0 <_dtoa_r+0x168>
 800a1ae:	3f01      	subs	r7, #1
 800a1b0:	2f16      	cmp	r7, #22
 800a1b2:	d851      	bhi.n	800a258 <_dtoa_r+0x210>
 800a1b4:	4b5b      	ldr	r3, [pc, #364]	@ (800a324 <_dtoa_r+0x2dc>)
 800a1b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1c2:	f7f6 fc93 	bl	8000aec <__aeabi_dcmplt>
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	d048      	beq.n	800a25c <_dtoa_r+0x214>
 800a1ca:	3f01      	subs	r7, #1
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	9312      	str	r3, [sp, #72]	@ 0x48
 800a1d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a1d2:	1b9b      	subs	r3, r3, r6
 800a1d4:	1e5a      	subs	r2, r3, #1
 800a1d6:	bf44      	itt	mi
 800a1d8:	f1c3 0801 	rsbmi	r8, r3, #1
 800a1dc:	2300      	movmi	r3, #0
 800a1de:	9208      	str	r2, [sp, #32]
 800a1e0:	bf54      	ite	pl
 800a1e2:	f04f 0800 	movpl.w	r8, #0
 800a1e6:	9308      	strmi	r3, [sp, #32]
 800a1e8:	2f00      	cmp	r7, #0
 800a1ea:	db39      	blt.n	800a260 <_dtoa_r+0x218>
 800a1ec:	9b08      	ldr	r3, [sp, #32]
 800a1ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a1f0:	443b      	add	r3, r7
 800a1f2:	9308      	str	r3, [sp, #32]
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1fa:	2b09      	cmp	r3, #9
 800a1fc:	d864      	bhi.n	800a2c8 <_dtoa_r+0x280>
 800a1fe:	2b05      	cmp	r3, #5
 800a200:	bfc4      	itt	gt
 800a202:	3b04      	subgt	r3, #4
 800a204:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a208:	f1a3 0302 	sub.w	r3, r3, #2
 800a20c:	bfcc      	ite	gt
 800a20e:	2400      	movgt	r4, #0
 800a210:	2401      	movle	r4, #1
 800a212:	2b03      	cmp	r3, #3
 800a214:	d863      	bhi.n	800a2de <_dtoa_r+0x296>
 800a216:	e8df f003 	tbb	[pc, r3]
 800a21a:	372a      	.short	0x372a
 800a21c:	5535      	.short	0x5535
 800a21e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a222:	441e      	add	r6, r3
 800a224:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a228:	2b20      	cmp	r3, #32
 800a22a:	bfc1      	itttt	gt
 800a22c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a230:	409f      	lslgt	r7, r3
 800a232:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a236:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a23a:	bfd6      	itet	le
 800a23c:	f1c3 0320 	rsble	r3, r3, #32
 800a240:	ea47 0003 	orrgt.w	r0, r7, r3
 800a244:	fa04 f003 	lslle.w	r0, r4, r3
 800a248:	f7f6 f964 	bl	8000514 <__aeabi_ui2d>
 800a24c:	2201      	movs	r2, #1
 800a24e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a252:	3e01      	subs	r6, #1
 800a254:	9214      	str	r2, [sp, #80]	@ 0x50
 800a256:	e777      	b.n	800a148 <_dtoa_r+0x100>
 800a258:	2301      	movs	r3, #1
 800a25a:	e7b8      	b.n	800a1ce <_dtoa_r+0x186>
 800a25c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a25e:	e7b7      	b.n	800a1d0 <_dtoa_r+0x188>
 800a260:	427b      	negs	r3, r7
 800a262:	930a      	str	r3, [sp, #40]	@ 0x28
 800a264:	2300      	movs	r3, #0
 800a266:	eba8 0807 	sub.w	r8, r8, r7
 800a26a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a26c:	e7c4      	b.n	800a1f8 <_dtoa_r+0x1b0>
 800a26e:	2300      	movs	r3, #0
 800a270:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a272:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a274:	2b00      	cmp	r3, #0
 800a276:	dc35      	bgt.n	800a2e4 <_dtoa_r+0x29c>
 800a278:	2301      	movs	r3, #1
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	9307      	str	r3, [sp, #28]
 800a27e:	461a      	mov	r2, r3
 800a280:	920e      	str	r2, [sp, #56]	@ 0x38
 800a282:	e00b      	b.n	800a29c <_dtoa_r+0x254>
 800a284:	2301      	movs	r3, #1
 800a286:	e7f3      	b.n	800a270 <_dtoa_r+0x228>
 800a288:	2300      	movs	r3, #0
 800a28a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a28c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a28e:	18fb      	adds	r3, r7, r3
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	3301      	adds	r3, #1
 800a294:	2b01      	cmp	r3, #1
 800a296:	9307      	str	r3, [sp, #28]
 800a298:	bfb8      	it	lt
 800a29a:	2301      	movlt	r3, #1
 800a29c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	2204      	movs	r2, #4
 800a2a4:	f102 0514 	add.w	r5, r2, #20
 800a2a8:	429d      	cmp	r5, r3
 800a2aa:	d91f      	bls.n	800a2ec <_dtoa_r+0x2a4>
 800a2ac:	6041      	str	r1, [r0, #4]
 800a2ae:	4658      	mov	r0, fp
 800a2b0:	f000 fd8e 	bl	800add0 <_Balloc>
 800a2b4:	4682      	mov	sl, r0
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	d13c      	bne.n	800a334 <_dtoa_r+0x2ec>
 800a2ba:	4b1b      	ldr	r3, [pc, #108]	@ (800a328 <_dtoa_r+0x2e0>)
 800a2bc:	4602      	mov	r2, r0
 800a2be:	f240 11af 	movw	r1, #431	@ 0x1af
 800a2c2:	e6d8      	b.n	800a076 <_dtoa_r+0x2e>
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e7e0      	b.n	800a28a <_dtoa_r+0x242>
 800a2c8:	2401      	movs	r4, #1
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a2d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2d4:	9300      	str	r3, [sp, #0]
 800a2d6:	9307      	str	r3, [sp, #28]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	2312      	movs	r3, #18
 800a2dc:	e7d0      	b.n	800a280 <_dtoa_r+0x238>
 800a2de:	2301      	movs	r3, #1
 800a2e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2e2:	e7f5      	b.n	800a2d0 <_dtoa_r+0x288>
 800a2e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	9307      	str	r3, [sp, #28]
 800a2ea:	e7d7      	b.n	800a29c <_dtoa_r+0x254>
 800a2ec:	3101      	adds	r1, #1
 800a2ee:	0052      	lsls	r2, r2, #1
 800a2f0:	e7d8      	b.n	800a2a4 <_dtoa_r+0x25c>
 800a2f2:	bf00      	nop
 800a2f4:	f3af 8000 	nop.w
 800a2f8:	636f4361 	.word	0x636f4361
 800a2fc:	3fd287a7 	.word	0x3fd287a7
 800a300:	8b60c8b3 	.word	0x8b60c8b3
 800a304:	3fc68a28 	.word	0x3fc68a28
 800a308:	509f79fb 	.word	0x509f79fb
 800a30c:	3fd34413 	.word	0x3fd34413
 800a310:	0800c099 	.word	0x0800c099
 800a314:	0800c0b0 	.word	0x0800c0b0
 800a318:	7ff00000 	.word	0x7ff00000
 800a31c:	0800c069 	.word	0x0800c069
 800a320:	3ff80000 	.word	0x3ff80000
 800a324:	0800c1a8 	.word	0x0800c1a8
 800a328:	0800c108 	.word	0x0800c108
 800a32c:	0800c095 	.word	0x0800c095
 800a330:	0800c068 	.word	0x0800c068
 800a334:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a338:	6018      	str	r0, [r3, #0]
 800a33a:	9b07      	ldr	r3, [sp, #28]
 800a33c:	2b0e      	cmp	r3, #14
 800a33e:	f200 80a4 	bhi.w	800a48a <_dtoa_r+0x442>
 800a342:	2c00      	cmp	r4, #0
 800a344:	f000 80a1 	beq.w	800a48a <_dtoa_r+0x442>
 800a348:	2f00      	cmp	r7, #0
 800a34a:	dd33      	ble.n	800a3b4 <_dtoa_r+0x36c>
 800a34c:	4bad      	ldr	r3, [pc, #692]	@ (800a604 <_dtoa_r+0x5bc>)
 800a34e:	f007 020f 	and.w	r2, r7, #15
 800a352:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a356:	ed93 7b00 	vldr	d7, [r3]
 800a35a:	05f8      	lsls	r0, r7, #23
 800a35c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a360:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a364:	d516      	bpl.n	800a394 <_dtoa_r+0x34c>
 800a366:	4ba8      	ldr	r3, [pc, #672]	@ (800a608 <_dtoa_r+0x5c0>)
 800a368:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a36c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a370:	f7f6 fa74 	bl	800085c <__aeabi_ddiv>
 800a374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a378:	f004 040f 	and.w	r4, r4, #15
 800a37c:	2603      	movs	r6, #3
 800a37e:	4da2      	ldr	r5, [pc, #648]	@ (800a608 <_dtoa_r+0x5c0>)
 800a380:	b954      	cbnz	r4, 800a398 <_dtoa_r+0x350>
 800a382:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a38a:	f7f6 fa67 	bl	800085c <__aeabi_ddiv>
 800a38e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a392:	e028      	b.n	800a3e6 <_dtoa_r+0x39e>
 800a394:	2602      	movs	r6, #2
 800a396:	e7f2      	b.n	800a37e <_dtoa_r+0x336>
 800a398:	07e1      	lsls	r1, r4, #31
 800a39a:	d508      	bpl.n	800a3ae <_dtoa_r+0x366>
 800a39c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a3a4:	f7f6 f930 	bl	8000608 <__aeabi_dmul>
 800a3a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3ac:	3601      	adds	r6, #1
 800a3ae:	1064      	asrs	r4, r4, #1
 800a3b0:	3508      	adds	r5, #8
 800a3b2:	e7e5      	b.n	800a380 <_dtoa_r+0x338>
 800a3b4:	f000 80d2 	beq.w	800a55c <_dtoa_r+0x514>
 800a3b8:	427c      	negs	r4, r7
 800a3ba:	4b92      	ldr	r3, [pc, #584]	@ (800a604 <_dtoa_r+0x5bc>)
 800a3bc:	4d92      	ldr	r5, [pc, #584]	@ (800a608 <_dtoa_r+0x5c0>)
 800a3be:	f004 020f 	and.w	r2, r4, #15
 800a3c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3ce:	f7f6 f91b 	bl	8000608 <__aeabi_dmul>
 800a3d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3d6:	1124      	asrs	r4, r4, #4
 800a3d8:	2300      	movs	r3, #0
 800a3da:	2602      	movs	r6, #2
 800a3dc:	2c00      	cmp	r4, #0
 800a3de:	f040 80b2 	bne.w	800a546 <_dtoa_r+0x4fe>
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d1d3      	bne.n	800a38e <_dtoa_r+0x346>
 800a3e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a3e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f000 80b7 	beq.w	800a560 <_dtoa_r+0x518>
 800a3f2:	4b86      	ldr	r3, [pc, #536]	@ (800a60c <_dtoa_r+0x5c4>)
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	4629      	mov	r1, r5
 800a3fa:	f7f6 fb77 	bl	8000aec <__aeabi_dcmplt>
 800a3fe:	2800      	cmp	r0, #0
 800a400:	f000 80ae 	beq.w	800a560 <_dtoa_r+0x518>
 800a404:	9b07      	ldr	r3, [sp, #28]
 800a406:	2b00      	cmp	r3, #0
 800a408:	f000 80aa 	beq.w	800a560 <_dtoa_r+0x518>
 800a40c:	9b00      	ldr	r3, [sp, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	dd37      	ble.n	800a482 <_dtoa_r+0x43a>
 800a412:	1e7b      	subs	r3, r7, #1
 800a414:	9304      	str	r3, [sp, #16]
 800a416:	4620      	mov	r0, r4
 800a418:	4b7d      	ldr	r3, [pc, #500]	@ (800a610 <_dtoa_r+0x5c8>)
 800a41a:	2200      	movs	r2, #0
 800a41c:	4629      	mov	r1, r5
 800a41e:	f7f6 f8f3 	bl	8000608 <__aeabi_dmul>
 800a422:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a426:	9c00      	ldr	r4, [sp, #0]
 800a428:	3601      	adds	r6, #1
 800a42a:	4630      	mov	r0, r6
 800a42c:	f7f6 f882 	bl	8000534 <__aeabi_i2d>
 800a430:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a434:	f7f6 f8e8 	bl	8000608 <__aeabi_dmul>
 800a438:	4b76      	ldr	r3, [pc, #472]	@ (800a614 <_dtoa_r+0x5cc>)
 800a43a:	2200      	movs	r2, #0
 800a43c:	f7f5 ff2e 	bl	800029c <__adddf3>
 800a440:	4605      	mov	r5, r0
 800a442:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a446:	2c00      	cmp	r4, #0
 800a448:	f040 808d 	bne.w	800a566 <_dtoa_r+0x51e>
 800a44c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a450:	4b71      	ldr	r3, [pc, #452]	@ (800a618 <_dtoa_r+0x5d0>)
 800a452:	2200      	movs	r2, #0
 800a454:	f7f5 ff20 	bl	8000298 <__aeabi_dsub>
 800a458:	4602      	mov	r2, r0
 800a45a:	460b      	mov	r3, r1
 800a45c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a460:	462a      	mov	r2, r5
 800a462:	4633      	mov	r3, r6
 800a464:	f7f6 fb60 	bl	8000b28 <__aeabi_dcmpgt>
 800a468:	2800      	cmp	r0, #0
 800a46a:	f040 828b 	bne.w	800a984 <_dtoa_r+0x93c>
 800a46e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a472:	462a      	mov	r2, r5
 800a474:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a478:	f7f6 fb38 	bl	8000aec <__aeabi_dcmplt>
 800a47c:	2800      	cmp	r0, #0
 800a47e:	f040 8128 	bne.w	800a6d2 <_dtoa_r+0x68a>
 800a482:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a486:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a48a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f2c0 815a 	blt.w	800a746 <_dtoa_r+0x6fe>
 800a492:	2f0e      	cmp	r7, #14
 800a494:	f300 8157 	bgt.w	800a746 <_dtoa_r+0x6fe>
 800a498:	4b5a      	ldr	r3, [pc, #360]	@ (800a604 <_dtoa_r+0x5bc>)
 800a49a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a49e:	ed93 7b00 	vldr	d7, [r3]
 800a4a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	ed8d 7b00 	vstr	d7, [sp]
 800a4aa:	da03      	bge.n	800a4b4 <_dtoa_r+0x46c>
 800a4ac:	9b07      	ldr	r3, [sp, #28]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	f340 8101 	ble.w	800a6b6 <_dtoa_r+0x66e>
 800a4b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a4b8:	4656      	mov	r6, sl
 800a4ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4be:	4620      	mov	r0, r4
 800a4c0:	4629      	mov	r1, r5
 800a4c2:	f7f6 f9cb 	bl	800085c <__aeabi_ddiv>
 800a4c6:	f7f6 fb4f 	bl	8000b68 <__aeabi_d2iz>
 800a4ca:	4680      	mov	r8, r0
 800a4cc:	f7f6 f832 	bl	8000534 <__aeabi_i2d>
 800a4d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4d4:	f7f6 f898 	bl	8000608 <__aeabi_dmul>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	460b      	mov	r3, r1
 800a4dc:	4620      	mov	r0, r4
 800a4de:	4629      	mov	r1, r5
 800a4e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a4e4:	f7f5 fed8 	bl	8000298 <__aeabi_dsub>
 800a4e8:	f806 4b01 	strb.w	r4, [r6], #1
 800a4ec:	9d07      	ldr	r5, [sp, #28]
 800a4ee:	eba6 040a 	sub.w	r4, r6, sl
 800a4f2:	42a5      	cmp	r5, r4
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	f040 8117 	bne.w	800a72a <_dtoa_r+0x6e2>
 800a4fc:	f7f5 fece 	bl	800029c <__adddf3>
 800a500:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a504:	4604      	mov	r4, r0
 800a506:	460d      	mov	r5, r1
 800a508:	f7f6 fb0e 	bl	8000b28 <__aeabi_dcmpgt>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	f040 80f9 	bne.w	800a704 <_dtoa_r+0x6bc>
 800a512:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a516:	4620      	mov	r0, r4
 800a518:	4629      	mov	r1, r5
 800a51a:	f7f6 fadd 	bl	8000ad8 <__aeabi_dcmpeq>
 800a51e:	b118      	cbz	r0, 800a528 <_dtoa_r+0x4e0>
 800a520:	f018 0f01 	tst.w	r8, #1
 800a524:	f040 80ee 	bne.w	800a704 <_dtoa_r+0x6bc>
 800a528:	4649      	mov	r1, r9
 800a52a:	4658      	mov	r0, fp
 800a52c:	f000 fc90 	bl	800ae50 <_Bfree>
 800a530:	2300      	movs	r3, #0
 800a532:	7033      	strb	r3, [r6, #0]
 800a534:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a536:	3701      	adds	r7, #1
 800a538:	601f      	str	r7, [r3, #0]
 800a53a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f000 831d 	beq.w	800ab7c <_dtoa_r+0xb34>
 800a542:	601e      	str	r6, [r3, #0]
 800a544:	e31a      	b.n	800ab7c <_dtoa_r+0xb34>
 800a546:	07e2      	lsls	r2, r4, #31
 800a548:	d505      	bpl.n	800a556 <_dtoa_r+0x50e>
 800a54a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a54e:	f7f6 f85b 	bl	8000608 <__aeabi_dmul>
 800a552:	3601      	adds	r6, #1
 800a554:	2301      	movs	r3, #1
 800a556:	1064      	asrs	r4, r4, #1
 800a558:	3508      	adds	r5, #8
 800a55a:	e73f      	b.n	800a3dc <_dtoa_r+0x394>
 800a55c:	2602      	movs	r6, #2
 800a55e:	e742      	b.n	800a3e6 <_dtoa_r+0x39e>
 800a560:	9c07      	ldr	r4, [sp, #28]
 800a562:	9704      	str	r7, [sp, #16]
 800a564:	e761      	b.n	800a42a <_dtoa_r+0x3e2>
 800a566:	4b27      	ldr	r3, [pc, #156]	@ (800a604 <_dtoa_r+0x5bc>)
 800a568:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a56a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a56e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a572:	4454      	add	r4, sl
 800a574:	2900      	cmp	r1, #0
 800a576:	d053      	beq.n	800a620 <_dtoa_r+0x5d8>
 800a578:	4928      	ldr	r1, [pc, #160]	@ (800a61c <_dtoa_r+0x5d4>)
 800a57a:	2000      	movs	r0, #0
 800a57c:	f7f6 f96e 	bl	800085c <__aeabi_ddiv>
 800a580:	4633      	mov	r3, r6
 800a582:	462a      	mov	r2, r5
 800a584:	f7f5 fe88 	bl	8000298 <__aeabi_dsub>
 800a588:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a58c:	4656      	mov	r6, sl
 800a58e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a592:	f7f6 fae9 	bl	8000b68 <__aeabi_d2iz>
 800a596:	4605      	mov	r5, r0
 800a598:	f7f5 ffcc 	bl	8000534 <__aeabi_i2d>
 800a59c:	4602      	mov	r2, r0
 800a59e:	460b      	mov	r3, r1
 800a5a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5a4:	f7f5 fe78 	bl	8000298 <__aeabi_dsub>
 800a5a8:	3530      	adds	r5, #48	@ 0x30
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a5b2:	f806 5b01 	strb.w	r5, [r6], #1
 800a5b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a5ba:	f7f6 fa97 	bl	8000aec <__aeabi_dcmplt>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	d171      	bne.n	800a6a6 <_dtoa_r+0x65e>
 800a5c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5c6:	4911      	ldr	r1, [pc, #68]	@ (800a60c <_dtoa_r+0x5c4>)
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	f7f5 fe65 	bl	8000298 <__aeabi_dsub>
 800a5ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a5d2:	f7f6 fa8b 	bl	8000aec <__aeabi_dcmplt>
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	f040 8095 	bne.w	800a706 <_dtoa_r+0x6be>
 800a5dc:	42a6      	cmp	r6, r4
 800a5de:	f43f af50 	beq.w	800a482 <_dtoa_r+0x43a>
 800a5e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a5e6:	4b0a      	ldr	r3, [pc, #40]	@ (800a610 <_dtoa_r+0x5c8>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f7f6 f80d 	bl	8000608 <__aeabi_dmul>
 800a5ee:	4b08      	ldr	r3, [pc, #32]	@ (800a610 <_dtoa_r+0x5c8>)
 800a5f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5fa:	f7f6 f805 	bl	8000608 <__aeabi_dmul>
 800a5fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a602:	e7c4      	b.n	800a58e <_dtoa_r+0x546>
 800a604:	0800c1a8 	.word	0x0800c1a8
 800a608:	0800c180 	.word	0x0800c180
 800a60c:	3ff00000 	.word	0x3ff00000
 800a610:	40240000 	.word	0x40240000
 800a614:	401c0000 	.word	0x401c0000
 800a618:	40140000 	.word	0x40140000
 800a61c:	3fe00000 	.word	0x3fe00000
 800a620:	4631      	mov	r1, r6
 800a622:	4628      	mov	r0, r5
 800a624:	f7f5 fff0 	bl	8000608 <__aeabi_dmul>
 800a628:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a62c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a62e:	4656      	mov	r6, sl
 800a630:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a634:	f7f6 fa98 	bl	8000b68 <__aeabi_d2iz>
 800a638:	4605      	mov	r5, r0
 800a63a:	f7f5 ff7b 	bl	8000534 <__aeabi_i2d>
 800a63e:	4602      	mov	r2, r0
 800a640:	460b      	mov	r3, r1
 800a642:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a646:	f7f5 fe27 	bl	8000298 <__aeabi_dsub>
 800a64a:	3530      	adds	r5, #48	@ 0x30
 800a64c:	f806 5b01 	strb.w	r5, [r6], #1
 800a650:	4602      	mov	r2, r0
 800a652:	460b      	mov	r3, r1
 800a654:	42a6      	cmp	r6, r4
 800a656:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a65a:	f04f 0200 	mov.w	r2, #0
 800a65e:	d124      	bne.n	800a6aa <_dtoa_r+0x662>
 800a660:	4bac      	ldr	r3, [pc, #688]	@ (800a914 <_dtoa_r+0x8cc>)
 800a662:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a666:	f7f5 fe19 	bl	800029c <__adddf3>
 800a66a:	4602      	mov	r2, r0
 800a66c:	460b      	mov	r3, r1
 800a66e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a672:	f7f6 fa59 	bl	8000b28 <__aeabi_dcmpgt>
 800a676:	2800      	cmp	r0, #0
 800a678:	d145      	bne.n	800a706 <_dtoa_r+0x6be>
 800a67a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a67e:	49a5      	ldr	r1, [pc, #660]	@ (800a914 <_dtoa_r+0x8cc>)
 800a680:	2000      	movs	r0, #0
 800a682:	f7f5 fe09 	bl	8000298 <__aeabi_dsub>
 800a686:	4602      	mov	r2, r0
 800a688:	460b      	mov	r3, r1
 800a68a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a68e:	f7f6 fa2d 	bl	8000aec <__aeabi_dcmplt>
 800a692:	2800      	cmp	r0, #0
 800a694:	f43f aef5 	beq.w	800a482 <_dtoa_r+0x43a>
 800a698:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a69a:	1e73      	subs	r3, r6, #1
 800a69c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a69e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a6a2:	2b30      	cmp	r3, #48	@ 0x30
 800a6a4:	d0f8      	beq.n	800a698 <_dtoa_r+0x650>
 800a6a6:	9f04      	ldr	r7, [sp, #16]
 800a6a8:	e73e      	b.n	800a528 <_dtoa_r+0x4e0>
 800a6aa:	4b9b      	ldr	r3, [pc, #620]	@ (800a918 <_dtoa_r+0x8d0>)
 800a6ac:	f7f5 ffac 	bl	8000608 <__aeabi_dmul>
 800a6b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6b4:	e7bc      	b.n	800a630 <_dtoa_r+0x5e8>
 800a6b6:	d10c      	bne.n	800a6d2 <_dtoa_r+0x68a>
 800a6b8:	4b98      	ldr	r3, [pc, #608]	@ (800a91c <_dtoa_r+0x8d4>)
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6c0:	f7f5 ffa2 	bl	8000608 <__aeabi_dmul>
 800a6c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6c8:	f7f6 fa24 	bl	8000b14 <__aeabi_dcmpge>
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	f000 8157 	beq.w	800a980 <_dtoa_r+0x938>
 800a6d2:	2400      	movs	r4, #0
 800a6d4:	4625      	mov	r5, r4
 800a6d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6d8:	43db      	mvns	r3, r3
 800a6da:	9304      	str	r3, [sp, #16]
 800a6dc:	4656      	mov	r6, sl
 800a6de:	2700      	movs	r7, #0
 800a6e0:	4621      	mov	r1, r4
 800a6e2:	4658      	mov	r0, fp
 800a6e4:	f000 fbb4 	bl	800ae50 <_Bfree>
 800a6e8:	2d00      	cmp	r5, #0
 800a6ea:	d0dc      	beq.n	800a6a6 <_dtoa_r+0x65e>
 800a6ec:	b12f      	cbz	r7, 800a6fa <_dtoa_r+0x6b2>
 800a6ee:	42af      	cmp	r7, r5
 800a6f0:	d003      	beq.n	800a6fa <_dtoa_r+0x6b2>
 800a6f2:	4639      	mov	r1, r7
 800a6f4:	4658      	mov	r0, fp
 800a6f6:	f000 fbab 	bl	800ae50 <_Bfree>
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	4658      	mov	r0, fp
 800a6fe:	f000 fba7 	bl	800ae50 <_Bfree>
 800a702:	e7d0      	b.n	800a6a6 <_dtoa_r+0x65e>
 800a704:	9704      	str	r7, [sp, #16]
 800a706:	4633      	mov	r3, r6
 800a708:	461e      	mov	r6, r3
 800a70a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a70e:	2a39      	cmp	r2, #57	@ 0x39
 800a710:	d107      	bne.n	800a722 <_dtoa_r+0x6da>
 800a712:	459a      	cmp	sl, r3
 800a714:	d1f8      	bne.n	800a708 <_dtoa_r+0x6c0>
 800a716:	9a04      	ldr	r2, [sp, #16]
 800a718:	3201      	adds	r2, #1
 800a71a:	9204      	str	r2, [sp, #16]
 800a71c:	2230      	movs	r2, #48	@ 0x30
 800a71e:	f88a 2000 	strb.w	r2, [sl]
 800a722:	781a      	ldrb	r2, [r3, #0]
 800a724:	3201      	adds	r2, #1
 800a726:	701a      	strb	r2, [r3, #0]
 800a728:	e7bd      	b.n	800a6a6 <_dtoa_r+0x65e>
 800a72a:	4b7b      	ldr	r3, [pc, #492]	@ (800a918 <_dtoa_r+0x8d0>)
 800a72c:	2200      	movs	r2, #0
 800a72e:	f7f5 ff6b 	bl	8000608 <__aeabi_dmul>
 800a732:	2200      	movs	r2, #0
 800a734:	2300      	movs	r3, #0
 800a736:	4604      	mov	r4, r0
 800a738:	460d      	mov	r5, r1
 800a73a:	f7f6 f9cd 	bl	8000ad8 <__aeabi_dcmpeq>
 800a73e:	2800      	cmp	r0, #0
 800a740:	f43f aebb 	beq.w	800a4ba <_dtoa_r+0x472>
 800a744:	e6f0      	b.n	800a528 <_dtoa_r+0x4e0>
 800a746:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a748:	2a00      	cmp	r2, #0
 800a74a:	f000 80db 	beq.w	800a904 <_dtoa_r+0x8bc>
 800a74e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a750:	2a01      	cmp	r2, #1
 800a752:	f300 80bf 	bgt.w	800a8d4 <_dtoa_r+0x88c>
 800a756:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a758:	2a00      	cmp	r2, #0
 800a75a:	f000 80b7 	beq.w	800a8cc <_dtoa_r+0x884>
 800a75e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a762:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a764:	4646      	mov	r6, r8
 800a766:	9a08      	ldr	r2, [sp, #32]
 800a768:	2101      	movs	r1, #1
 800a76a:	441a      	add	r2, r3
 800a76c:	4658      	mov	r0, fp
 800a76e:	4498      	add	r8, r3
 800a770:	9208      	str	r2, [sp, #32]
 800a772:	f000 fc21 	bl	800afb8 <__i2b>
 800a776:	4605      	mov	r5, r0
 800a778:	b15e      	cbz	r6, 800a792 <_dtoa_r+0x74a>
 800a77a:	9b08      	ldr	r3, [sp, #32]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	dd08      	ble.n	800a792 <_dtoa_r+0x74a>
 800a780:	42b3      	cmp	r3, r6
 800a782:	9a08      	ldr	r2, [sp, #32]
 800a784:	bfa8      	it	ge
 800a786:	4633      	movge	r3, r6
 800a788:	eba8 0803 	sub.w	r8, r8, r3
 800a78c:	1af6      	subs	r6, r6, r3
 800a78e:	1ad3      	subs	r3, r2, r3
 800a790:	9308      	str	r3, [sp, #32]
 800a792:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a794:	b1f3      	cbz	r3, 800a7d4 <_dtoa_r+0x78c>
 800a796:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f000 80b7 	beq.w	800a90c <_dtoa_r+0x8c4>
 800a79e:	b18c      	cbz	r4, 800a7c4 <_dtoa_r+0x77c>
 800a7a0:	4629      	mov	r1, r5
 800a7a2:	4622      	mov	r2, r4
 800a7a4:	4658      	mov	r0, fp
 800a7a6:	f000 fcc7 	bl	800b138 <__pow5mult>
 800a7aa:	464a      	mov	r2, r9
 800a7ac:	4601      	mov	r1, r0
 800a7ae:	4605      	mov	r5, r0
 800a7b0:	4658      	mov	r0, fp
 800a7b2:	f000 fc17 	bl	800afe4 <__multiply>
 800a7b6:	4649      	mov	r1, r9
 800a7b8:	9004      	str	r0, [sp, #16]
 800a7ba:	4658      	mov	r0, fp
 800a7bc:	f000 fb48 	bl	800ae50 <_Bfree>
 800a7c0:	9b04      	ldr	r3, [sp, #16]
 800a7c2:	4699      	mov	r9, r3
 800a7c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7c6:	1b1a      	subs	r2, r3, r4
 800a7c8:	d004      	beq.n	800a7d4 <_dtoa_r+0x78c>
 800a7ca:	4649      	mov	r1, r9
 800a7cc:	4658      	mov	r0, fp
 800a7ce:	f000 fcb3 	bl	800b138 <__pow5mult>
 800a7d2:	4681      	mov	r9, r0
 800a7d4:	2101      	movs	r1, #1
 800a7d6:	4658      	mov	r0, fp
 800a7d8:	f000 fbee 	bl	800afb8 <__i2b>
 800a7dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7de:	4604      	mov	r4, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	f000 81cf 	beq.w	800ab84 <_dtoa_r+0xb3c>
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	4601      	mov	r1, r0
 800a7ea:	4658      	mov	r0, fp
 800a7ec:	f000 fca4 	bl	800b138 <__pow5mult>
 800a7f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	4604      	mov	r4, r0
 800a7f6:	f300 8095 	bgt.w	800a924 <_dtoa_r+0x8dc>
 800a7fa:	9b02      	ldr	r3, [sp, #8]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	f040 8087 	bne.w	800a910 <_dtoa_r+0x8c8>
 800a802:	9b03      	ldr	r3, [sp, #12]
 800a804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a808:	2b00      	cmp	r3, #0
 800a80a:	f040 8089 	bne.w	800a920 <_dtoa_r+0x8d8>
 800a80e:	9b03      	ldr	r3, [sp, #12]
 800a810:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a814:	0d1b      	lsrs	r3, r3, #20
 800a816:	051b      	lsls	r3, r3, #20
 800a818:	b12b      	cbz	r3, 800a826 <_dtoa_r+0x7de>
 800a81a:	9b08      	ldr	r3, [sp, #32]
 800a81c:	3301      	adds	r3, #1
 800a81e:	9308      	str	r3, [sp, #32]
 800a820:	f108 0801 	add.w	r8, r8, #1
 800a824:	2301      	movs	r3, #1
 800a826:	930a      	str	r3, [sp, #40]	@ 0x28
 800a828:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	f000 81b0 	beq.w	800ab90 <_dtoa_r+0xb48>
 800a830:	6923      	ldr	r3, [r4, #16]
 800a832:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a836:	6918      	ldr	r0, [r3, #16]
 800a838:	f000 fb72 	bl	800af20 <__hi0bits>
 800a83c:	f1c0 0020 	rsb	r0, r0, #32
 800a840:	9b08      	ldr	r3, [sp, #32]
 800a842:	4418      	add	r0, r3
 800a844:	f010 001f 	ands.w	r0, r0, #31
 800a848:	d077      	beq.n	800a93a <_dtoa_r+0x8f2>
 800a84a:	f1c0 0320 	rsb	r3, r0, #32
 800a84e:	2b04      	cmp	r3, #4
 800a850:	dd6b      	ble.n	800a92a <_dtoa_r+0x8e2>
 800a852:	9b08      	ldr	r3, [sp, #32]
 800a854:	f1c0 001c 	rsb	r0, r0, #28
 800a858:	4403      	add	r3, r0
 800a85a:	4480      	add	r8, r0
 800a85c:	4406      	add	r6, r0
 800a85e:	9308      	str	r3, [sp, #32]
 800a860:	f1b8 0f00 	cmp.w	r8, #0
 800a864:	dd05      	ble.n	800a872 <_dtoa_r+0x82a>
 800a866:	4649      	mov	r1, r9
 800a868:	4642      	mov	r2, r8
 800a86a:	4658      	mov	r0, fp
 800a86c:	f000 fcbe 	bl	800b1ec <__lshift>
 800a870:	4681      	mov	r9, r0
 800a872:	9b08      	ldr	r3, [sp, #32]
 800a874:	2b00      	cmp	r3, #0
 800a876:	dd05      	ble.n	800a884 <_dtoa_r+0x83c>
 800a878:	4621      	mov	r1, r4
 800a87a:	461a      	mov	r2, r3
 800a87c:	4658      	mov	r0, fp
 800a87e:	f000 fcb5 	bl	800b1ec <__lshift>
 800a882:	4604      	mov	r4, r0
 800a884:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a886:	2b00      	cmp	r3, #0
 800a888:	d059      	beq.n	800a93e <_dtoa_r+0x8f6>
 800a88a:	4621      	mov	r1, r4
 800a88c:	4648      	mov	r0, r9
 800a88e:	f000 fd19 	bl	800b2c4 <__mcmp>
 800a892:	2800      	cmp	r0, #0
 800a894:	da53      	bge.n	800a93e <_dtoa_r+0x8f6>
 800a896:	1e7b      	subs	r3, r7, #1
 800a898:	9304      	str	r3, [sp, #16]
 800a89a:	4649      	mov	r1, r9
 800a89c:	2300      	movs	r3, #0
 800a89e:	220a      	movs	r2, #10
 800a8a0:	4658      	mov	r0, fp
 800a8a2:	f000 faf7 	bl	800ae94 <__multadd>
 800a8a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8a8:	4681      	mov	r9, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	f000 8172 	beq.w	800ab94 <_dtoa_r+0xb4c>
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	4629      	mov	r1, r5
 800a8b4:	220a      	movs	r2, #10
 800a8b6:	4658      	mov	r0, fp
 800a8b8:	f000 faec 	bl	800ae94 <__multadd>
 800a8bc:	9b00      	ldr	r3, [sp, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	4605      	mov	r5, r0
 800a8c2:	dc67      	bgt.n	800a994 <_dtoa_r+0x94c>
 800a8c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8c6:	2b02      	cmp	r3, #2
 800a8c8:	dc41      	bgt.n	800a94e <_dtoa_r+0x906>
 800a8ca:	e063      	b.n	800a994 <_dtoa_r+0x94c>
 800a8cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a8ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a8d2:	e746      	b.n	800a762 <_dtoa_r+0x71a>
 800a8d4:	9b07      	ldr	r3, [sp, #28]
 800a8d6:	1e5c      	subs	r4, r3, #1
 800a8d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8da:	42a3      	cmp	r3, r4
 800a8dc:	bfbf      	itttt	lt
 800a8de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a8e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a8e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a8e4:	1ae3      	sublt	r3, r4, r3
 800a8e6:	bfb4      	ite	lt
 800a8e8:	18d2      	addlt	r2, r2, r3
 800a8ea:	1b1c      	subge	r4, r3, r4
 800a8ec:	9b07      	ldr	r3, [sp, #28]
 800a8ee:	bfbc      	itt	lt
 800a8f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a8f2:	2400      	movlt	r4, #0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	bfb5      	itete	lt
 800a8f8:	eba8 0603 	sublt.w	r6, r8, r3
 800a8fc:	9b07      	ldrge	r3, [sp, #28]
 800a8fe:	2300      	movlt	r3, #0
 800a900:	4646      	movge	r6, r8
 800a902:	e730      	b.n	800a766 <_dtoa_r+0x71e>
 800a904:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a906:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a908:	4646      	mov	r6, r8
 800a90a:	e735      	b.n	800a778 <_dtoa_r+0x730>
 800a90c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a90e:	e75c      	b.n	800a7ca <_dtoa_r+0x782>
 800a910:	2300      	movs	r3, #0
 800a912:	e788      	b.n	800a826 <_dtoa_r+0x7de>
 800a914:	3fe00000 	.word	0x3fe00000
 800a918:	40240000 	.word	0x40240000
 800a91c:	40140000 	.word	0x40140000
 800a920:	9b02      	ldr	r3, [sp, #8]
 800a922:	e780      	b.n	800a826 <_dtoa_r+0x7de>
 800a924:	2300      	movs	r3, #0
 800a926:	930a      	str	r3, [sp, #40]	@ 0x28
 800a928:	e782      	b.n	800a830 <_dtoa_r+0x7e8>
 800a92a:	d099      	beq.n	800a860 <_dtoa_r+0x818>
 800a92c:	9a08      	ldr	r2, [sp, #32]
 800a92e:	331c      	adds	r3, #28
 800a930:	441a      	add	r2, r3
 800a932:	4498      	add	r8, r3
 800a934:	441e      	add	r6, r3
 800a936:	9208      	str	r2, [sp, #32]
 800a938:	e792      	b.n	800a860 <_dtoa_r+0x818>
 800a93a:	4603      	mov	r3, r0
 800a93c:	e7f6      	b.n	800a92c <_dtoa_r+0x8e4>
 800a93e:	9b07      	ldr	r3, [sp, #28]
 800a940:	9704      	str	r7, [sp, #16]
 800a942:	2b00      	cmp	r3, #0
 800a944:	dc20      	bgt.n	800a988 <_dtoa_r+0x940>
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a94a:	2b02      	cmp	r3, #2
 800a94c:	dd1e      	ble.n	800a98c <_dtoa_r+0x944>
 800a94e:	9b00      	ldr	r3, [sp, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	f47f aec0 	bne.w	800a6d6 <_dtoa_r+0x68e>
 800a956:	4621      	mov	r1, r4
 800a958:	2205      	movs	r2, #5
 800a95a:	4658      	mov	r0, fp
 800a95c:	f000 fa9a 	bl	800ae94 <__multadd>
 800a960:	4601      	mov	r1, r0
 800a962:	4604      	mov	r4, r0
 800a964:	4648      	mov	r0, r9
 800a966:	f000 fcad 	bl	800b2c4 <__mcmp>
 800a96a:	2800      	cmp	r0, #0
 800a96c:	f77f aeb3 	ble.w	800a6d6 <_dtoa_r+0x68e>
 800a970:	4656      	mov	r6, sl
 800a972:	2331      	movs	r3, #49	@ 0x31
 800a974:	f806 3b01 	strb.w	r3, [r6], #1
 800a978:	9b04      	ldr	r3, [sp, #16]
 800a97a:	3301      	adds	r3, #1
 800a97c:	9304      	str	r3, [sp, #16]
 800a97e:	e6ae      	b.n	800a6de <_dtoa_r+0x696>
 800a980:	9c07      	ldr	r4, [sp, #28]
 800a982:	9704      	str	r7, [sp, #16]
 800a984:	4625      	mov	r5, r4
 800a986:	e7f3      	b.n	800a970 <_dtoa_r+0x928>
 800a988:	9b07      	ldr	r3, [sp, #28]
 800a98a:	9300      	str	r3, [sp, #0]
 800a98c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a98e:	2b00      	cmp	r3, #0
 800a990:	f000 8104 	beq.w	800ab9c <_dtoa_r+0xb54>
 800a994:	2e00      	cmp	r6, #0
 800a996:	dd05      	ble.n	800a9a4 <_dtoa_r+0x95c>
 800a998:	4629      	mov	r1, r5
 800a99a:	4632      	mov	r2, r6
 800a99c:	4658      	mov	r0, fp
 800a99e:	f000 fc25 	bl	800b1ec <__lshift>
 800a9a2:	4605      	mov	r5, r0
 800a9a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d05a      	beq.n	800aa60 <_dtoa_r+0xa18>
 800a9aa:	6869      	ldr	r1, [r5, #4]
 800a9ac:	4658      	mov	r0, fp
 800a9ae:	f000 fa0f 	bl	800add0 <_Balloc>
 800a9b2:	4606      	mov	r6, r0
 800a9b4:	b928      	cbnz	r0, 800a9c2 <_dtoa_r+0x97a>
 800a9b6:	4b84      	ldr	r3, [pc, #528]	@ (800abc8 <_dtoa_r+0xb80>)
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a9be:	f7ff bb5a 	b.w	800a076 <_dtoa_r+0x2e>
 800a9c2:	692a      	ldr	r2, [r5, #16]
 800a9c4:	3202      	adds	r2, #2
 800a9c6:	0092      	lsls	r2, r2, #2
 800a9c8:	f105 010c 	add.w	r1, r5, #12
 800a9cc:	300c      	adds	r0, #12
 800a9ce:	f000 ffaf 	bl	800b930 <memcpy>
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	4631      	mov	r1, r6
 800a9d6:	4658      	mov	r0, fp
 800a9d8:	f000 fc08 	bl	800b1ec <__lshift>
 800a9dc:	f10a 0301 	add.w	r3, sl, #1
 800a9e0:	9307      	str	r3, [sp, #28]
 800a9e2:	9b00      	ldr	r3, [sp, #0]
 800a9e4:	4453      	add	r3, sl
 800a9e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9e8:	9b02      	ldr	r3, [sp, #8]
 800a9ea:	f003 0301 	and.w	r3, r3, #1
 800a9ee:	462f      	mov	r7, r5
 800a9f0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9f2:	4605      	mov	r5, r0
 800a9f4:	9b07      	ldr	r3, [sp, #28]
 800a9f6:	4621      	mov	r1, r4
 800a9f8:	3b01      	subs	r3, #1
 800a9fa:	4648      	mov	r0, r9
 800a9fc:	9300      	str	r3, [sp, #0]
 800a9fe:	f7ff fa9a 	bl	8009f36 <quorem>
 800aa02:	4639      	mov	r1, r7
 800aa04:	9002      	str	r0, [sp, #8]
 800aa06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800aa0a:	4648      	mov	r0, r9
 800aa0c:	f000 fc5a 	bl	800b2c4 <__mcmp>
 800aa10:	462a      	mov	r2, r5
 800aa12:	9008      	str	r0, [sp, #32]
 800aa14:	4621      	mov	r1, r4
 800aa16:	4658      	mov	r0, fp
 800aa18:	f000 fc70 	bl	800b2fc <__mdiff>
 800aa1c:	68c2      	ldr	r2, [r0, #12]
 800aa1e:	4606      	mov	r6, r0
 800aa20:	bb02      	cbnz	r2, 800aa64 <_dtoa_r+0xa1c>
 800aa22:	4601      	mov	r1, r0
 800aa24:	4648      	mov	r0, r9
 800aa26:	f000 fc4d 	bl	800b2c4 <__mcmp>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	4631      	mov	r1, r6
 800aa2e:	4658      	mov	r0, fp
 800aa30:	920e      	str	r2, [sp, #56]	@ 0x38
 800aa32:	f000 fa0d 	bl	800ae50 <_Bfree>
 800aa36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa3a:	9e07      	ldr	r6, [sp, #28]
 800aa3c:	ea43 0102 	orr.w	r1, r3, r2
 800aa40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa42:	4319      	orrs	r1, r3
 800aa44:	d110      	bne.n	800aa68 <_dtoa_r+0xa20>
 800aa46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aa4a:	d029      	beq.n	800aaa0 <_dtoa_r+0xa58>
 800aa4c:	9b08      	ldr	r3, [sp, #32]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	dd02      	ble.n	800aa58 <_dtoa_r+0xa10>
 800aa52:	9b02      	ldr	r3, [sp, #8]
 800aa54:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800aa58:	9b00      	ldr	r3, [sp, #0]
 800aa5a:	f883 8000 	strb.w	r8, [r3]
 800aa5e:	e63f      	b.n	800a6e0 <_dtoa_r+0x698>
 800aa60:	4628      	mov	r0, r5
 800aa62:	e7bb      	b.n	800a9dc <_dtoa_r+0x994>
 800aa64:	2201      	movs	r2, #1
 800aa66:	e7e1      	b.n	800aa2c <_dtoa_r+0x9e4>
 800aa68:	9b08      	ldr	r3, [sp, #32]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	db04      	blt.n	800aa78 <_dtoa_r+0xa30>
 800aa6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aa70:	430b      	orrs	r3, r1
 800aa72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aa74:	430b      	orrs	r3, r1
 800aa76:	d120      	bne.n	800aaba <_dtoa_r+0xa72>
 800aa78:	2a00      	cmp	r2, #0
 800aa7a:	dded      	ble.n	800aa58 <_dtoa_r+0xa10>
 800aa7c:	4649      	mov	r1, r9
 800aa7e:	2201      	movs	r2, #1
 800aa80:	4658      	mov	r0, fp
 800aa82:	f000 fbb3 	bl	800b1ec <__lshift>
 800aa86:	4621      	mov	r1, r4
 800aa88:	4681      	mov	r9, r0
 800aa8a:	f000 fc1b 	bl	800b2c4 <__mcmp>
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	dc03      	bgt.n	800aa9a <_dtoa_r+0xa52>
 800aa92:	d1e1      	bne.n	800aa58 <_dtoa_r+0xa10>
 800aa94:	f018 0f01 	tst.w	r8, #1
 800aa98:	d0de      	beq.n	800aa58 <_dtoa_r+0xa10>
 800aa9a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aa9e:	d1d8      	bne.n	800aa52 <_dtoa_r+0xa0a>
 800aaa0:	9a00      	ldr	r2, [sp, #0]
 800aaa2:	2339      	movs	r3, #57	@ 0x39
 800aaa4:	7013      	strb	r3, [r2, #0]
 800aaa6:	4633      	mov	r3, r6
 800aaa8:	461e      	mov	r6, r3
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aab0:	2a39      	cmp	r2, #57	@ 0x39
 800aab2:	d052      	beq.n	800ab5a <_dtoa_r+0xb12>
 800aab4:	3201      	adds	r2, #1
 800aab6:	701a      	strb	r2, [r3, #0]
 800aab8:	e612      	b.n	800a6e0 <_dtoa_r+0x698>
 800aaba:	2a00      	cmp	r2, #0
 800aabc:	dd07      	ble.n	800aace <_dtoa_r+0xa86>
 800aabe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aac2:	d0ed      	beq.n	800aaa0 <_dtoa_r+0xa58>
 800aac4:	9a00      	ldr	r2, [sp, #0]
 800aac6:	f108 0301 	add.w	r3, r8, #1
 800aaca:	7013      	strb	r3, [r2, #0]
 800aacc:	e608      	b.n	800a6e0 <_dtoa_r+0x698>
 800aace:	9b07      	ldr	r3, [sp, #28]
 800aad0:	9a07      	ldr	r2, [sp, #28]
 800aad2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800aad6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aad8:	4293      	cmp	r3, r2
 800aada:	d028      	beq.n	800ab2e <_dtoa_r+0xae6>
 800aadc:	4649      	mov	r1, r9
 800aade:	2300      	movs	r3, #0
 800aae0:	220a      	movs	r2, #10
 800aae2:	4658      	mov	r0, fp
 800aae4:	f000 f9d6 	bl	800ae94 <__multadd>
 800aae8:	42af      	cmp	r7, r5
 800aaea:	4681      	mov	r9, r0
 800aaec:	f04f 0300 	mov.w	r3, #0
 800aaf0:	f04f 020a 	mov.w	r2, #10
 800aaf4:	4639      	mov	r1, r7
 800aaf6:	4658      	mov	r0, fp
 800aaf8:	d107      	bne.n	800ab0a <_dtoa_r+0xac2>
 800aafa:	f000 f9cb 	bl	800ae94 <__multadd>
 800aafe:	4607      	mov	r7, r0
 800ab00:	4605      	mov	r5, r0
 800ab02:	9b07      	ldr	r3, [sp, #28]
 800ab04:	3301      	adds	r3, #1
 800ab06:	9307      	str	r3, [sp, #28]
 800ab08:	e774      	b.n	800a9f4 <_dtoa_r+0x9ac>
 800ab0a:	f000 f9c3 	bl	800ae94 <__multadd>
 800ab0e:	4629      	mov	r1, r5
 800ab10:	4607      	mov	r7, r0
 800ab12:	2300      	movs	r3, #0
 800ab14:	220a      	movs	r2, #10
 800ab16:	4658      	mov	r0, fp
 800ab18:	f000 f9bc 	bl	800ae94 <__multadd>
 800ab1c:	4605      	mov	r5, r0
 800ab1e:	e7f0      	b.n	800ab02 <_dtoa_r+0xaba>
 800ab20:	9b00      	ldr	r3, [sp, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	bfcc      	ite	gt
 800ab26:	461e      	movgt	r6, r3
 800ab28:	2601      	movle	r6, #1
 800ab2a:	4456      	add	r6, sl
 800ab2c:	2700      	movs	r7, #0
 800ab2e:	4649      	mov	r1, r9
 800ab30:	2201      	movs	r2, #1
 800ab32:	4658      	mov	r0, fp
 800ab34:	f000 fb5a 	bl	800b1ec <__lshift>
 800ab38:	4621      	mov	r1, r4
 800ab3a:	4681      	mov	r9, r0
 800ab3c:	f000 fbc2 	bl	800b2c4 <__mcmp>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	dcb0      	bgt.n	800aaa6 <_dtoa_r+0xa5e>
 800ab44:	d102      	bne.n	800ab4c <_dtoa_r+0xb04>
 800ab46:	f018 0f01 	tst.w	r8, #1
 800ab4a:	d1ac      	bne.n	800aaa6 <_dtoa_r+0xa5e>
 800ab4c:	4633      	mov	r3, r6
 800ab4e:	461e      	mov	r6, r3
 800ab50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab54:	2a30      	cmp	r2, #48	@ 0x30
 800ab56:	d0fa      	beq.n	800ab4e <_dtoa_r+0xb06>
 800ab58:	e5c2      	b.n	800a6e0 <_dtoa_r+0x698>
 800ab5a:	459a      	cmp	sl, r3
 800ab5c:	d1a4      	bne.n	800aaa8 <_dtoa_r+0xa60>
 800ab5e:	9b04      	ldr	r3, [sp, #16]
 800ab60:	3301      	adds	r3, #1
 800ab62:	9304      	str	r3, [sp, #16]
 800ab64:	2331      	movs	r3, #49	@ 0x31
 800ab66:	f88a 3000 	strb.w	r3, [sl]
 800ab6a:	e5b9      	b.n	800a6e0 <_dtoa_r+0x698>
 800ab6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ab6e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800abcc <_dtoa_r+0xb84>
 800ab72:	b11b      	cbz	r3, 800ab7c <_dtoa_r+0xb34>
 800ab74:	f10a 0308 	add.w	r3, sl, #8
 800ab78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ab7a:	6013      	str	r3, [r2, #0]
 800ab7c:	4650      	mov	r0, sl
 800ab7e:	b019      	add	sp, #100	@ 0x64
 800ab80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	f77f ae37 	ble.w	800a7fa <_dtoa_r+0x7b2>
 800ab8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab90:	2001      	movs	r0, #1
 800ab92:	e655      	b.n	800a840 <_dtoa_r+0x7f8>
 800ab94:	9b00      	ldr	r3, [sp, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	f77f aed6 	ble.w	800a948 <_dtoa_r+0x900>
 800ab9c:	4656      	mov	r6, sl
 800ab9e:	4621      	mov	r1, r4
 800aba0:	4648      	mov	r0, r9
 800aba2:	f7ff f9c8 	bl	8009f36 <quorem>
 800aba6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800abaa:	f806 8b01 	strb.w	r8, [r6], #1
 800abae:	9b00      	ldr	r3, [sp, #0]
 800abb0:	eba6 020a 	sub.w	r2, r6, sl
 800abb4:	4293      	cmp	r3, r2
 800abb6:	ddb3      	ble.n	800ab20 <_dtoa_r+0xad8>
 800abb8:	4649      	mov	r1, r9
 800abba:	2300      	movs	r3, #0
 800abbc:	220a      	movs	r2, #10
 800abbe:	4658      	mov	r0, fp
 800abc0:	f000 f968 	bl	800ae94 <__multadd>
 800abc4:	4681      	mov	r9, r0
 800abc6:	e7ea      	b.n	800ab9e <_dtoa_r+0xb56>
 800abc8:	0800c108 	.word	0x0800c108
 800abcc:	0800c08c 	.word	0x0800c08c

0800abd0 <_free_r>:
 800abd0:	b538      	push	{r3, r4, r5, lr}
 800abd2:	4605      	mov	r5, r0
 800abd4:	2900      	cmp	r1, #0
 800abd6:	d041      	beq.n	800ac5c <_free_r+0x8c>
 800abd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abdc:	1f0c      	subs	r4, r1, #4
 800abde:	2b00      	cmp	r3, #0
 800abe0:	bfb8      	it	lt
 800abe2:	18e4      	addlt	r4, r4, r3
 800abe4:	f000 f8e8 	bl	800adb8 <__malloc_lock>
 800abe8:	4a1d      	ldr	r2, [pc, #116]	@ (800ac60 <_free_r+0x90>)
 800abea:	6813      	ldr	r3, [r2, #0]
 800abec:	b933      	cbnz	r3, 800abfc <_free_r+0x2c>
 800abee:	6063      	str	r3, [r4, #4]
 800abf0:	6014      	str	r4, [r2, #0]
 800abf2:	4628      	mov	r0, r5
 800abf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abf8:	f000 b8e4 	b.w	800adc4 <__malloc_unlock>
 800abfc:	42a3      	cmp	r3, r4
 800abfe:	d908      	bls.n	800ac12 <_free_r+0x42>
 800ac00:	6820      	ldr	r0, [r4, #0]
 800ac02:	1821      	adds	r1, r4, r0
 800ac04:	428b      	cmp	r3, r1
 800ac06:	bf01      	itttt	eq
 800ac08:	6819      	ldreq	r1, [r3, #0]
 800ac0a:	685b      	ldreq	r3, [r3, #4]
 800ac0c:	1809      	addeq	r1, r1, r0
 800ac0e:	6021      	streq	r1, [r4, #0]
 800ac10:	e7ed      	b.n	800abee <_free_r+0x1e>
 800ac12:	461a      	mov	r2, r3
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	b10b      	cbz	r3, 800ac1c <_free_r+0x4c>
 800ac18:	42a3      	cmp	r3, r4
 800ac1a:	d9fa      	bls.n	800ac12 <_free_r+0x42>
 800ac1c:	6811      	ldr	r1, [r2, #0]
 800ac1e:	1850      	adds	r0, r2, r1
 800ac20:	42a0      	cmp	r0, r4
 800ac22:	d10b      	bne.n	800ac3c <_free_r+0x6c>
 800ac24:	6820      	ldr	r0, [r4, #0]
 800ac26:	4401      	add	r1, r0
 800ac28:	1850      	adds	r0, r2, r1
 800ac2a:	4283      	cmp	r3, r0
 800ac2c:	6011      	str	r1, [r2, #0]
 800ac2e:	d1e0      	bne.n	800abf2 <_free_r+0x22>
 800ac30:	6818      	ldr	r0, [r3, #0]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	6053      	str	r3, [r2, #4]
 800ac36:	4408      	add	r0, r1
 800ac38:	6010      	str	r0, [r2, #0]
 800ac3a:	e7da      	b.n	800abf2 <_free_r+0x22>
 800ac3c:	d902      	bls.n	800ac44 <_free_r+0x74>
 800ac3e:	230c      	movs	r3, #12
 800ac40:	602b      	str	r3, [r5, #0]
 800ac42:	e7d6      	b.n	800abf2 <_free_r+0x22>
 800ac44:	6820      	ldr	r0, [r4, #0]
 800ac46:	1821      	adds	r1, r4, r0
 800ac48:	428b      	cmp	r3, r1
 800ac4a:	bf04      	itt	eq
 800ac4c:	6819      	ldreq	r1, [r3, #0]
 800ac4e:	685b      	ldreq	r3, [r3, #4]
 800ac50:	6063      	str	r3, [r4, #4]
 800ac52:	bf04      	itt	eq
 800ac54:	1809      	addeq	r1, r1, r0
 800ac56:	6021      	streq	r1, [r4, #0]
 800ac58:	6054      	str	r4, [r2, #4]
 800ac5a:	e7ca      	b.n	800abf2 <_free_r+0x22>
 800ac5c:	bd38      	pop	{r3, r4, r5, pc}
 800ac5e:	bf00      	nop
 800ac60:	20002274 	.word	0x20002274

0800ac64 <malloc>:
 800ac64:	4b02      	ldr	r3, [pc, #8]	@ (800ac70 <malloc+0xc>)
 800ac66:	4601      	mov	r1, r0
 800ac68:	6818      	ldr	r0, [r3, #0]
 800ac6a:	f000 b825 	b.w	800acb8 <_malloc_r>
 800ac6e:	bf00      	nop
 800ac70:	20000108 	.word	0x20000108

0800ac74 <sbrk_aligned>:
 800ac74:	b570      	push	{r4, r5, r6, lr}
 800ac76:	4e0f      	ldr	r6, [pc, #60]	@ (800acb4 <sbrk_aligned+0x40>)
 800ac78:	460c      	mov	r4, r1
 800ac7a:	6831      	ldr	r1, [r6, #0]
 800ac7c:	4605      	mov	r5, r0
 800ac7e:	b911      	cbnz	r1, 800ac86 <sbrk_aligned+0x12>
 800ac80:	f000 fe46 	bl	800b910 <_sbrk_r>
 800ac84:	6030      	str	r0, [r6, #0]
 800ac86:	4621      	mov	r1, r4
 800ac88:	4628      	mov	r0, r5
 800ac8a:	f000 fe41 	bl	800b910 <_sbrk_r>
 800ac8e:	1c43      	adds	r3, r0, #1
 800ac90:	d103      	bne.n	800ac9a <sbrk_aligned+0x26>
 800ac92:	f04f 34ff 	mov.w	r4, #4294967295
 800ac96:	4620      	mov	r0, r4
 800ac98:	bd70      	pop	{r4, r5, r6, pc}
 800ac9a:	1cc4      	adds	r4, r0, #3
 800ac9c:	f024 0403 	bic.w	r4, r4, #3
 800aca0:	42a0      	cmp	r0, r4
 800aca2:	d0f8      	beq.n	800ac96 <sbrk_aligned+0x22>
 800aca4:	1a21      	subs	r1, r4, r0
 800aca6:	4628      	mov	r0, r5
 800aca8:	f000 fe32 	bl	800b910 <_sbrk_r>
 800acac:	3001      	adds	r0, #1
 800acae:	d1f2      	bne.n	800ac96 <sbrk_aligned+0x22>
 800acb0:	e7ef      	b.n	800ac92 <sbrk_aligned+0x1e>
 800acb2:	bf00      	nop
 800acb4:	20002270 	.word	0x20002270

0800acb8 <_malloc_r>:
 800acb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acbc:	1ccd      	adds	r5, r1, #3
 800acbe:	f025 0503 	bic.w	r5, r5, #3
 800acc2:	3508      	adds	r5, #8
 800acc4:	2d0c      	cmp	r5, #12
 800acc6:	bf38      	it	cc
 800acc8:	250c      	movcc	r5, #12
 800acca:	2d00      	cmp	r5, #0
 800accc:	4606      	mov	r6, r0
 800acce:	db01      	blt.n	800acd4 <_malloc_r+0x1c>
 800acd0:	42a9      	cmp	r1, r5
 800acd2:	d904      	bls.n	800acde <_malloc_r+0x26>
 800acd4:	230c      	movs	r3, #12
 800acd6:	6033      	str	r3, [r6, #0]
 800acd8:	2000      	movs	r0, #0
 800acda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800adb4 <_malloc_r+0xfc>
 800ace2:	f000 f869 	bl	800adb8 <__malloc_lock>
 800ace6:	f8d8 3000 	ldr.w	r3, [r8]
 800acea:	461c      	mov	r4, r3
 800acec:	bb44      	cbnz	r4, 800ad40 <_malloc_r+0x88>
 800acee:	4629      	mov	r1, r5
 800acf0:	4630      	mov	r0, r6
 800acf2:	f7ff ffbf 	bl	800ac74 <sbrk_aligned>
 800acf6:	1c43      	adds	r3, r0, #1
 800acf8:	4604      	mov	r4, r0
 800acfa:	d158      	bne.n	800adae <_malloc_r+0xf6>
 800acfc:	f8d8 4000 	ldr.w	r4, [r8]
 800ad00:	4627      	mov	r7, r4
 800ad02:	2f00      	cmp	r7, #0
 800ad04:	d143      	bne.n	800ad8e <_malloc_r+0xd6>
 800ad06:	2c00      	cmp	r4, #0
 800ad08:	d04b      	beq.n	800ada2 <_malloc_r+0xea>
 800ad0a:	6823      	ldr	r3, [r4, #0]
 800ad0c:	4639      	mov	r1, r7
 800ad0e:	4630      	mov	r0, r6
 800ad10:	eb04 0903 	add.w	r9, r4, r3
 800ad14:	f000 fdfc 	bl	800b910 <_sbrk_r>
 800ad18:	4581      	cmp	r9, r0
 800ad1a:	d142      	bne.n	800ada2 <_malloc_r+0xea>
 800ad1c:	6821      	ldr	r1, [r4, #0]
 800ad1e:	1a6d      	subs	r5, r5, r1
 800ad20:	4629      	mov	r1, r5
 800ad22:	4630      	mov	r0, r6
 800ad24:	f7ff ffa6 	bl	800ac74 <sbrk_aligned>
 800ad28:	3001      	adds	r0, #1
 800ad2a:	d03a      	beq.n	800ada2 <_malloc_r+0xea>
 800ad2c:	6823      	ldr	r3, [r4, #0]
 800ad2e:	442b      	add	r3, r5
 800ad30:	6023      	str	r3, [r4, #0]
 800ad32:	f8d8 3000 	ldr.w	r3, [r8]
 800ad36:	685a      	ldr	r2, [r3, #4]
 800ad38:	bb62      	cbnz	r2, 800ad94 <_malloc_r+0xdc>
 800ad3a:	f8c8 7000 	str.w	r7, [r8]
 800ad3e:	e00f      	b.n	800ad60 <_malloc_r+0xa8>
 800ad40:	6822      	ldr	r2, [r4, #0]
 800ad42:	1b52      	subs	r2, r2, r5
 800ad44:	d420      	bmi.n	800ad88 <_malloc_r+0xd0>
 800ad46:	2a0b      	cmp	r2, #11
 800ad48:	d917      	bls.n	800ad7a <_malloc_r+0xc2>
 800ad4a:	1961      	adds	r1, r4, r5
 800ad4c:	42a3      	cmp	r3, r4
 800ad4e:	6025      	str	r5, [r4, #0]
 800ad50:	bf18      	it	ne
 800ad52:	6059      	strne	r1, [r3, #4]
 800ad54:	6863      	ldr	r3, [r4, #4]
 800ad56:	bf08      	it	eq
 800ad58:	f8c8 1000 	streq.w	r1, [r8]
 800ad5c:	5162      	str	r2, [r4, r5]
 800ad5e:	604b      	str	r3, [r1, #4]
 800ad60:	4630      	mov	r0, r6
 800ad62:	f000 f82f 	bl	800adc4 <__malloc_unlock>
 800ad66:	f104 000b 	add.w	r0, r4, #11
 800ad6a:	1d23      	adds	r3, r4, #4
 800ad6c:	f020 0007 	bic.w	r0, r0, #7
 800ad70:	1ac2      	subs	r2, r0, r3
 800ad72:	bf1c      	itt	ne
 800ad74:	1a1b      	subne	r3, r3, r0
 800ad76:	50a3      	strne	r3, [r4, r2]
 800ad78:	e7af      	b.n	800acda <_malloc_r+0x22>
 800ad7a:	6862      	ldr	r2, [r4, #4]
 800ad7c:	42a3      	cmp	r3, r4
 800ad7e:	bf0c      	ite	eq
 800ad80:	f8c8 2000 	streq.w	r2, [r8]
 800ad84:	605a      	strne	r2, [r3, #4]
 800ad86:	e7eb      	b.n	800ad60 <_malloc_r+0xa8>
 800ad88:	4623      	mov	r3, r4
 800ad8a:	6864      	ldr	r4, [r4, #4]
 800ad8c:	e7ae      	b.n	800acec <_malloc_r+0x34>
 800ad8e:	463c      	mov	r4, r7
 800ad90:	687f      	ldr	r7, [r7, #4]
 800ad92:	e7b6      	b.n	800ad02 <_malloc_r+0x4a>
 800ad94:	461a      	mov	r2, r3
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	42a3      	cmp	r3, r4
 800ad9a:	d1fb      	bne.n	800ad94 <_malloc_r+0xdc>
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	6053      	str	r3, [r2, #4]
 800ada0:	e7de      	b.n	800ad60 <_malloc_r+0xa8>
 800ada2:	230c      	movs	r3, #12
 800ada4:	6033      	str	r3, [r6, #0]
 800ada6:	4630      	mov	r0, r6
 800ada8:	f000 f80c 	bl	800adc4 <__malloc_unlock>
 800adac:	e794      	b.n	800acd8 <_malloc_r+0x20>
 800adae:	6005      	str	r5, [r0, #0]
 800adb0:	e7d6      	b.n	800ad60 <_malloc_r+0xa8>
 800adb2:	bf00      	nop
 800adb4:	20002274 	.word	0x20002274

0800adb8 <__malloc_lock>:
 800adb8:	4801      	ldr	r0, [pc, #4]	@ (800adc0 <__malloc_lock+0x8>)
 800adba:	f7ff b8ba 	b.w	8009f32 <__retarget_lock_acquire_recursive>
 800adbe:	bf00      	nop
 800adc0:	2000226c 	.word	0x2000226c

0800adc4 <__malloc_unlock>:
 800adc4:	4801      	ldr	r0, [pc, #4]	@ (800adcc <__malloc_unlock+0x8>)
 800adc6:	f7ff b8b5 	b.w	8009f34 <__retarget_lock_release_recursive>
 800adca:	bf00      	nop
 800adcc:	2000226c 	.word	0x2000226c

0800add0 <_Balloc>:
 800add0:	b570      	push	{r4, r5, r6, lr}
 800add2:	69c6      	ldr	r6, [r0, #28]
 800add4:	4604      	mov	r4, r0
 800add6:	460d      	mov	r5, r1
 800add8:	b976      	cbnz	r6, 800adf8 <_Balloc+0x28>
 800adda:	2010      	movs	r0, #16
 800addc:	f7ff ff42 	bl	800ac64 <malloc>
 800ade0:	4602      	mov	r2, r0
 800ade2:	61e0      	str	r0, [r4, #28]
 800ade4:	b920      	cbnz	r0, 800adf0 <_Balloc+0x20>
 800ade6:	4b18      	ldr	r3, [pc, #96]	@ (800ae48 <_Balloc+0x78>)
 800ade8:	4818      	ldr	r0, [pc, #96]	@ (800ae4c <_Balloc+0x7c>)
 800adea:	216b      	movs	r1, #107	@ 0x6b
 800adec:	f000 fdae 	bl	800b94c <__assert_func>
 800adf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adf4:	6006      	str	r6, [r0, #0]
 800adf6:	60c6      	str	r6, [r0, #12]
 800adf8:	69e6      	ldr	r6, [r4, #28]
 800adfa:	68f3      	ldr	r3, [r6, #12]
 800adfc:	b183      	cbz	r3, 800ae20 <_Balloc+0x50>
 800adfe:	69e3      	ldr	r3, [r4, #28]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae06:	b9b8      	cbnz	r0, 800ae38 <_Balloc+0x68>
 800ae08:	2101      	movs	r1, #1
 800ae0a:	fa01 f605 	lsl.w	r6, r1, r5
 800ae0e:	1d72      	adds	r2, r6, #5
 800ae10:	0092      	lsls	r2, r2, #2
 800ae12:	4620      	mov	r0, r4
 800ae14:	f000 fdb8 	bl	800b988 <_calloc_r>
 800ae18:	b160      	cbz	r0, 800ae34 <_Balloc+0x64>
 800ae1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae1e:	e00e      	b.n	800ae3e <_Balloc+0x6e>
 800ae20:	2221      	movs	r2, #33	@ 0x21
 800ae22:	2104      	movs	r1, #4
 800ae24:	4620      	mov	r0, r4
 800ae26:	f000 fdaf 	bl	800b988 <_calloc_r>
 800ae2a:	69e3      	ldr	r3, [r4, #28]
 800ae2c:	60f0      	str	r0, [r6, #12]
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d1e4      	bne.n	800adfe <_Balloc+0x2e>
 800ae34:	2000      	movs	r0, #0
 800ae36:	bd70      	pop	{r4, r5, r6, pc}
 800ae38:	6802      	ldr	r2, [r0, #0]
 800ae3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae3e:	2300      	movs	r3, #0
 800ae40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae44:	e7f7      	b.n	800ae36 <_Balloc+0x66>
 800ae46:	bf00      	nop
 800ae48:	0800c099 	.word	0x0800c099
 800ae4c:	0800c119 	.word	0x0800c119

0800ae50 <_Bfree>:
 800ae50:	b570      	push	{r4, r5, r6, lr}
 800ae52:	69c6      	ldr	r6, [r0, #28]
 800ae54:	4605      	mov	r5, r0
 800ae56:	460c      	mov	r4, r1
 800ae58:	b976      	cbnz	r6, 800ae78 <_Bfree+0x28>
 800ae5a:	2010      	movs	r0, #16
 800ae5c:	f7ff ff02 	bl	800ac64 <malloc>
 800ae60:	4602      	mov	r2, r0
 800ae62:	61e8      	str	r0, [r5, #28]
 800ae64:	b920      	cbnz	r0, 800ae70 <_Bfree+0x20>
 800ae66:	4b09      	ldr	r3, [pc, #36]	@ (800ae8c <_Bfree+0x3c>)
 800ae68:	4809      	ldr	r0, [pc, #36]	@ (800ae90 <_Bfree+0x40>)
 800ae6a:	218f      	movs	r1, #143	@ 0x8f
 800ae6c:	f000 fd6e 	bl	800b94c <__assert_func>
 800ae70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae74:	6006      	str	r6, [r0, #0]
 800ae76:	60c6      	str	r6, [r0, #12]
 800ae78:	b13c      	cbz	r4, 800ae8a <_Bfree+0x3a>
 800ae7a:	69eb      	ldr	r3, [r5, #28]
 800ae7c:	6862      	ldr	r2, [r4, #4]
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae84:	6021      	str	r1, [r4, #0]
 800ae86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae8a:	bd70      	pop	{r4, r5, r6, pc}
 800ae8c:	0800c099 	.word	0x0800c099
 800ae90:	0800c119 	.word	0x0800c119

0800ae94 <__multadd>:
 800ae94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae98:	690d      	ldr	r5, [r1, #16]
 800ae9a:	4607      	mov	r7, r0
 800ae9c:	460c      	mov	r4, r1
 800ae9e:	461e      	mov	r6, r3
 800aea0:	f101 0c14 	add.w	ip, r1, #20
 800aea4:	2000      	movs	r0, #0
 800aea6:	f8dc 3000 	ldr.w	r3, [ip]
 800aeaa:	b299      	uxth	r1, r3
 800aeac:	fb02 6101 	mla	r1, r2, r1, r6
 800aeb0:	0c1e      	lsrs	r6, r3, #16
 800aeb2:	0c0b      	lsrs	r3, r1, #16
 800aeb4:	fb02 3306 	mla	r3, r2, r6, r3
 800aeb8:	b289      	uxth	r1, r1
 800aeba:	3001      	adds	r0, #1
 800aebc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aec0:	4285      	cmp	r5, r0
 800aec2:	f84c 1b04 	str.w	r1, [ip], #4
 800aec6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aeca:	dcec      	bgt.n	800aea6 <__multadd+0x12>
 800aecc:	b30e      	cbz	r6, 800af12 <__multadd+0x7e>
 800aece:	68a3      	ldr	r3, [r4, #8]
 800aed0:	42ab      	cmp	r3, r5
 800aed2:	dc19      	bgt.n	800af08 <__multadd+0x74>
 800aed4:	6861      	ldr	r1, [r4, #4]
 800aed6:	4638      	mov	r0, r7
 800aed8:	3101      	adds	r1, #1
 800aeda:	f7ff ff79 	bl	800add0 <_Balloc>
 800aede:	4680      	mov	r8, r0
 800aee0:	b928      	cbnz	r0, 800aeee <__multadd+0x5a>
 800aee2:	4602      	mov	r2, r0
 800aee4:	4b0c      	ldr	r3, [pc, #48]	@ (800af18 <__multadd+0x84>)
 800aee6:	480d      	ldr	r0, [pc, #52]	@ (800af1c <__multadd+0x88>)
 800aee8:	21ba      	movs	r1, #186	@ 0xba
 800aeea:	f000 fd2f 	bl	800b94c <__assert_func>
 800aeee:	6922      	ldr	r2, [r4, #16]
 800aef0:	3202      	adds	r2, #2
 800aef2:	f104 010c 	add.w	r1, r4, #12
 800aef6:	0092      	lsls	r2, r2, #2
 800aef8:	300c      	adds	r0, #12
 800aefa:	f000 fd19 	bl	800b930 <memcpy>
 800aefe:	4621      	mov	r1, r4
 800af00:	4638      	mov	r0, r7
 800af02:	f7ff ffa5 	bl	800ae50 <_Bfree>
 800af06:	4644      	mov	r4, r8
 800af08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af0c:	3501      	adds	r5, #1
 800af0e:	615e      	str	r6, [r3, #20]
 800af10:	6125      	str	r5, [r4, #16]
 800af12:	4620      	mov	r0, r4
 800af14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af18:	0800c108 	.word	0x0800c108
 800af1c:	0800c119 	.word	0x0800c119

0800af20 <__hi0bits>:
 800af20:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800af24:	4603      	mov	r3, r0
 800af26:	bf36      	itet	cc
 800af28:	0403      	lslcc	r3, r0, #16
 800af2a:	2000      	movcs	r0, #0
 800af2c:	2010      	movcc	r0, #16
 800af2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800af32:	bf3c      	itt	cc
 800af34:	021b      	lslcc	r3, r3, #8
 800af36:	3008      	addcc	r0, #8
 800af38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af3c:	bf3c      	itt	cc
 800af3e:	011b      	lslcc	r3, r3, #4
 800af40:	3004      	addcc	r0, #4
 800af42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af46:	bf3c      	itt	cc
 800af48:	009b      	lslcc	r3, r3, #2
 800af4a:	3002      	addcc	r0, #2
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	db05      	blt.n	800af5c <__hi0bits+0x3c>
 800af50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800af54:	f100 0001 	add.w	r0, r0, #1
 800af58:	bf08      	it	eq
 800af5a:	2020      	moveq	r0, #32
 800af5c:	4770      	bx	lr

0800af5e <__lo0bits>:
 800af5e:	6803      	ldr	r3, [r0, #0]
 800af60:	4602      	mov	r2, r0
 800af62:	f013 0007 	ands.w	r0, r3, #7
 800af66:	d00b      	beq.n	800af80 <__lo0bits+0x22>
 800af68:	07d9      	lsls	r1, r3, #31
 800af6a:	d421      	bmi.n	800afb0 <__lo0bits+0x52>
 800af6c:	0798      	lsls	r0, r3, #30
 800af6e:	bf49      	itett	mi
 800af70:	085b      	lsrmi	r3, r3, #1
 800af72:	089b      	lsrpl	r3, r3, #2
 800af74:	2001      	movmi	r0, #1
 800af76:	6013      	strmi	r3, [r2, #0]
 800af78:	bf5c      	itt	pl
 800af7a:	6013      	strpl	r3, [r2, #0]
 800af7c:	2002      	movpl	r0, #2
 800af7e:	4770      	bx	lr
 800af80:	b299      	uxth	r1, r3
 800af82:	b909      	cbnz	r1, 800af88 <__lo0bits+0x2a>
 800af84:	0c1b      	lsrs	r3, r3, #16
 800af86:	2010      	movs	r0, #16
 800af88:	b2d9      	uxtb	r1, r3
 800af8a:	b909      	cbnz	r1, 800af90 <__lo0bits+0x32>
 800af8c:	3008      	adds	r0, #8
 800af8e:	0a1b      	lsrs	r3, r3, #8
 800af90:	0719      	lsls	r1, r3, #28
 800af92:	bf04      	itt	eq
 800af94:	091b      	lsreq	r3, r3, #4
 800af96:	3004      	addeq	r0, #4
 800af98:	0799      	lsls	r1, r3, #30
 800af9a:	bf04      	itt	eq
 800af9c:	089b      	lsreq	r3, r3, #2
 800af9e:	3002      	addeq	r0, #2
 800afa0:	07d9      	lsls	r1, r3, #31
 800afa2:	d403      	bmi.n	800afac <__lo0bits+0x4e>
 800afa4:	085b      	lsrs	r3, r3, #1
 800afa6:	f100 0001 	add.w	r0, r0, #1
 800afaa:	d003      	beq.n	800afb4 <__lo0bits+0x56>
 800afac:	6013      	str	r3, [r2, #0]
 800afae:	4770      	bx	lr
 800afb0:	2000      	movs	r0, #0
 800afb2:	4770      	bx	lr
 800afb4:	2020      	movs	r0, #32
 800afb6:	4770      	bx	lr

0800afb8 <__i2b>:
 800afb8:	b510      	push	{r4, lr}
 800afba:	460c      	mov	r4, r1
 800afbc:	2101      	movs	r1, #1
 800afbe:	f7ff ff07 	bl	800add0 <_Balloc>
 800afc2:	4602      	mov	r2, r0
 800afc4:	b928      	cbnz	r0, 800afd2 <__i2b+0x1a>
 800afc6:	4b05      	ldr	r3, [pc, #20]	@ (800afdc <__i2b+0x24>)
 800afc8:	4805      	ldr	r0, [pc, #20]	@ (800afe0 <__i2b+0x28>)
 800afca:	f240 1145 	movw	r1, #325	@ 0x145
 800afce:	f000 fcbd 	bl	800b94c <__assert_func>
 800afd2:	2301      	movs	r3, #1
 800afd4:	6144      	str	r4, [r0, #20]
 800afd6:	6103      	str	r3, [r0, #16]
 800afd8:	bd10      	pop	{r4, pc}
 800afda:	bf00      	nop
 800afdc:	0800c108 	.word	0x0800c108
 800afe0:	0800c119 	.word	0x0800c119

0800afe4 <__multiply>:
 800afe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe8:	4614      	mov	r4, r2
 800afea:	690a      	ldr	r2, [r1, #16]
 800afec:	6923      	ldr	r3, [r4, #16]
 800afee:	429a      	cmp	r2, r3
 800aff0:	bfa8      	it	ge
 800aff2:	4623      	movge	r3, r4
 800aff4:	460f      	mov	r7, r1
 800aff6:	bfa4      	itt	ge
 800aff8:	460c      	movge	r4, r1
 800affa:	461f      	movge	r7, r3
 800affc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b000:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b004:	68a3      	ldr	r3, [r4, #8]
 800b006:	6861      	ldr	r1, [r4, #4]
 800b008:	eb0a 0609 	add.w	r6, sl, r9
 800b00c:	42b3      	cmp	r3, r6
 800b00e:	b085      	sub	sp, #20
 800b010:	bfb8      	it	lt
 800b012:	3101      	addlt	r1, #1
 800b014:	f7ff fedc 	bl	800add0 <_Balloc>
 800b018:	b930      	cbnz	r0, 800b028 <__multiply+0x44>
 800b01a:	4602      	mov	r2, r0
 800b01c:	4b44      	ldr	r3, [pc, #272]	@ (800b130 <__multiply+0x14c>)
 800b01e:	4845      	ldr	r0, [pc, #276]	@ (800b134 <__multiply+0x150>)
 800b020:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b024:	f000 fc92 	bl	800b94c <__assert_func>
 800b028:	f100 0514 	add.w	r5, r0, #20
 800b02c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b030:	462b      	mov	r3, r5
 800b032:	2200      	movs	r2, #0
 800b034:	4543      	cmp	r3, r8
 800b036:	d321      	bcc.n	800b07c <__multiply+0x98>
 800b038:	f107 0114 	add.w	r1, r7, #20
 800b03c:	f104 0214 	add.w	r2, r4, #20
 800b040:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b044:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b048:	9302      	str	r3, [sp, #8]
 800b04a:	1b13      	subs	r3, r2, r4
 800b04c:	3b15      	subs	r3, #21
 800b04e:	f023 0303 	bic.w	r3, r3, #3
 800b052:	3304      	adds	r3, #4
 800b054:	f104 0715 	add.w	r7, r4, #21
 800b058:	42ba      	cmp	r2, r7
 800b05a:	bf38      	it	cc
 800b05c:	2304      	movcc	r3, #4
 800b05e:	9301      	str	r3, [sp, #4]
 800b060:	9b02      	ldr	r3, [sp, #8]
 800b062:	9103      	str	r1, [sp, #12]
 800b064:	428b      	cmp	r3, r1
 800b066:	d80c      	bhi.n	800b082 <__multiply+0x9e>
 800b068:	2e00      	cmp	r6, #0
 800b06a:	dd03      	ble.n	800b074 <__multiply+0x90>
 800b06c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b070:	2b00      	cmp	r3, #0
 800b072:	d05b      	beq.n	800b12c <__multiply+0x148>
 800b074:	6106      	str	r6, [r0, #16]
 800b076:	b005      	add	sp, #20
 800b078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b07c:	f843 2b04 	str.w	r2, [r3], #4
 800b080:	e7d8      	b.n	800b034 <__multiply+0x50>
 800b082:	f8b1 a000 	ldrh.w	sl, [r1]
 800b086:	f1ba 0f00 	cmp.w	sl, #0
 800b08a:	d024      	beq.n	800b0d6 <__multiply+0xf2>
 800b08c:	f104 0e14 	add.w	lr, r4, #20
 800b090:	46a9      	mov	r9, r5
 800b092:	f04f 0c00 	mov.w	ip, #0
 800b096:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b09a:	f8d9 3000 	ldr.w	r3, [r9]
 800b09e:	fa1f fb87 	uxth.w	fp, r7
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	fb0a 330b 	mla	r3, sl, fp, r3
 800b0a8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b0ac:	f8d9 7000 	ldr.w	r7, [r9]
 800b0b0:	4463      	add	r3, ip
 800b0b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b0b6:	fb0a c70b 	mla	r7, sl, fp, ip
 800b0ba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b0c4:	4572      	cmp	r2, lr
 800b0c6:	f849 3b04 	str.w	r3, [r9], #4
 800b0ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b0ce:	d8e2      	bhi.n	800b096 <__multiply+0xb2>
 800b0d0:	9b01      	ldr	r3, [sp, #4]
 800b0d2:	f845 c003 	str.w	ip, [r5, r3]
 800b0d6:	9b03      	ldr	r3, [sp, #12]
 800b0d8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b0dc:	3104      	adds	r1, #4
 800b0de:	f1b9 0f00 	cmp.w	r9, #0
 800b0e2:	d021      	beq.n	800b128 <__multiply+0x144>
 800b0e4:	682b      	ldr	r3, [r5, #0]
 800b0e6:	f104 0c14 	add.w	ip, r4, #20
 800b0ea:	46ae      	mov	lr, r5
 800b0ec:	f04f 0a00 	mov.w	sl, #0
 800b0f0:	f8bc b000 	ldrh.w	fp, [ip]
 800b0f4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b0f8:	fb09 770b 	mla	r7, r9, fp, r7
 800b0fc:	4457      	add	r7, sl
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b104:	f84e 3b04 	str.w	r3, [lr], #4
 800b108:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b10c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b110:	f8be 3000 	ldrh.w	r3, [lr]
 800b114:	fb09 330a 	mla	r3, r9, sl, r3
 800b118:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b11c:	4562      	cmp	r2, ip
 800b11e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b122:	d8e5      	bhi.n	800b0f0 <__multiply+0x10c>
 800b124:	9f01      	ldr	r7, [sp, #4]
 800b126:	51eb      	str	r3, [r5, r7]
 800b128:	3504      	adds	r5, #4
 800b12a:	e799      	b.n	800b060 <__multiply+0x7c>
 800b12c:	3e01      	subs	r6, #1
 800b12e:	e79b      	b.n	800b068 <__multiply+0x84>
 800b130:	0800c108 	.word	0x0800c108
 800b134:	0800c119 	.word	0x0800c119

0800b138 <__pow5mult>:
 800b138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b13c:	4615      	mov	r5, r2
 800b13e:	f012 0203 	ands.w	r2, r2, #3
 800b142:	4607      	mov	r7, r0
 800b144:	460e      	mov	r6, r1
 800b146:	d007      	beq.n	800b158 <__pow5mult+0x20>
 800b148:	4c25      	ldr	r4, [pc, #148]	@ (800b1e0 <__pow5mult+0xa8>)
 800b14a:	3a01      	subs	r2, #1
 800b14c:	2300      	movs	r3, #0
 800b14e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b152:	f7ff fe9f 	bl	800ae94 <__multadd>
 800b156:	4606      	mov	r6, r0
 800b158:	10ad      	asrs	r5, r5, #2
 800b15a:	d03d      	beq.n	800b1d8 <__pow5mult+0xa0>
 800b15c:	69fc      	ldr	r4, [r7, #28]
 800b15e:	b97c      	cbnz	r4, 800b180 <__pow5mult+0x48>
 800b160:	2010      	movs	r0, #16
 800b162:	f7ff fd7f 	bl	800ac64 <malloc>
 800b166:	4602      	mov	r2, r0
 800b168:	61f8      	str	r0, [r7, #28]
 800b16a:	b928      	cbnz	r0, 800b178 <__pow5mult+0x40>
 800b16c:	4b1d      	ldr	r3, [pc, #116]	@ (800b1e4 <__pow5mult+0xac>)
 800b16e:	481e      	ldr	r0, [pc, #120]	@ (800b1e8 <__pow5mult+0xb0>)
 800b170:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b174:	f000 fbea 	bl	800b94c <__assert_func>
 800b178:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b17c:	6004      	str	r4, [r0, #0]
 800b17e:	60c4      	str	r4, [r0, #12]
 800b180:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b184:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b188:	b94c      	cbnz	r4, 800b19e <__pow5mult+0x66>
 800b18a:	f240 2171 	movw	r1, #625	@ 0x271
 800b18e:	4638      	mov	r0, r7
 800b190:	f7ff ff12 	bl	800afb8 <__i2b>
 800b194:	2300      	movs	r3, #0
 800b196:	f8c8 0008 	str.w	r0, [r8, #8]
 800b19a:	4604      	mov	r4, r0
 800b19c:	6003      	str	r3, [r0, #0]
 800b19e:	f04f 0900 	mov.w	r9, #0
 800b1a2:	07eb      	lsls	r3, r5, #31
 800b1a4:	d50a      	bpl.n	800b1bc <__pow5mult+0x84>
 800b1a6:	4631      	mov	r1, r6
 800b1a8:	4622      	mov	r2, r4
 800b1aa:	4638      	mov	r0, r7
 800b1ac:	f7ff ff1a 	bl	800afe4 <__multiply>
 800b1b0:	4631      	mov	r1, r6
 800b1b2:	4680      	mov	r8, r0
 800b1b4:	4638      	mov	r0, r7
 800b1b6:	f7ff fe4b 	bl	800ae50 <_Bfree>
 800b1ba:	4646      	mov	r6, r8
 800b1bc:	106d      	asrs	r5, r5, #1
 800b1be:	d00b      	beq.n	800b1d8 <__pow5mult+0xa0>
 800b1c0:	6820      	ldr	r0, [r4, #0]
 800b1c2:	b938      	cbnz	r0, 800b1d4 <__pow5mult+0x9c>
 800b1c4:	4622      	mov	r2, r4
 800b1c6:	4621      	mov	r1, r4
 800b1c8:	4638      	mov	r0, r7
 800b1ca:	f7ff ff0b 	bl	800afe4 <__multiply>
 800b1ce:	6020      	str	r0, [r4, #0]
 800b1d0:	f8c0 9000 	str.w	r9, [r0]
 800b1d4:	4604      	mov	r4, r0
 800b1d6:	e7e4      	b.n	800b1a2 <__pow5mult+0x6a>
 800b1d8:	4630      	mov	r0, r6
 800b1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1de:	bf00      	nop
 800b1e0:	0800c174 	.word	0x0800c174
 800b1e4:	0800c099 	.word	0x0800c099
 800b1e8:	0800c119 	.word	0x0800c119

0800b1ec <__lshift>:
 800b1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1f0:	460c      	mov	r4, r1
 800b1f2:	6849      	ldr	r1, [r1, #4]
 800b1f4:	6923      	ldr	r3, [r4, #16]
 800b1f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b1fa:	68a3      	ldr	r3, [r4, #8]
 800b1fc:	4607      	mov	r7, r0
 800b1fe:	4691      	mov	r9, r2
 800b200:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b204:	f108 0601 	add.w	r6, r8, #1
 800b208:	42b3      	cmp	r3, r6
 800b20a:	db0b      	blt.n	800b224 <__lshift+0x38>
 800b20c:	4638      	mov	r0, r7
 800b20e:	f7ff fddf 	bl	800add0 <_Balloc>
 800b212:	4605      	mov	r5, r0
 800b214:	b948      	cbnz	r0, 800b22a <__lshift+0x3e>
 800b216:	4602      	mov	r2, r0
 800b218:	4b28      	ldr	r3, [pc, #160]	@ (800b2bc <__lshift+0xd0>)
 800b21a:	4829      	ldr	r0, [pc, #164]	@ (800b2c0 <__lshift+0xd4>)
 800b21c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b220:	f000 fb94 	bl	800b94c <__assert_func>
 800b224:	3101      	adds	r1, #1
 800b226:	005b      	lsls	r3, r3, #1
 800b228:	e7ee      	b.n	800b208 <__lshift+0x1c>
 800b22a:	2300      	movs	r3, #0
 800b22c:	f100 0114 	add.w	r1, r0, #20
 800b230:	f100 0210 	add.w	r2, r0, #16
 800b234:	4618      	mov	r0, r3
 800b236:	4553      	cmp	r3, sl
 800b238:	db33      	blt.n	800b2a2 <__lshift+0xb6>
 800b23a:	6920      	ldr	r0, [r4, #16]
 800b23c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b240:	f104 0314 	add.w	r3, r4, #20
 800b244:	f019 091f 	ands.w	r9, r9, #31
 800b248:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b24c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b250:	d02b      	beq.n	800b2aa <__lshift+0xbe>
 800b252:	f1c9 0e20 	rsb	lr, r9, #32
 800b256:	468a      	mov	sl, r1
 800b258:	2200      	movs	r2, #0
 800b25a:	6818      	ldr	r0, [r3, #0]
 800b25c:	fa00 f009 	lsl.w	r0, r0, r9
 800b260:	4310      	orrs	r0, r2
 800b262:	f84a 0b04 	str.w	r0, [sl], #4
 800b266:	f853 2b04 	ldr.w	r2, [r3], #4
 800b26a:	459c      	cmp	ip, r3
 800b26c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b270:	d8f3      	bhi.n	800b25a <__lshift+0x6e>
 800b272:	ebac 0304 	sub.w	r3, ip, r4
 800b276:	3b15      	subs	r3, #21
 800b278:	f023 0303 	bic.w	r3, r3, #3
 800b27c:	3304      	adds	r3, #4
 800b27e:	f104 0015 	add.w	r0, r4, #21
 800b282:	4584      	cmp	ip, r0
 800b284:	bf38      	it	cc
 800b286:	2304      	movcc	r3, #4
 800b288:	50ca      	str	r2, [r1, r3]
 800b28a:	b10a      	cbz	r2, 800b290 <__lshift+0xa4>
 800b28c:	f108 0602 	add.w	r6, r8, #2
 800b290:	3e01      	subs	r6, #1
 800b292:	4638      	mov	r0, r7
 800b294:	612e      	str	r6, [r5, #16]
 800b296:	4621      	mov	r1, r4
 800b298:	f7ff fdda 	bl	800ae50 <_Bfree>
 800b29c:	4628      	mov	r0, r5
 800b29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	e7c5      	b.n	800b236 <__lshift+0x4a>
 800b2aa:	3904      	subs	r1, #4
 800b2ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b2b4:	459c      	cmp	ip, r3
 800b2b6:	d8f9      	bhi.n	800b2ac <__lshift+0xc0>
 800b2b8:	e7ea      	b.n	800b290 <__lshift+0xa4>
 800b2ba:	bf00      	nop
 800b2bc:	0800c108 	.word	0x0800c108
 800b2c0:	0800c119 	.word	0x0800c119

0800b2c4 <__mcmp>:
 800b2c4:	690a      	ldr	r2, [r1, #16]
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	6900      	ldr	r0, [r0, #16]
 800b2ca:	1a80      	subs	r0, r0, r2
 800b2cc:	b530      	push	{r4, r5, lr}
 800b2ce:	d10e      	bne.n	800b2ee <__mcmp+0x2a>
 800b2d0:	3314      	adds	r3, #20
 800b2d2:	3114      	adds	r1, #20
 800b2d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b2d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b2dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b2e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b2e4:	4295      	cmp	r5, r2
 800b2e6:	d003      	beq.n	800b2f0 <__mcmp+0x2c>
 800b2e8:	d205      	bcs.n	800b2f6 <__mcmp+0x32>
 800b2ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ee:	bd30      	pop	{r4, r5, pc}
 800b2f0:	42a3      	cmp	r3, r4
 800b2f2:	d3f3      	bcc.n	800b2dc <__mcmp+0x18>
 800b2f4:	e7fb      	b.n	800b2ee <__mcmp+0x2a>
 800b2f6:	2001      	movs	r0, #1
 800b2f8:	e7f9      	b.n	800b2ee <__mcmp+0x2a>
	...

0800b2fc <__mdiff>:
 800b2fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b300:	4689      	mov	r9, r1
 800b302:	4606      	mov	r6, r0
 800b304:	4611      	mov	r1, r2
 800b306:	4648      	mov	r0, r9
 800b308:	4614      	mov	r4, r2
 800b30a:	f7ff ffdb 	bl	800b2c4 <__mcmp>
 800b30e:	1e05      	subs	r5, r0, #0
 800b310:	d112      	bne.n	800b338 <__mdiff+0x3c>
 800b312:	4629      	mov	r1, r5
 800b314:	4630      	mov	r0, r6
 800b316:	f7ff fd5b 	bl	800add0 <_Balloc>
 800b31a:	4602      	mov	r2, r0
 800b31c:	b928      	cbnz	r0, 800b32a <__mdiff+0x2e>
 800b31e:	4b3f      	ldr	r3, [pc, #252]	@ (800b41c <__mdiff+0x120>)
 800b320:	f240 2137 	movw	r1, #567	@ 0x237
 800b324:	483e      	ldr	r0, [pc, #248]	@ (800b420 <__mdiff+0x124>)
 800b326:	f000 fb11 	bl	800b94c <__assert_func>
 800b32a:	2301      	movs	r3, #1
 800b32c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b330:	4610      	mov	r0, r2
 800b332:	b003      	add	sp, #12
 800b334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b338:	bfbc      	itt	lt
 800b33a:	464b      	movlt	r3, r9
 800b33c:	46a1      	movlt	r9, r4
 800b33e:	4630      	mov	r0, r6
 800b340:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b344:	bfba      	itte	lt
 800b346:	461c      	movlt	r4, r3
 800b348:	2501      	movlt	r5, #1
 800b34a:	2500      	movge	r5, #0
 800b34c:	f7ff fd40 	bl	800add0 <_Balloc>
 800b350:	4602      	mov	r2, r0
 800b352:	b918      	cbnz	r0, 800b35c <__mdiff+0x60>
 800b354:	4b31      	ldr	r3, [pc, #196]	@ (800b41c <__mdiff+0x120>)
 800b356:	f240 2145 	movw	r1, #581	@ 0x245
 800b35a:	e7e3      	b.n	800b324 <__mdiff+0x28>
 800b35c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b360:	6926      	ldr	r6, [r4, #16]
 800b362:	60c5      	str	r5, [r0, #12]
 800b364:	f109 0310 	add.w	r3, r9, #16
 800b368:	f109 0514 	add.w	r5, r9, #20
 800b36c:	f104 0e14 	add.w	lr, r4, #20
 800b370:	f100 0b14 	add.w	fp, r0, #20
 800b374:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b378:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b37c:	9301      	str	r3, [sp, #4]
 800b37e:	46d9      	mov	r9, fp
 800b380:	f04f 0c00 	mov.w	ip, #0
 800b384:	9b01      	ldr	r3, [sp, #4]
 800b386:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b38a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b38e:	9301      	str	r3, [sp, #4]
 800b390:	fa1f f38a 	uxth.w	r3, sl
 800b394:	4619      	mov	r1, r3
 800b396:	b283      	uxth	r3, r0
 800b398:	1acb      	subs	r3, r1, r3
 800b39a:	0c00      	lsrs	r0, r0, #16
 800b39c:	4463      	add	r3, ip
 800b39e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b3a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b3a6:	b29b      	uxth	r3, r3
 800b3a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b3ac:	4576      	cmp	r6, lr
 800b3ae:	f849 3b04 	str.w	r3, [r9], #4
 800b3b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b3b6:	d8e5      	bhi.n	800b384 <__mdiff+0x88>
 800b3b8:	1b33      	subs	r3, r6, r4
 800b3ba:	3b15      	subs	r3, #21
 800b3bc:	f023 0303 	bic.w	r3, r3, #3
 800b3c0:	3415      	adds	r4, #21
 800b3c2:	3304      	adds	r3, #4
 800b3c4:	42a6      	cmp	r6, r4
 800b3c6:	bf38      	it	cc
 800b3c8:	2304      	movcc	r3, #4
 800b3ca:	441d      	add	r5, r3
 800b3cc:	445b      	add	r3, fp
 800b3ce:	461e      	mov	r6, r3
 800b3d0:	462c      	mov	r4, r5
 800b3d2:	4544      	cmp	r4, r8
 800b3d4:	d30e      	bcc.n	800b3f4 <__mdiff+0xf8>
 800b3d6:	f108 0103 	add.w	r1, r8, #3
 800b3da:	1b49      	subs	r1, r1, r5
 800b3dc:	f021 0103 	bic.w	r1, r1, #3
 800b3e0:	3d03      	subs	r5, #3
 800b3e2:	45a8      	cmp	r8, r5
 800b3e4:	bf38      	it	cc
 800b3e6:	2100      	movcc	r1, #0
 800b3e8:	440b      	add	r3, r1
 800b3ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b3ee:	b191      	cbz	r1, 800b416 <__mdiff+0x11a>
 800b3f0:	6117      	str	r7, [r2, #16]
 800b3f2:	e79d      	b.n	800b330 <__mdiff+0x34>
 800b3f4:	f854 1b04 	ldr.w	r1, [r4], #4
 800b3f8:	46e6      	mov	lr, ip
 800b3fa:	0c08      	lsrs	r0, r1, #16
 800b3fc:	fa1c fc81 	uxtah	ip, ip, r1
 800b400:	4471      	add	r1, lr
 800b402:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b406:	b289      	uxth	r1, r1
 800b408:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b40c:	f846 1b04 	str.w	r1, [r6], #4
 800b410:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b414:	e7dd      	b.n	800b3d2 <__mdiff+0xd6>
 800b416:	3f01      	subs	r7, #1
 800b418:	e7e7      	b.n	800b3ea <__mdiff+0xee>
 800b41a:	bf00      	nop
 800b41c:	0800c108 	.word	0x0800c108
 800b420:	0800c119 	.word	0x0800c119

0800b424 <__d2b>:
 800b424:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b428:	460f      	mov	r7, r1
 800b42a:	2101      	movs	r1, #1
 800b42c:	ec59 8b10 	vmov	r8, r9, d0
 800b430:	4616      	mov	r6, r2
 800b432:	f7ff fccd 	bl	800add0 <_Balloc>
 800b436:	4604      	mov	r4, r0
 800b438:	b930      	cbnz	r0, 800b448 <__d2b+0x24>
 800b43a:	4602      	mov	r2, r0
 800b43c:	4b23      	ldr	r3, [pc, #140]	@ (800b4cc <__d2b+0xa8>)
 800b43e:	4824      	ldr	r0, [pc, #144]	@ (800b4d0 <__d2b+0xac>)
 800b440:	f240 310f 	movw	r1, #783	@ 0x30f
 800b444:	f000 fa82 	bl	800b94c <__assert_func>
 800b448:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b44c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b450:	b10d      	cbz	r5, 800b456 <__d2b+0x32>
 800b452:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b456:	9301      	str	r3, [sp, #4]
 800b458:	f1b8 0300 	subs.w	r3, r8, #0
 800b45c:	d023      	beq.n	800b4a6 <__d2b+0x82>
 800b45e:	4668      	mov	r0, sp
 800b460:	9300      	str	r3, [sp, #0]
 800b462:	f7ff fd7c 	bl	800af5e <__lo0bits>
 800b466:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b46a:	b1d0      	cbz	r0, 800b4a2 <__d2b+0x7e>
 800b46c:	f1c0 0320 	rsb	r3, r0, #32
 800b470:	fa02 f303 	lsl.w	r3, r2, r3
 800b474:	430b      	orrs	r3, r1
 800b476:	40c2      	lsrs	r2, r0
 800b478:	6163      	str	r3, [r4, #20]
 800b47a:	9201      	str	r2, [sp, #4]
 800b47c:	9b01      	ldr	r3, [sp, #4]
 800b47e:	61a3      	str	r3, [r4, #24]
 800b480:	2b00      	cmp	r3, #0
 800b482:	bf0c      	ite	eq
 800b484:	2201      	moveq	r2, #1
 800b486:	2202      	movne	r2, #2
 800b488:	6122      	str	r2, [r4, #16]
 800b48a:	b1a5      	cbz	r5, 800b4b6 <__d2b+0x92>
 800b48c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b490:	4405      	add	r5, r0
 800b492:	603d      	str	r5, [r7, #0]
 800b494:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b498:	6030      	str	r0, [r6, #0]
 800b49a:	4620      	mov	r0, r4
 800b49c:	b003      	add	sp, #12
 800b49e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4a2:	6161      	str	r1, [r4, #20]
 800b4a4:	e7ea      	b.n	800b47c <__d2b+0x58>
 800b4a6:	a801      	add	r0, sp, #4
 800b4a8:	f7ff fd59 	bl	800af5e <__lo0bits>
 800b4ac:	9b01      	ldr	r3, [sp, #4]
 800b4ae:	6163      	str	r3, [r4, #20]
 800b4b0:	3020      	adds	r0, #32
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	e7e8      	b.n	800b488 <__d2b+0x64>
 800b4b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b4ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b4be:	6038      	str	r0, [r7, #0]
 800b4c0:	6918      	ldr	r0, [r3, #16]
 800b4c2:	f7ff fd2d 	bl	800af20 <__hi0bits>
 800b4c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b4ca:	e7e5      	b.n	800b498 <__d2b+0x74>
 800b4cc:	0800c108 	.word	0x0800c108
 800b4d0:	0800c119 	.word	0x0800c119

0800b4d4 <__ssputs_r>:
 800b4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4d8:	688e      	ldr	r6, [r1, #8]
 800b4da:	461f      	mov	r7, r3
 800b4dc:	42be      	cmp	r6, r7
 800b4de:	680b      	ldr	r3, [r1, #0]
 800b4e0:	4682      	mov	sl, r0
 800b4e2:	460c      	mov	r4, r1
 800b4e4:	4690      	mov	r8, r2
 800b4e6:	d82d      	bhi.n	800b544 <__ssputs_r+0x70>
 800b4e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b4ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b4f0:	d026      	beq.n	800b540 <__ssputs_r+0x6c>
 800b4f2:	6965      	ldr	r5, [r4, #20]
 800b4f4:	6909      	ldr	r1, [r1, #16]
 800b4f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4fa:	eba3 0901 	sub.w	r9, r3, r1
 800b4fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b502:	1c7b      	adds	r3, r7, #1
 800b504:	444b      	add	r3, r9
 800b506:	106d      	asrs	r5, r5, #1
 800b508:	429d      	cmp	r5, r3
 800b50a:	bf38      	it	cc
 800b50c:	461d      	movcc	r5, r3
 800b50e:	0553      	lsls	r3, r2, #21
 800b510:	d527      	bpl.n	800b562 <__ssputs_r+0x8e>
 800b512:	4629      	mov	r1, r5
 800b514:	f7ff fbd0 	bl	800acb8 <_malloc_r>
 800b518:	4606      	mov	r6, r0
 800b51a:	b360      	cbz	r0, 800b576 <__ssputs_r+0xa2>
 800b51c:	6921      	ldr	r1, [r4, #16]
 800b51e:	464a      	mov	r2, r9
 800b520:	f000 fa06 	bl	800b930 <memcpy>
 800b524:	89a3      	ldrh	r3, [r4, #12]
 800b526:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b52a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b52e:	81a3      	strh	r3, [r4, #12]
 800b530:	6126      	str	r6, [r4, #16]
 800b532:	6165      	str	r5, [r4, #20]
 800b534:	444e      	add	r6, r9
 800b536:	eba5 0509 	sub.w	r5, r5, r9
 800b53a:	6026      	str	r6, [r4, #0]
 800b53c:	60a5      	str	r5, [r4, #8]
 800b53e:	463e      	mov	r6, r7
 800b540:	42be      	cmp	r6, r7
 800b542:	d900      	bls.n	800b546 <__ssputs_r+0x72>
 800b544:	463e      	mov	r6, r7
 800b546:	6820      	ldr	r0, [r4, #0]
 800b548:	4632      	mov	r2, r6
 800b54a:	4641      	mov	r1, r8
 800b54c:	f000 f9c6 	bl	800b8dc <memmove>
 800b550:	68a3      	ldr	r3, [r4, #8]
 800b552:	1b9b      	subs	r3, r3, r6
 800b554:	60a3      	str	r3, [r4, #8]
 800b556:	6823      	ldr	r3, [r4, #0]
 800b558:	4433      	add	r3, r6
 800b55a:	6023      	str	r3, [r4, #0]
 800b55c:	2000      	movs	r0, #0
 800b55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b562:	462a      	mov	r2, r5
 800b564:	f000 fa36 	bl	800b9d4 <_realloc_r>
 800b568:	4606      	mov	r6, r0
 800b56a:	2800      	cmp	r0, #0
 800b56c:	d1e0      	bne.n	800b530 <__ssputs_r+0x5c>
 800b56e:	6921      	ldr	r1, [r4, #16]
 800b570:	4650      	mov	r0, sl
 800b572:	f7ff fb2d 	bl	800abd0 <_free_r>
 800b576:	230c      	movs	r3, #12
 800b578:	f8ca 3000 	str.w	r3, [sl]
 800b57c:	89a3      	ldrh	r3, [r4, #12]
 800b57e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b582:	81a3      	strh	r3, [r4, #12]
 800b584:	f04f 30ff 	mov.w	r0, #4294967295
 800b588:	e7e9      	b.n	800b55e <__ssputs_r+0x8a>
	...

0800b58c <_svfiprintf_r>:
 800b58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b590:	4698      	mov	r8, r3
 800b592:	898b      	ldrh	r3, [r1, #12]
 800b594:	061b      	lsls	r3, r3, #24
 800b596:	b09d      	sub	sp, #116	@ 0x74
 800b598:	4607      	mov	r7, r0
 800b59a:	460d      	mov	r5, r1
 800b59c:	4614      	mov	r4, r2
 800b59e:	d510      	bpl.n	800b5c2 <_svfiprintf_r+0x36>
 800b5a0:	690b      	ldr	r3, [r1, #16]
 800b5a2:	b973      	cbnz	r3, 800b5c2 <_svfiprintf_r+0x36>
 800b5a4:	2140      	movs	r1, #64	@ 0x40
 800b5a6:	f7ff fb87 	bl	800acb8 <_malloc_r>
 800b5aa:	6028      	str	r0, [r5, #0]
 800b5ac:	6128      	str	r0, [r5, #16]
 800b5ae:	b930      	cbnz	r0, 800b5be <_svfiprintf_r+0x32>
 800b5b0:	230c      	movs	r3, #12
 800b5b2:	603b      	str	r3, [r7, #0]
 800b5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b8:	b01d      	add	sp, #116	@ 0x74
 800b5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5be:	2340      	movs	r3, #64	@ 0x40
 800b5c0:	616b      	str	r3, [r5, #20]
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5c6:	2320      	movs	r3, #32
 800b5c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b5cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5d0:	2330      	movs	r3, #48	@ 0x30
 800b5d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b770 <_svfiprintf_r+0x1e4>
 800b5d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b5da:	f04f 0901 	mov.w	r9, #1
 800b5de:	4623      	mov	r3, r4
 800b5e0:	469a      	mov	sl, r3
 800b5e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5e6:	b10a      	cbz	r2, 800b5ec <_svfiprintf_r+0x60>
 800b5e8:	2a25      	cmp	r2, #37	@ 0x25
 800b5ea:	d1f9      	bne.n	800b5e0 <_svfiprintf_r+0x54>
 800b5ec:	ebba 0b04 	subs.w	fp, sl, r4
 800b5f0:	d00b      	beq.n	800b60a <_svfiprintf_r+0x7e>
 800b5f2:	465b      	mov	r3, fp
 800b5f4:	4622      	mov	r2, r4
 800b5f6:	4629      	mov	r1, r5
 800b5f8:	4638      	mov	r0, r7
 800b5fa:	f7ff ff6b 	bl	800b4d4 <__ssputs_r>
 800b5fe:	3001      	adds	r0, #1
 800b600:	f000 80a7 	beq.w	800b752 <_svfiprintf_r+0x1c6>
 800b604:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b606:	445a      	add	r2, fp
 800b608:	9209      	str	r2, [sp, #36]	@ 0x24
 800b60a:	f89a 3000 	ldrb.w	r3, [sl]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	f000 809f 	beq.w	800b752 <_svfiprintf_r+0x1c6>
 800b614:	2300      	movs	r3, #0
 800b616:	f04f 32ff 	mov.w	r2, #4294967295
 800b61a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b61e:	f10a 0a01 	add.w	sl, sl, #1
 800b622:	9304      	str	r3, [sp, #16]
 800b624:	9307      	str	r3, [sp, #28]
 800b626:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b62a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b62c:	4654      	mov	r4, sl
 800b62e:	2205      	movs	r2, #5
 800b630:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b634:	484e      	ldr	r0, [pc, #312]	@ (800b770 <_svfiprintf_r+0x1e4>)
 800b636:	f7f4 fdd3 	bl	80001e0 <memchr>
 800b63a:	9a04      	ldr	r2, [sp, #16]
 800b63c:	b9d8      	cbnz	r0, 800b676 <_svfiprintf_r+0xea>
 800b63e:	06d0      	lsls	r0, r2, #27
 800b640:	bf44      	itt	mi
 800b642:	2320      	movmi	r3, #32
 800b644:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b648:	0711      	lsls	r1, r2, #28
 800b64a:	bf44      	itt	mi
 800b64c:	232b      	movmi	r3, #43	@ 0x2b
 800b64e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b652:	f89a 3000 	ldrb.w	r3, [sl]
 800b656:	2b2a      	cmp	r3, #42	@ 0x2a
 800b658:	d015      	beq.n	800b686 <_svfiprintf_r+0xfa>
 800b65a:	9a07      	ldr	r2, [sp, #28]
 800b65c:	4654      	mov	r4, sl
 800b65e:	2000      	movs	r0, #0
 800b660:	f04f 0c0a 	mov.w	ip, #10
 800b664:	4621      	mov	r1, r4
 800b666:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b66a:	3b30      	subs	r3, #48	@ 0x30
 800b66c:	2b09      	cmp	r3, #9
 800b66e:	d94b      	bls.n	800b708 <_svfiprintf_r+0x17c>
 800b670:	b1b0      	cbz	r0, 800b6a0 <_svfiprintf_r+0x114>
 800b672:	9207      	str	r2, [sp, #28]
 800b674:	e014      	b.n	800b6a0 <_svfiprintf_r+0x114>
 800b676:	eba0 0308 	sub.w	r3, r0, r8
 800b67a:	fa09 f303 	lsl.w	r3, r9, r3
 800b67e:	4313      	orrs	r3, r2
 800b680:	9304      	str	r3, [sp, #16]
 800b682:	46a2      	mov	sl, r4
 800b684:	e7d2      	b.n	800b62c <_svfiprintf_r+0xa0>
 800b686:	9b03      	ldr	r3, [sp, #12]
 800b688:	1d19      	adds	r1, r3, #4
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	9103      	str	r1, [sp, #12]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	bfbb      	ittet	lt
 800b692:	425b      	neglt	r3, r3
 800b694:	f042 0202 	orrlt.w	r2, r2, #2
 800b698:	9307      	strge	r3, [sp, #28]
 800b69a:	9307      	strlt	r3, [sp, #28]
 800b69c:	bfb8      	it	lt
 800b69e:	9204      	strlt	r2, [sp, #16]
 800b6a0:	7823      	ldrb	r3, [r4, #0]
 800b6a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6a4:	d10a      	bne.n	800b6bc <_svfiprintf_r+0x130>
 800b6a6:	7863      	ldrb	r3, [r4, #1]
 800b6a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6aa:	d132      	bne.n	800b712 <_svfiprintf_r+0x186>
 800b6ac:	9b03      	ldr	r3, [sp, #12]
 800b6ae:	1d1a      	adds	r2, r3, #4
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	9203      	str	r2, [sp, #12]
 800b6b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b6b8:	3402      	adds	r4, #2
 800b6ba:	9305      	str	r3, [sp, #20]
 800b6bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b780 <_svfiprintf_r+0x1f4>
 800b6c0:	7821      	ldrb	r1, [r4, #0]
 800b6c2:	2203      	movs	r2, #3
 800b6c4:	4650      	mov	r0, sl
 800b6c6:	f7f4 fd8b 	bl	80001e0 <memchr>
 800b6ca:	b138      	cbz	r0, 800b6dc <_svfiprintf_r+0x150>
 800b6cc:	9b04      	ldr	r3, [sp, #16]
 800b6ce:	eba0 000a 	sub.w	r0, r0, sl
 800b6d2:	2240      	movs	r2, #64	@ 0x40
 800b6d4:	4082      	lsls	r2, r0
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	3401      	adds	r4, #1
 800b6da:	9304      	str	r3, [sp, #16]
 800b6dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6e0:	4824      	ldr	r0, [pc, #144]	@ (800b774 <_svfiprintf_r+0x1e8>)
 800b6e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b6e6:	2206      	movs	r2, #6
 800b6e8:	f7f4 fd7a 	bl	80001e0 <memchr>
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	d036      	beq.n	800b75e <_svfiprintf_r+0x1d2>
 800b6f0:	4b21      	ldr	r3, [pc, #132]	@ (800b778 <_svfiprintf_r+0x1ec>)
 800b6f2:	bb1b      	cbnz	r3, 800b73c <_svfiprintf_r+0x1b0>
 800b6f4:	9b03      	ldr	r3, [sp, #12]
 800b6f6:	3307      	adds	r3, #7
 800b6f8:	f023 0307 	bic.w	r3, r3, #7
 800b6fc:	3308      	adds	r3, #8
 800b6fe:	9303      	str	r3, [sp, #12]
 800b700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b702:	4433      	add	r3, r6
 800b704:	9309      	str	r3, [sp, #36]	@ 0x24
 800b706:	e76a      	b.n	800b5de <_svfiprintf_r+0x52>
 800b708:	fb0c 3202 	mla	r2, ip, r2, r3
 800b70c:	460c      	mov	r4, r1
 800b70e:	2001      	movs	r0, #1
 800b710:	e7a8      	b.n	800b664 <_svfiprintf_r+0xd8>
 800b712:	2300      	movs	r3, #0
 800b714:	3401      	adds	r4, #1
 800b716:	9305      	str	r3, [sp, #20]
 800b718:	4619      	mov	r1, r3
 800b71a:	f04f 0c0a 	mov.w	ip, #10
 800b71e:	4620      	mov	r0, r4
 800b720:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b724:	3a30      	subs	r2, #48	@ 0x30
 800b726:	2a09      	cmp	r2, #9
 800b728:	d903      	bls.n	800b732 <_svfiprintf_r+0x1a6>
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d0c6      	beq.n	800b6bc <_svfiprintf_r+0x130>
 800b72e:	9105      	str	r1, [sp, #20]
 800b730:	e7c4      	b.n	800b6bc <_svfiprintf_r+0x130>
 800b732:	fb0c 2101 	mla	r1, ip, r1, r2
 800b736:	4604      	mov	r4, r0
 800b738:	2301      	movs	r3, #1
 800b73a:	e7f0      	b.n	800b71e <_svfiprintf_r+0x192>
 800b73c:	ab03      	add	r3, sp, #12
 800b73e:	9300      	str	r3, [sp, #0]
 800b740:	462a      	mov	r2, r5
 800b742:	4b0e      	ldr	r3, [pc, #56]	@ (800b77c <_svfiprintf_r+0x1f0>)
 800b744:	a904      	add	r1, sp, #16
 800b746:	4638      	mov	r0, r7
 800b748:	f7fd fe84 	bl	8009454 <_printf_float>
 800b74c:	1c42      	adds	r2, r0, #1
 800b74e:	4606      	mov	r6, r0
 800b750:	d1d6      	bne.n	800b700 <_svfiprintf_r+0x174>
 800b752:	89ab      	ldrh	r3, [r5, #12]
 800b754:	065b      	lsls	r3, r3, #25
 800b756:	f53f af2d 	bmi.w	800b5b4 <_svfiprintf_r+0x28>
 800b75a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b75c:	e72c      	b.n	800b5b8 <_svfiprintf_r+0x2c>
 800b75e:	ab03      	add	r3, sp, #12
 800b760:	9300      	str	r3, [sp, #0]
 800b762:	462a      	mov	r2, r5
 800b764:	4b05      	ldr	r3, [pc, #20]	@ (800b77c <_svfiprintf_r+0x1f0>)
 800b766:	a904      	add	r1, sp, #16
 800b768:	4638      	mov	r0, r7
 800b76a:	f7fe f90b 	bl	8009984 <_printf_i>
 800b76e:	e7ed      	b.n	800b74c <_svfiprintf_r+0x1c0>
 800b770:	0800c270 	.word	0x0800c270
 800b774:	0800c27a 	.word	0x0800c27a
 800b778:	08009455 	.word	0x08009455
 800b77c:	0800b4d5 	.word	0x0800b4d5
 800b780:	0800c276 	.word	0x0800c276

0800b784 <__sflush_r>:
 800b784:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b78c:	0716      	lsls	r6, r2, #28
 800b78e:	4605      	mov	r5, r0
 800b790:	460c      	mov	r4, r1
 800b792:	d454      	bmi.n	800b83e <__sflush_r+0xba>
 800b794:	684b      	ldr	r3, [r1, #4]
 800b796:	2b00      	cmp	r3, #0
 800b798:	dc02      	bgt.n	800b7a0 <__sflush_r+0x1c>
 800b79a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	dd48      	ble.n	800b832 <__sflush_r+0xae>
 800b7a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b7a2:	2e00      	cmp	r6, #0
 800b7a4:	d045      	beq.n	800b832 <__sflush_r+0xae>
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b7ac:	682f      	ldr	r7, [r5, #0]
 800b7ae:	6a21      	ldr	r1, [r4, #32]
 800b7b0:	602b      	str	r3, [r5, #0]
 800b7b2:	d030      	beq.n	800b816 <__sflush_r+0x92>
 800b7b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b7b6:	89a3      	ldrh	r3, [r4, #12]
 800b7b8:	0759      	lsls	r1, r3, #29
 800b7ba:	d505      	bpl.n	800b7c8 <__sflush_r+0x44>
 800b7bc:	6863      	ldr	r3, [r4, #4]
 800b7be:	1ad2      	subs	r2, r2, r3
 800b7c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b7c2:	b10b      	cbz	r3, 800b7c8 <__sflush_r+0x44>
 800b7c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b7c6:	1ad2      	subs	r2, r2, r3
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b7cc:	6a21      	ldr	r1, [r4, #32]
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	47b0      	blx	r6
 800b7d2:	1c43      	adds	r3, r0, #1
 800b7d4:	89a3      	ldrh	r3, [r4, #12]
 800b7d6:	d106      	bne.n	800b7e6 <__sflush_r+0x62>
 800b7d8:	6829      	ldr	r1, [r5, #0]
 800b7da:	291d      	cmp	r1, #29
 800b7dc:	d82b      	bhi.n	800b836 <__sflush_r+0xb2>
 800b7de:	4a2a      	ldr	r2, [pc, #168]	@ (800b888 <__sflush_r+0x104>)
 800b7e0:	410a      	asrs	r2, r1
 800b7e2:	07d6      	lsls	r6, r2, #31
 800b7e4:	d427      	bmi.n	800b836 <__sflush_r+0xb2>
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	6062      	str	r2, [r4, #4]
 800b7ea:	04d9      	lsls	r1, r3, #19
 800b7ec:	6922      	ldr	r2, [r4, #16]
 800b7ee:	6022      	str	r2, [r4, #0]
 800b7f0:	d504      	bpl.n	800b7fc <__sflush_r+0x78>
 800b7f2:	1c42      	adds	r2, r0, #1
 800b7f4:	d101      	bne.n	800b7fa <__sflush_r+0x76>
 800b7f6:	682b      	ldr	r3, [r5, #0]
 800b7f8:	b903      	cbnz	r3, 800b7fc <__sflush_r+0x78>
 800b7fa:	6560      	str	r0, [r4, #84]	@ 0x54
 800b7fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7fe:	602f      	str	r7, [r5, #0]
 800b800:	b1b9      	cbz	r1, 800b832 <__sflush_r+0xae>
 800b802:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b806:	4299      	cmp	r1, r3
 800b808:	d002      	beq.n	800b810 <__sflush_r+0x8c>
 800b80a:	4628      	mov	r0, r5
 800b80c:	f7ff f9e0 	bl	800abd0 <_free_r>
 800b810:	2300      	movs	r3, #0
 800b812:	6363      	str	r3, [r4, #52]	@ 0x34
 800b814:	e00d      	b.n	800b832 <__sflush_r+0xae>
 800b816:	2301      	movs	r3, #1
 800b818:	4628      	mov	r0, r5
 800b81a:	47b0      	blx	r6
 800b81c:	4602      	mov	r2, r0
 800b81e:	1c50      	adds	r0, r2, #1
 800b820:	d1c9      	bne.n	800b7b6 <__sflush_r+0x32>
 800b822:	682b      	ldr	r3, [r5, #0]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d0c6      	beq.n	800b7b6 <__sflush_r+0x32>
 800b828:	2b1d      	cmp	r3, #29
 800b82a:	d001      	beq.n	800b830 <__sflush_r+0xac>
 800b82c:	2b16      	cmp	r3, #22
 800b82e:	d11e      	bne.n	800b86e <__sflush_r+0xea>
 800b830:	602f      	str	r7, [r5, #0]
 800b832:	2000      	movs	r0, #0
 800b834:	e022      	b.n	800b87c <__sflush_r+0xf8>
 800b836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b83a:	b21b      	sxth	r3, r3
 800b83c:	e01b      	b.n	800b876 <__sflush_r+0xf2>
 800b83e:	690f      	ldr	r7, [r1, #16]
 800b840:	2f00      	cmp	r7, #0
 800b842:	d0f6      	beq.n	800b832 <__sflush_r+0xae>
 800b844:	0793      	lsls	r3, r2, #30
 800b846:	680e      	ldr	r6, [r1, #0]
 800b848:	bf08      	it	eq
 800b84a:	694b      	ldreq	r3, [r1, #20]
 800b84c:	600f      	str	r7, [r1, #0]
 800b84e:	bf18      	it	ne
 800b850:	2300      	movne	r3, #0
 800b852:	eba6 0807 	sub.w	r8, r6, r7
 800b856:	608b      	str	r3, [r1, #8]
 800b858:	f1b8 0f00 	cmp.w	r8, #0
 800b85c:	dde9      	ble.n	800b832 <__sflush_r+0xae>
 800b85e:	6a21      	ldr	r1, [r4, #32]
 800b860:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b862:	4643      	mov	r3, r8
 800b864:	463a      	mov	r2, r7
 800b866:	4628      	mov	r0, r5
 800b868:	47b0      	blx	r6
 800b86a:	2800      	cmp	r0, #0
 800b86c:	dc08      	bgt.n	800b880 <__sflush_r+0xfc>
 800b86e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b872:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b876:	81a3      	strh	r3, [r4, #12]
 800b878:	f04f 30ff 	mov.w	r0, #4294967295
 800b87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b880:	4407      	add	r7, r0
 800b882:	eba8 0800 	sub.w	r8, r8, r0
 800b886:	e7e7      	b.n	800b858 <__sflush_r+0xd4>
 800b888:	dfbffffe 	.word	0xdfbffffe

0800b88c <_fflush_r>:
 800b88c:	b538      	push	{r3, r4, r5, lr}
 800b88e:	690b      	ldr	r3, [r1, #16]
 800b890:	4605      	mov	r5, r0
 800b892:	460c      	mov	r4, r1
 800b894:	b913      	cbnz	r3, 800b89c <_fflush_r+0x10>
 800b896:	2500      	movs	r5, #0
 800b898:	4628      	mov	r0, r5
 800b89a:	bd38      	pop	{r3, r4, r5, pc}
 800b89c:	b118      	cbz	r0, 800b8a6 <_fflush_r+0x1a>
 800b89e:	6a03      	ldr	r3, [r0, #32]
 800b8a0:	b90b      	cbnz	r3, 800b8a6 <_fflush_r+0x1a>
 800b8a2:	f7fe fa1b 	bl	8009cdc <__sinit>
 800b8a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d0f3      	beq.n	800b896 <_fflush_r+0xa>
 800b8ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b8b0:	07d0      	lsls	r0, r2, #31
 800b8b2:	d404      	bmi.n	800b8be <_fflush_r+0x32>
 800b8b4:	0599      	lsls	r1, r3, #22
 800b8b6:	d402      	bmi.n	800b8be <_fflush_r+0x32>
 800b8b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8ba:	f7fe fb3a 	bl	8009f32 <__retarget_lock_acquire_recursive>
 800b8be:	4628      	mov	r0, r5
 800b8c0:	4621      	mov	r1, r4
 800b8c2:	f7ff ff5f 	bl	800b784 <__sflush_r>
 800b8c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b8c8:	07da      	lsls	r2, r3, #31
 800b8ca:	4605      	mov	r5, r0
 800b8cc:	d4e4      	bmi.n	800b898 <_fflush_r+0xc>
 800b8ce:	89a3      	ldrh	r3, [r4, #12]
 800b8d0:	059b      	lsls	r3, r3, #22
 800b8d2:	d4e1      	bmi.n	800b898 <_fflush_r+0xc>
 800b8d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8d6:	f7fe fb2d 	bl	8009f34 <__retarget_lock_release_recursive>
 800b8da:	e7dd      	b.n	800b898 <_fflush_r+0xc>

0800b8dc <memmove>:
 800b8dc:	4288      	cmp	r0, r1
 800b8de:	b510      	push	{r4, lr}
 800b8e0:	eb01 0402 	add.w	r4, r1, r2
 800b8e4:	d902      	bls.n	800b8ec <memmove+0x10>
 800b8e6:	4284      	cmp	r4, r0
 800b8e8:	4623      	mov	r3, r4
 800b8ea:	d807      	bhi.n	800b8fc <memmove+0x20>
 800b8ec:	1e43      	subs	r3, r0, #1
 800b8ee:	42a1      	cmp	r1, r4
 800b8f0:	d008      	beq.n	800b904 <memmove+0x28>
 800b8f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8fa:	e7f8      	b.n	800b8ee <memmove+0x12>
 800b8fc:	4402      	add	r2, r0
 800b8fe:	4601      	mov	r1, r0
 800b900:	428a      	cmp	r2, r1
 800b902:	d100      	bne.n	800b906 <memmove+0x2a>
 800b904:	bd10      	pop	{r4, pc}
 800b906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b90a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b90e:	e7f7      	b.n	800b900 <memmove+0x24>

0800b910 <_sbrk_r>:
 800b910:	b538      	push	{r3, r4, r5, lr}
 800b912:	4d06      	ldr	r5, [pc, #24]	@ (800b92c <_sbrk_r+0x1c>)
 800b914:	2300      	movs	r3, #0
 800b916:	4604      	mov	r4, r0
 800b918:	4608      	mov	r0, r1
 800b91a:	602b      	str	r3, [r5, #0]
 800b91c:	f7f6 f840 	bl	80019a0 <_sbrk>
 800b920:	1c43      	adds	r3, r0, #1
 800b922:	d102      	bne.n	800b92a <_sbrk_r+0x1a>
 800b924:	682b      	ldr	r3, [r5, #0]
 800b926:	b103      	cbz	r3, 800b92a <_sbrk_r+0x1a>
 800b928:	6023      	str	r3, [r4, #0]
 800b92a:	bd38      	pop	{r3, r4, r5, pc}
 800b92c:	20002268 	.word	0x20002268

0800b930 <memcpy>:
 800b930:	440a      	add	r2, r1
 800b932:	4291      	cmp	r1, r2
 800b934:	f100 33ff 	add.w	r3, r0, #4294967295
 800b938:	d100      	bne.n	800b93c <memcpy+0xc>
 800b93a:	4770      	bx	lr
 800b93c:	b510      	push	{r4, lr}
 800b93e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b942:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b946:	4291      	cmp	r1, r2
 800b948:	d1f9      	bne.n	800b93e <memcpy+0xe>
 800b94a:	bd10      	pop	{r4, pc}

0800b94c <__assert_func>:
 800b94c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b94e:	4614      	mov	r4, r2
 800b950:	461a      	mov	r2, r3
 800b952:	4b09      	ldr	r3, [pc, #36]	@ (800b978 <__assert_func+0x2c>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4605      	mov	r5, r0
 800b958:	68d8      	ldr	r0, [r3, #12]
 800b95a:	b954      	cbnz	r4, 800b972 <__assert_func+0x26>
 800b95c:	4b07      	ldr	r3, [pc, #28]	@ (800b97c <__assert_func+0x30>)
 800b95e:	461c      	mov	r4, r3
 800b960:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b964:	9100      	str	r1, [sp, #0]
 800b966:	462b      	mov	r3, r5
 800b968:	4905      	ldr	r1, [pc, #20]	@ (800b980 <__assert_func+0x34>)
 800b96a:	f000 f86f 	bl	800ba4c <fiprintf>
 800b96e:	f000 f87f 	bl	800ba70 <abort>
 800b972:	4b04      	ldr	r3, [pc, #16]	@ (800b984 <__assert_func+0x38>)
 800b974:	e7f4      	b.n	800b960 <__assert_func+0x14>
 800b976:	bf00      	nop
 800b978:	20000108 	.word	0x20000108
 800b97c:	0800c2c6 	.word	0x0800c2c6
 800b980:	0800c298 	.word	0x0800c298
 800b984:	0800c28b 	.word	0x0800c28b

0800b988 <_calloc_r>:
 800b988:	b570      	push	{r4, r5, r6, lr}
 800b98a:	fba1 5402 	umull	r5, r4, r1, r2
 800b98e:	b93c      	cbnz	r4, 800b9a0 <_calloc_r+0x18>
 800b990:	4629      	mov	r1, r5
 800b992:	f7ff f991 	bl	800acb8 <_malloc_r>
 800b996:	4606      	mov	r6, r0
 800b998:	b928      	cbnz	r0, 800b9a6 <_calloc_r+0x1e>
 800b99a:	2600      	movs	r6, #0
 800b99c:	4630      	mov	r0, r6
 800b99e:	bd70      	pop	{r4, r5, r6, pc}
 800b9a0:	220c      	movs	r2, #12
 800b9a2:	6002      	str	r2, [r0, #0]
 800b9a4:	e7f9      	b.n	800b99a <_calloc_r+0x12>
 800b9a6:	462a      	mov	r2, r5
 800b9a8:	4621      	mov	r1, r4
 800b9aa:	f7fe fa44 	bl	8009e36 <memset>
 800b9ae:	e7f5      	b.n	800b99c <_calloc_r+0x14>

0800b9b0 <__ascii_mbtowc>:
 800b9b0:	b082      	sub	sp, #8
 800b9b2:	b901      	cbnz	r1, 800b9b6 <__ascii_mbtowc+0x6>
 800b9b4:	a901      	add	r1, sp, #4
 800b9b6:	b142      	cbz	r2, 800b9ca <__ascii_mbtowc+0x1a>
 800b9b8:	b14b      	cbz	r3, 800b9ce <__ascii_mbtowc+0x1e>
 800b9ba:	7813      	ldrb	r3, [r2, #0]
 800b9bc:	600b      	str	r3, [r1, #0]
 800b9be:	7812      	ldrb	r2, [r2, #0]
 800b9c0:	1e10      	subs	r0, r2, #0
 800b9c2:	bf18      	it	ne
 800b9c4:	2001      	movne	r0, #1
 800b9c6:	b002      	add	sp, #8
 800b9c8:	4770      	bx	lr
 800b9ca:	4610      	mov	r0, r2
 800b9cc:	e7fb      	b.n	800b9c6 <__ascii_mbtowc+0x16>
 800b9ce:	f06f 0001 	mvn.w	r0, #1
 800b9d2:	e7f8      	b.n	800b9c6 <__ascii_mbtowc+0x16>

0800b9d4 <_realloc_r>:
 800b9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d8:	4680      	mov	r8, r0
 800b9da:	4615      	mov	r5, r2
 800b9dc:	460c      	mov	r4, r1
 800b9de:	b921      	cbnz	r1, 800b9ea <_realloc_r+0x16>
 800b9e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e4:	4611      	mov	r1, r2
 800b9e6:	f7ff b967 	b.w	800acb8 <_malloc_r>
 800b9ea:	b92a      	cbnz	r2, 800b9f8 <_realloc_r+0x24>
 800b9ec:	f7ff f8f0 	bl	800abd0 <_free_r>
 800b9f0:	2400      	movs	r4, #0
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9f8:	f000 f841 	bl	800ba7e <_malloc_usable_size_r>
 800b9fc:	4285      	cmp	r5, r0
 800b9fe:	4606      	mov	r6, r0
 800ba00:	d802      	bhi.n	800ba08 <_realloc_r+0x34>
 800ba02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ba06:	d8f4      	bhi.n	800b9f2 <_realloc_r+0x1e>
 800ba08:	4629      	mov	r1, r5
 800ba0a:	4640      	mov	r0, r8
 800ba0c:	f7ff f954 	bl	800acb8 <_malloc_r>
 800ba10:	4607      	mov	r7, r0
 800ba12:	2800      	cmp	r0, #0
 800ba14:	d0ec      	beq.n	800b9f0 <_realloc_r+0x1c>
 800ba16:	42b5      	cmp	r5, r6
 800ba18:	462a      	mov	r2, r5
 800ba1a:	4621      	mov	r1, r4
 800ba1c:	bf28      	it	cs
 800ba1e:	4632      	movcs	r2, r6
 800ba20:	f7ff ff86 	bl	800b930 <memcpy>
 800ba24:	4621      	mov	r1, r4
 800ba26:	4640      	mov	r0, r8
 800ba28:	f7ff f8d2 	bl	800abd0 <_free_r>
 800ba2c:	463c      	mov	r4, r7
 800ba2e:	e7e0      	b.n	800b9f2 <_realloc_r+0x1e>

0800ba30 <__ascii_wctomb>:
 800ba30:	4603      	mov	r3, r0
 800ba32:	4608      	mov	r0, r1
 800ba34:	b141      	cbz	r1, 800ba48 <__ascii_wctomb+0x18>
 800ba36:	2aff      	cmp	r2, #255	@ 0xff
 800ba38:	d904      	bls.n	800ba44 <__ascii_wctomb+0x14>
 800ba3a:	228a      	movs	r2, #138	@ 0x8a
 800ba3c:	601a      	str	r2, [r3, #0]
 800ba3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba42:	4770      	bx	lr
 800ba44:	700a      	strb	r2, [r1, #0]
 800ba46:	2001      	movs	r0, #1
 800ba48:	4770      	bx	lr
	...

0800ba4c <fiprintf>:
 800ba4c:	b40e      	push	{r1, r2, r3}
 800ba4e:	b503      	push	{r0, r1, lr}
 800ba50:	4601      	mov	r1, r0
 800ba52:	ab03      	add	r3, sp, #12
 800ba54:	4805      	ldr	r0, [pc, #20]	@ (800ba6c <fiprintf+0x20>)
 800ba56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba5a:	6800      	ldr	r0, [r0, #0]
 800ba5c:	9301      	str	r3, [sp, #4]
 800ba5e:	f000 f83f 	bl	800bae0 <_vfiprintf_r>
 800ba62:	b002      	add	sp, #8
 800ba64:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba68:	b003      	add	sp, #12
 800ba6a:	4770      	bx	lr
 800ba6c:	20000108 	.word	0x20000108

0800ba70 <abort>:
 800ba70:	b508      	push	{r3, lr}
 800ba72:	2006      	movs	r0, #6
 800ba74:	f000 fa08 	bl	800be88 <raise>
 800ba78:	2001      	movs	r0, #1
 800ba7a:	f7f5 ff19 	bl	80018b0 <_exit>

0800ba7e <_malloc_usable_size_r>:
 800ba7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba82:	1f18      	subs	r0, r3, #4
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	bfbc      	itt	lt
 800ba88:	580b      	ldrlt	r3, [r1, r0]
 800ba8a:	18c0      	addlt	r0, r0, r3
 800ba8c:	4770      	bx	lr

0800ba8e <__sfputc_r>:
 800ba8e:	6893      	ldr	r3, [r2, #8]
 800ba90:	3b01      	subs	r3, #1
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	b410      	push	{r4}
 800ba96:	6093      	str	r3, [r2, #8]
 800ba98:	da08      	bge.n	800baac <__sfputc_r+0x1e>
 800ba9a:	6994      	ldr	r4, [r2, #24]
 800ba9c:	42a3      	cmp	r3, r4
 800ba9e:	db01      	blt.n	800baa4 <__sfputc_r+0x16>
 800baa0:	290a      	cmp	r1, #10
 800baa2:	d103      	bne.n	800baac <__sfputc_r+0x1e>
 800baa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baa8:	f000 b932 	b.w	800bd10 <__swbuf_r>
 800baac:	6813      	ldr	r3, [r2, #0]
 800baae:	1c58      	adds	r0, r3, #1
 800bab0:	6010      	str	r0, [r2, #0]
 800bab2:	7019      	strb	r1, [r3, #0]
 800bab4:	4608      	mov	r0, r1
 800bab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baba:	4770      	bx	lr

0800babc <__sfputs_r>:
 800babc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800babe:	4606      	mov	r6, r0
 800bac0:	460f      	mov	r7, r1
 800bac2:	4614      	mov	r4, r2
 800bac4:	18d5      	adds	r5, r2, r3
 800bac6:	42ac      	cmp	r4, r5
 800bac8:	d101      	bne.n	800bace <__sfputs_r+0x12>
 800baca:	2000      	movs	r0, #0
 800bacc:	e007      	b.n	800bade <__sfputs_r+0x22>
 800bace:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bad2:	463a      	mov	r2, r7
 800bad4:	4630      	mov	r0, r6
 800bad6:	f7ff ffda 	bl	800ba8e <__sfputc_r>
 800bada:	1c43      	adds	r3, r0, #1
 800badc:	d1f3      	bne.n	800bac6 <__sfputs_r+0xa>
 800bade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bae0 <_vfiprintf_r>:
 800bae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae4:	460d      	mov	r5, r1
 800bae6:	b09d      	sub	sp, #116	@ 0x74
 800bae8:	4614      	mov	r4, r2
 800baea:	4698      	mov	r8, r3
 800baec:	4606      	mov	r6, r0
 800baee:	b118      	cbz	r0, 800baf8 <_vfiprintf_r+0x18>
 800baf0:	6a03      	ldr	r3, [r0, #32]
 800baf2:	b90b      	cbnz	r3, 800baf8 <_vfiprintf_r+0x18>
 800baf4:	f7fe f8f2 	bl	8009cdc <__sinit>
 800baf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bafa:	07d9      	lsls	r1, r3, #31
 800bafc:	d405      	bmi.n	800bb0a <_vfiprintf_r+0x2a>
 800bafe:	89ab      	ldrh	r3, [r5, #12]
 800bb00:	059a      	lsls	r2, r3, #22
 800bb02:	d402      	bmi.n	800bb0a <_vfiprintf_r+0x2a>
 800bb04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb06:	f7fe fa14 	bl	8009f32 <__retarget_lock_acquire_recursive>
 800bb0a:	89ab      	ldrh	r3, [r5, #12]
 800bb0c:	071b      	lsls	r3, r3, #28
 800bb0e:	d501      	bpl.n	800bb14 <_vfiprintf_r+0x34>
 800bb10:	692b      	ldr	r3, [r5, #16]
 800bb12:	b99b      	cbnz	r3, 800bb3c <_vfiprintf_r+0x5c>
 800bb14:	4629      	mov	r1, r5
 800bb16:	4630      	mov	r0, r6
 800bb18:	f000 f938 	bl	800bd8c <__swsetup_r>
 800bb1c:	b170      	cbz	r0, 800bb3c <_vfiprintf_r+0x5c>
 800bb1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb20:	07dc      	lsls	r4, r3, #31
 800bb22:	d504      	bpl.n	800bb2e <_vfiprintf_r+0x4e>
 800bb24:	f04f 30ff 	mov.w	r0, #4294967295
 800bb28:	b01d      	add	sp, #116	@ 0x74
 800bb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb2e:	89ab      	ldrh	r3, [r5, #12]
 800bb30:	0598      	lsls	r0, r3, #22
 800bb32:	d4f7      	bmi.n	800bb24 <_vfiprintf_r+0x44>
 800bb34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb36:	f7fe f9fd 	bl	8009f34 <__retarget_lock_release_recursive>
 800bb3a:	e7f3      	b.n	800bb24 <_vfiprintf_r+0x44>
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb40:	2320      	movs	r3, #32
 800bb42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb46:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb4a:	2330      	movs	r3, #48	@ 0x30
 800bb4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bcfc <_vfiprintf_r+0x21c>
 800bb50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb54:	f04f 0901 	mov.w	r9, #1
 800bb58:	4623      	mov	r3, r4
 800bb5a:	469a      	mov	sl, r3
 800bb5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb60:	b10a      	cbz	r2, 800bb66 <_vfiprintf_r+0x86>
 800bb62:	2a25      	cmp	r2, #37	@ 0x25
 800bb64:	d1f9      	bne.n	800bb5a <_vfiprintf_r+0x7a>
 800bb66:	ebba 0b04 	subs.w	fp, sl, r4
 800bb6a:	d00b      	beq.n	800bb84 <_vfiprintf_r+0xa4>
 800bb6c:	465b      	mov	r3, fp
 800bb6e:	4622      	mov	r2, r4
 800bb70:	4629      	mov	r1, r5
 800bb72:	4630      	mov	r0, r6
 800bb74:	f7ff ffa2 	bl	800babc <__sfputs_r>
 800bb78:	3001      	adds	r0, #1
 800bb7a:	f000 80a7 	beq.w	800bccc <_vfiprintf_r+0x1ec>
 800bb7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb80:	445a      	add	r2, fp
 800bb82:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb84:	f89a 3000 	ldrb.w	r3, [sl]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	f000 809f 	beq.w	800bccc <_vfiprintf_r+0x1ec>
 800bb8e:	2300      	movs	r3, #0
 800bb90:	f04f 32ff 	mov.w	r2, #4294967295
 800bb94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb98:	f10a 0a01 	add.w	sl, sl, #1
 800bb9c:	9304      	str	r3, [sp, #16]
 800bb9e:	9307      	str	r3, [sp, #28]
 800bba0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bba4:	931a      	str	r3, [sp, #104]	@ 0x68
 800bba6:	4654      	mov	r4, sl
 800bba8:	2205      	movs	r2, #5
 800bbaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbae:	4853      	ldr	r0, [pc, #332]	@ (800bcfc <_vfiprintf_r+0x21c>)
 800bbb0:	f7f4 fb16 	bl	80001e0 <memchr>
 800bbb4:	9a04      	ldr	r2, [sp, #16]
 800bbb6:	b9d8      	cbnz	r0, 800bbf0 <_vfiprintf_r+0x110>
 800bbb8:	06d1      	lsls	r1, r2, #27
 800bbba:	bf44      	itt	mi
 800bbbc:	2320      	movmi	r3, #32
 800bbbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbc2:	0713      	lsls	r3, r2, #28
 800bbc4:	bf44      	itt	mi
 800bbc6:	232b      	movmi	r3, #43	@ 0x2b
 800bbc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbcc:	f89a 3000 	ldrb.w	r3, [sl]
 800bbd0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbd2:	d015      	beq.n	800bc00 <_vfiprintf_r+0x120>
 800bbd4:	9a07      	ldr	r2, [sp, #28]
 800bbd6:	4654      	mov	r4, sl
 800bbd8:	2000      	movs	r0, #0
 800bbda:	f04f 0c0a 	mov.w	ip, #10
 800bbde:	4621      	mov	r1, r4
 800bbe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbe4:	3b30      	subs	r3, #48	@ 0x30
 800bbe6:	2b09      	cmp	r3, #9
 800bbe8:	d94b      	bls.n	800bc82 <_vfiprintf_r+0x1a2>
 800bbea:	b1b0      	cbz	r0, 800bc1a <_vfiprintf_r+0x13a>
 800bbec:	9207      	str	r2, [sp, #28]
 800bbee:	e014      	b.n	800bc1a <_vfiprintf_r+0x13a>
 800bbf0:	eba0 0308 	sub.w	r3, r0, r8
 800bbf4:	fa09 f303 	lsl.w	r3, r9, r3
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	9304      	str	r3, [sp, #16]
 800bbfc:	46a2      	mov	sl, r4
 800bbfe:	e7d2      	b.n	800bba6 <_vfiprintf_r+0xc6>
 800bc00:	9b03      	ldr	r3, [sp, #12]
 800bc02:	1d19      	adds	r1, r3, #4
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	9103      	str	r1, [sp, #12]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	bfbb      	ittet	lt
 800bc0c:	425b      	neglt	r3, r3
 800bc0e:	f042 0202 	orrlt.w	r2, r2, #2
 800bc12:	9307      	strge	r3, [sp, #28]
 800bc14:	9307      	strlt	r3, [sp, #28]
 800bc16:	bfb8      	it	lt
 800bc18:	9204      	strlt	r2, [sp, #16]
 800bc1a:	7823      	ldrb	r3, [r4, #0]
 800bc1c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc1e:	d10a      	bne.n	800bc36 <_vfiprintf_r+0x156>
 800bc20:	7863      	ldrb	r3, [r4, #1]
 800bc22:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc24:	d132      	bne.n	800bc8c <_vfiprintf_r+0x1ac>
 800bc26:	9b03      	ldr	r3, [sp, #12]
 800bc28:	1d1a      	adds	r2, r3, #4
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	9203      	str	r2, [sp, #12]
 800bc2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc32:	3402      	adds	r4, #2
 800bc34:	9305      	str	r3, [sp, #20]
 800bc36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bd0c <_vfiprintf_r+0x22c>
 800bc3a:	7821      	ldrb	r1, [r4, #0]
 800bc3c:	2203      	movs	r2, #3
 800bc3e:	4650      	mov	r0, sl
 800bc40:	f7f4 face 	bl	80001e0 <memchr>
 800bc44:	b138      	cbz	r0, 800bc56 <_vfiprintf_r+0x176>
 800bc46:	9b04      	ldr	r3, [sp, #16]
 800bc48:	eba0 000a 	sub.w	r0, r0, sl
 800bc4c:	2240      	movs	r2, #64	@ 0x40
 800bc4e:	4082      	lsls	r2, r0
 800bc50:	4313      	orrs	r3, r2
 800bc52:	3401      	adds	r4, #1
 800bc54:	9304      	str	r3, [sp, #16]
 800bc56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc5a:	4829      	ldr	r0, [pc, #164]	@ (800bd00 <_vfiprintf_r+0x220>)
 800bc5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc60:	2206      	movs	r2, #6
 800bc62:	f7f4 fabd 	bl	80001e0 <memchr>
 800bc66:	2800      	cmp	r0, #0
 800bc68:	d03f      	beq.n	800bcea <_vfiprintf_r+0x20a>
 800bc6a:	4b26      	ldr	r3, [pc, #152]	@ (800bd04 <_vfiprintf_r+0x224>)
 800bc6c:	bb1b      	cbnz	r3, 800bcb6 <_vfiprintf_r+0x1d6>
 800bc6e:	9b03      	ldr	r3, [sp, #12]
 800bc70:	3307      	adds	r3, #7
 800bc72:	f023 0307 	bic.w	r3, r3, #7
 800bc76:	3308      	adds	r3, #8
 800bc78:	9303      	str	r3, [sp, #12]
 800bc7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc7c:	443b      	add	r3, r7
 800bc7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc80:	e76a      	b.n	800bb58 <_vfiprintf_r+0x78>
 800bc82:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc86:	460c      	mov	r4, r1
 800bc88:	2001      	movs	r0, #1
 800bc8a:	e7a8      	b.n	800bbde <_vfiprintf_r+0xfe>
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	3401      	adds	r4, #1
 800bc90:	9305      	str	r3, [sp, #20]
 800bc92:	4619      	mov	r1, r3
 800bc94:	f04f 0c0a 	mov.w	ip, #10
 800bc98:	4620      	mov	r0, r4
 800bc9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc9e:	3a30      	subs	r2, #48	@ 0x30
 800bca0:	2a09      	cmp	r2, #9
 800bca2:	d903      	bls.n	800bcac <_vfiprintf_r+0x1cc>
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d0c6      	beq.n	800bc36 <_vfiprintf_r+0x156>
 800bca8:	9105      	str	r1, [sp, #20]
 800bcaa:	e7c4      	b.n	800bc36 <_vfiprintf_r+0x156>
 800bcac:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcb0:	4604      	mov	r4, r0
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	e7f0      	b.n	800bc98 <_vfiprintf_r+0x1b8>
 800bcb6:	ab03      	add	r3, sp, #12
 800bcb8:	9300      	str	r3, [sp, #0]
 800bcba:	462a      	mov	r2, r5
 800bcbc:	4b12      	ldr	r3, [pc, #72]	@ (800bd08 <_vfiprintf_r+0x228>)
 800bcbe:	a904      	add	r1, sp, #16
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	f7fd fbc7 	bl	8009454 <_printf_float>
 800bcc6:	4607      	mov	r7, r0
 800bcc8:	1c78      	adds	r0, r7, #1
 800bcca:	d1d6      	bne.n	800bc7a <_vfiprintf_r+0x19a>
 800bccc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcce:	07d9      	lsls	r1, r3, #31
 800bcd0:	d405      	bmi.n	800bcde <_vfiprintf_r+0x1fe>
 800bcd2:	89ab      	ldrh	r3, [r5, #12]
 800bcd4:	059a      	lsls	r2, r3, #22
 800bcd6:	d402      	bmi.n	800bcde <_vfiprintf_r+0x1fe>
 800bcd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcda:	f7fe f92b 	bl	8009f34 <__retarget_lock_release_recursive>
 800bcde:	89ab      	ldrh	r3, [r5, #12]
 800bce0:	065b      	lsls	r3, r3, #25
 800bce2:	f53f af1f 	bmi.w	800bb24 <_vfiprintf_r+0x44>
 800bce6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bce8:	e71e      	b.n	800bb28 <_vfiprintf_r+0x48>
 800bcea:	ab03      	add	r3, sp, #12
 800bcec:	9300      	str	r3, [sp, #0]
 800bcee:	462a      	mov	r2, r5
 800bcf0:	4b05      	ldr	r3, [pc, #20]	@ (800bd08 <_vfiprintf_r+0x228>)
 800bcf2:	a904      	add	r1, sp, #16
 800bcf4:	4630      	mov	r0, r6
 800bcf6:	f7fd fe45 	bl	8009984 <_printf_i>
 800bcfa:	e7e4      	b.n	800bcc6 <_vfiprintf_r+0x1e6>
 800bcfc:	0800c270 	.word	0x0800c270
 800bd00:	0800c27a 	.word	0x0800c27a
 800bd04:	08009455 	.word	0x08009455
 800bd08:	0800babd 	.word	0x0800babd
 800bd0c:	0800c276 	.word	0x0800c276

0800bd10 <__swbuf_r>:
 800bd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd12:	460e      	mov	r6, r1
 800bd14:	4614      	mov	r4, r2
 800bd16:	4605      	mov	r5, r0
 800bd18:	b118      	cbz	r0, 800bd22 <__swbuf_r+0x12>
 800bd1a:	6a03      	ldr	r3, [r0, #32]
 800bd1c:	b90b      	cbnz	r3, 800bd22 <__swbuf_r+0x12>
 800bd1e:	f7fd ffdd 	bl	8009cdc <__sinit>
 800bd22:	69a3      	ldr	r3, [r4, #24]
 800bd24:	60a3      	str	r3, [r4, #8]
 800bd26:	89a3      	ldrh	r3, [r4, #12]
 800bd28:	071a      	lsls	r2, r3, #28
 800bd2a:	d501      	bpl.n	800bd30 <__swbuf_r+0x20>
 800bd2c:	6923      	ldr	r3, [r4, #16]
 800bd2e:	b943      	cbnz	r3, 800bd42 <__swbuf_r+0x32>
 800bd30:	4621      	mov	r1, r4
 800bd32:	4628      	mov	r0, r5
 800bd34:	f000 f82a 	bl	800bd8c <__swsetup_r>
 800bd38:	b118      	cbz	r0, 800bd42 <__swbuf_r+0x32>
 800bd3a:	f04f 37ff 	mov.w	r7, #4294967295
 800bd3e:	4638      	mov	r0, r7
 800bd40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd42:	6823      	ldr	r3, [r4, #0]
 800bd44:	6922      	ldr	r2, [r4, #16]
 800bd46:	1a98      	subs	r0, r3, r2
 800bd48:	6963      	ldr	r3, [r4, #20]
 800bd4a:	b2f6      	uxtb	r6, r6
 800bd4c:	4283      	cmp	r3, r0
 800bd4e:	4637      	mov	r7, r6
 800bd50:	dc05      	bgt.n	800bd5e <__swbuf_r+0x4e>
 800bd52:	4621      	mov	r1, r4
 800bd54:	4628      	mov	r0, r5
 800bd56:	f7ff fd99 	bl	800b88c <_fflush_r>
 800bd5a:	2800      	cmp	r0, #0
 800bd5c:	d1ed      	bne.n	800bd3a <__swbuf_r+0x2a>
 800bd5e:	68a3      	ldr	r3, [r4, #8]
 800bd60:	3b01      	subs	r3, #1
 800bd62:	60a3      	str	r3, [r4, #8]
 800bd64:	6823      	ldr	r3, [r4, #0]
 800bd66:	1c5a      	adds	r2, r3, #1
 800bd68:	6022      	str	r2, [r4, #0]
 800bd6a:	701e      	strb	r6, [r3, #0]
 800bd6c:	6962      	ldr	r2, [r4, #20]
 800bd6e:	1c43      	adds	r3, r0, #1
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d004      	beq.n	800bd7e <__swbuf_r+0x6e>
 800bd74:	89a3      	ldrh	r3, [r4, #12]
 800bd76:	07db      	lsls	r3, r3, #31
 800bd78:	d5e1      	bpl.n	800bd3e <__swbuf_r+0x2e>
 800bd7a:	2e0a      	cmp	r6, #10
 800bd7c:	d1df      	bne.n	800bd3e <__swbuf_r+0x2e>
 800bd7e:	4621      	mov	r1, r4
 800bd80:	4628      	mov	r0, r5
 800bd82:	f7ff fd83 	bl	800b88c <_fflush_r>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	d0d9      	beq.n	800bd3e <__swbuf_r+0x2e>
 800bd8a:	e7d6      	b.n	800bd3a <__swbuf_r+0x2a>

0800bd8c <__swsetup_r>:
 800bd8c:	b538      	push	{r3, r4, r5, lr}
 800bd8e:	4b29      	ldr	r3, [pc, #164]	@ (800be34 <__swsetup_r+0xa8>)
 800bd90:	4605      	mov	r5, r0
 800bd92:	6818      	ldr	r0, [r3, #0]
 800bd94:	460c      	mov	r4, r1
 800bd96:	b118      	cbz	r0, 800bda0 <__swsetup_r+0x14>
 800bd98:	6a03      	ldr	r3, [r0, #32]
 800bd9a:	b90b      	cbnz	r3, 800bda0 <__swsetup_r+0x14>
 800bd9c:	f7fd ff9e 	bl	8009cdc <__sinit>
 800bda0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bda4:	0719      	lsls	r1, r3, #28
 800bda6:	d422      	bmi.n	800bdee <__swsetup_r+0x62>
 800bda8:	06da      	lsls	r2, r3, #27
 800bdaa:	d407      	bmi.n	800bdbc <__swsetup_r+0x30>
 800bdac:	2209      	movs	r2, #9
 800bdae:	602a      	str	r2, [r5, #0]
 800bdb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdb4:	81a3      	strh	r3, [r4, #12]
 800bdb6:	f04f 30ff 	mov.w	r0, #4294967295
 800bdba:	e033      	b.n	800be24 <__swsetup_r+0x98>
 800bdbc:	0758      	lsls	r0, r3, #29
 800bdbe:	d512      	bpl.n	800bde6 <__swsetup_r+0x5a>
 800bdc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bdc2:	b141      	cbz	r1, 800bdd6 <__swsetup_r+0x4a>
 800bdc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bdc8:	4299      	cmp	r1, r3
 800bdca:	d002      	beq.n	800bdd2 <__swsetup_r+0x46>
 800bdcc:	4628      	mov	r0, r5
 800bdce:	f7fe feff 	bl	800abd0 <_free_r>
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	6363      	str	r3, [r4, #52]	@ 0x34
 800bdd6:	89a3      	ldrh	r3, [r4, #12]
 800bdd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bddc:	81a3      	strh	r3, [r4, #12]
 800bdde:	2300      	movs	r3, #0
 800bde0:	6063      	str	r3, [r4, #4]
 800bde2:	6923      	ldr	r3, [r4, #16]
 800bde4:	6023      	str	r3, [r4, #0]
 800bde6:	89a3      	ldrh	r3, [r4, #12]
 800bde8:	f043 0308 	orr.w	r3, r3, #8
 800bdec:	81a3      	strh	r3, [r4, #12]
 800bdee:	6923      	ldr	r3, [r4, #16]
 800bdf0:	b94b      	cbnz	r3, 800be06 <__swsetup_r+0x7a>
 800bdf2:	89a3      	ldrh	r3, [r4, #12]
 800bdf4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bdf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bdfc:	d003      	beq.n	800be06 <__swsetup_r+0x7a>
 800bdfe:	4621      	mov	r1, r4
 800be00:	4628      	mov	r0, r5
 800be02:	f000 f883 	bl	800bf0c <__smakebuf_r>
 800be06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be0a:	f013 0201 	ands.w	r2, r3, #1
 800be0e:	d00a      	beq.n	800be26 <__swsetup_r+0x9a>
 800be10:	2200      	movs	r2, #0
 800be12:	60a2      	str	r2, [r4, #8]
 800be14:	6962      	ldr	r2, [r4, #20]
 800be16:	4252      	negs	r2, r2
 800be18:	61a2      	str	r2, [r4, #24]
 800be1a:	6922      	ldr	r2, [r4, #16]
 800be1c:	b942      	cbnz	r2, 800be30 <__swsetup_r+0xa4>
 800be1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800be22:	d1c5      	bne.n	800bdb0 <__swsetup_r+0x24>
 800be24:	bd38      	pop	{r3, r4, r5, pc}
 800be26:	0799      	lsls	r1, r3, #30
 800be28:	bf58      	it	pl
 800be2a:	6962      	ldrpl	r2, [r4, #20]
 800be2c:	60a2      	str	r2, [r4, #8]
 800be2e:	e7f4      	b.n	800be1a <__swsetup_r+0x8e>
 800be30:	2000      	movs	r0, #0
 800be32:	e7f7      	b.n	800be24 <__swsetup_r+0x98>
 800be34:	20000108 	.word	0x20000108

0800be38 <_raise_r>:
 800be38:	291f      	cmp	r1, #31
 800be3a:	b538      	push	{r3, r4, r5, lr}
 800be3c:	4605      	mov	r5, r0
 800be3e:	460c      	mov	r4, r1
 800be40:	d904      	bls.n	800be4c <_raise_r+0x14>
 800be42:	2316      	movs	r3, #22
 800be44:	6003      	str	r3, [r0, #0]
 800be46:	f04f 30ff 	mov.w	r0, #4294967295
 800be4a:	bd38      	pop	{r3, r4, r5, pc}
 800be4c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800be4e:	b112      	cbz	r2, 800be56 <_raise_r+0x1e>
 800be50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be54:	b94b      	cbnz	r3, 800be6a <_raise_r+0x32>
 800be56:	4628      	mov	r0, r5
 800be58:	f000 f830 	bl	800bebc <_getpid_r>
 800be5c:	4622      	mov	r2, r4
 800be5e:	4601      	mov	r1, r0
 800be60:	4628      	mov	r0, r5
 800be62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be66:	f000 b817 	b.w	800be98 <_kill_r>
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d00a      	beq.n	800be84 <_raise_r+0x4c>
 800be6e:	1c59      	adds	r1, r3, #1
 800be70:	d103      	bne.n	800be7a <_raise_r+0x42>
 800be72:	2316      	movs	r3, #22
 800be74:	6003      	str	r3, [r0, #0]
 800be76:	2001      	movs	r0, #1
 800be78:	e7e7      	b.n	800be4a <_raise_r+0x12>
 800be7a:	2100      	movs	r1, #0
 800be7c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800be80:	4620      	mov	r0, r4
 800be82:	4798      	blx	r3
 800be84:	2000      	movs	r0, #0
 800be86:	e7e0      	b.n	800be4a <_raise_r+0x12>

0800be88 <raise>:
 800be88:	4b02      	ldr	r3, [pc, #8]	@ (800be94 <raise+0xc>)
 800be8a:	4601      	mov	r1, r0
 800be8c:	6818      	ldr	r0, [r3, #0]
 800be8e:	f7ff bfd3 	b.w	800be38 <_raise_r>
 800be92:	bf00      	nop
 800be94:	20000108 	.word	0x20000108

0800be98 <_kill_r>:
 800be98:	b538      	push	{r3, r4, r5, lr}
 800be9a:	4d07      	ldr	r5, [pc, #28]	@ (800beb8 <_kill_r+0x20>)
 800be9c:	2300      	movs	r3, #0
 800be9e:	4604      	mov	r4, r0
 800bea0:	4608      	mov	r0, r1
 800bea2:	4611      	mov	r1, r2
 800bea4:	602b      	str	r3, [r5, #0]
 800bea6:	f7f5 fcf3 	bl	8001890 <_kill>
 800beaa:	1c43      	adds	r3, r0, #1
 800beac:	d102      	bne.n	800beb4 <_kill_r+0x1c>
 800beae:	682b      	ldr	r3, [r5, #0]
 800beb0:	b103      	cbz	r3, 800beb4 <_kill_r+0x1c>
 800beb2:	6023      	str	r3, [r4, #0]
 800beb4:	bd38      	pop	{r3, r4, r5, pc}
 800beb6:	bf00      	nop
 800beb8:	20002268 	.word	0x20002268

0800bebc <_getpid_r>:
 800bebc:	f7f5 bce0 	b.w	8001880 <_getpid>

0800bec0 <__swhatbuf_r>:
 800bec0:	b570      	push	{r4, r5, r6, lr}
 800bec2:	460c      	mov	r4, r1
 800bec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bec8:	2900      	cmp	r1, #0
 800beca:	b096      	sub	sp, #88	@ 0x58
 800becc:	4615      	mov	r5, r2
 800bece:	461e      	mov	r6, r3
 800bed0:	da0d      	bge.n	800beee <__swhatbuf_r+0x2e>
 800bed2:	89a3      	ldrh	r3, [r4, #12]
 800bed4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bed8:	f04f 0100 	mov.w	r1, #0
 800bedc:	bf14      	ite	ne
 800bede:	2340      	movne	r3, #64	@ 0x40
 800bee0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bee4:	2000      	movs	r0, #0
 800bee6:	6031      	str	r1, [r6, #0]
 800bee8:	602b      	str	r3, [r5, #0]
 800beea:	b016      	add	sp, #88	@ 0x58
 800beec:	bd70      	pop	{r4, r5, r6, pc}
 800beee:	466a      	mov	r2, sp
 800bef0:	f000 f848 	bl	800bf84 <_fstat_r>
 800bef4:	2800      	cmp	r0, #0
 800bef6:	dbec      	blt.n	800bed2 <__swhatbuf_r+0x12>
 800bef8:	9901      	ldr	r1, [sp, #4]
 800befa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800befe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bf02:	4259      	negs	r1, r3
 800bf04:	4159      	adcs	r1, r3
 800bf06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf0a:	e7eb      	b.n	800bee4 <__swhatbuf_r+0x24>

0800bf0c <__smakebuf_r>:
 800bf0c:	898b      	ldrh	r3, [r1, #12]
 800bf0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf10:	079d      	lsls	r5, r3, #30
 800bf12:	4606      	mov	r6, r0
 800bf14:	460c      	mov	r4, r1
 800bf16:	d507      	bpl.n	800bf28 <__smakebuf_r+0x1c>
 800bf18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bf1c:	6023      	str	r3, [r4, #0]
 800bf1e:	6123      	str	r3, [r4, #16]
 800bf20:	2301      	movs	r3, #1
 800bf22:	6163      	str	r3, [r4, #20]
 800bf24:	b003      	add	sp, #12
 800bf26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf28:	ab01      	add	r3, sp, #4
 800bf2a:	466a      	mov	r2, sp
 800bf2c:	f7ff ffc8 	bl	800bec0 <__swhatbuf_r>
 800bf30:	9f00      	ldr	r7, [sp, #0]
 800bf32:	4605      	mov	r5, r0
 800bf34:	4639      	mov	r1, r7
 800bf36:	4630      	mov	r0, r6
 800bf38:	f7fe febe 	bl	800acb8 <_malloc_r>
 800bf3c:	b948      	cbnz	r0, 800bf52 <__smakebuf_r+0x46>
 800bf3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf42:	059a      	lsls	r2, r3, #22
 800bf44:	d4ee      	bmi.n	800bf24 <__smakebuf_r+0x18>
 800bf46:	f023 0303 	bic.w	r3, r3, #3
 800bf4a:	f043 0302 	orr.w	r3, r3, #2
 800bf4e:	81a3      	strh	r3, [r4, #12]
 800bf50:	e7e2      	b.n	800bf18 <__smakebuf_r+0xc>
 800bf52:	89a3      	ldrh	r3, [r4, #12]
 800bf54:	6020      	str	r0, [r4, #0]
 800bf56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf5a:	81a3      	strh	r3, [r4, #12]
 800bf5c:	9b01      	ldr	r3, [sp, #4]
 800bf5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bf62:	b15b      	cbz	r3, 800bf7c <__smakebuf_r+0x70>
 800bf64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf68:	4630      	mov	r0, r6
 800bf6a:	f000 f81d 	bl	800bfa8 <_isatty_r>
 800bf6e:	b128      	cbz	r0, 800bf7c <__smakebuf_r+0x70>
 800bf70:	89a3      	ldrh	r3, [r4, #12]
 800bf72:	f023 0303 	bic.w	r3, r3, #3
 800bf76:	f043 0301 	orr.w	r3, r3, #1
 800bf7a:	81a3      	strh	r3, [r4, #12]
 800bf7c:	89a3      	ldrh	r3, [r4, #12]
 800bf7e:	431d      	orrs	r5, r3
 800bf80:	81a5      	strh	r5, [r4, #12]
 800bf82:	e7cf      	b.n	800bf24 <__smakebuf_r+0x18>

0800bf84 <_fstat_r>:
 800bf84:	b538      	push	{r3, r4, r5, lr}
 800bf86:	4d07      	ldr	r5, [pc, #28]	@ (800bfa4 <_fstat_r+0x20>)
 800bf88:	2300      	movs	r3, #0
 800bf8a:	4604      	mov	r4, r0
 800bf8c:	4608      	mov	r0, r1
 800bf8e:	4611      	mov	r1, r2
 800bf90:	602b      	str	r3, [r5, #0]
 800bf92:	f7f5 fcdd 	bl	8001950 <_fstat>
 800bf96:	1c43      	adds	r3, r0, #1
 800bf98:	d102      	bne.n	800bfa0 <_fstat_r+0x1c>
 800bf9a:	682b      	ldr	r3, [r5, #0]
 800bf9c:	b103      	cbz	r3, 800bfa0 <_fstat_r+0x1c>
 800bf9e:	6023      	str	r3, [r4, #0]
 800bfa0:	bd38      	pop	{r3, r4, r5, pc}
 800bfa2:	bf00      	nop
 800bfa4:	20002268 	.word	0x20002268

0800bfa8 <_isatty_r>:
 800bfa8:	b538      	push	{r3, r4, r5, lr}
 800bfaa:	4d06      	ldr	r5, [pc, #24]	@ (800bfc4 <_isatty_r+0x1c>)
 800bfac:	2300      	movs	r3, #0
 800bfae:	4604      	mov	r4, r0
 800bfb0:	4608      	mov	r0, r1
 800bfb2:	602b      	str	r3, [r5, #0]
 800bfb4:	f7f5 fcdc 	bl	8001970 <_isatty>
 800bfb8:	1c43      	adds	r3, r0, #1
 800bfba:	d102      	bne.n	800bfc2 <_isatty_r+0x1a>
 800bfbc:	682b      	ldr	r3, [r5, #0]
 800bfbe:	b103      	cbz	r3, 800bfc2 <_isatty_r+0x1a>
 800bfc0:	6023      	str	r3, [r4, #0]
 800bfc2:	bd38      	pop	{r3, r4, r5, pc}
 800bfc4:	20002268 	.word	0x20002268

0800bfc8 <_init>:
 800bfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfca:	bf00      	nop
 800bfcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfce:	bc08      	pop	{r3}
 800bfd0:	469e      	mov	lr, r3
 800bfd2:	4770      	bx	lr

0800bfd4 <_fini>:
 800bfd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfd6:	bf00      	nop
 800bfd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfda:	bc08      	pop	{r3}
 800bfdc:	469e      	mov	lr, r3
 800bfde:	4770      	bx	lr
